// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Id$OptolithClient = require("../Misc/Id.bs.js");
var Pacts$OptolithClient = require("../Misc/Pacts.bs.js");
var Ley_List$OptolithClient = require("../Data/Ley_List.bs.js");
var Tradition$OptolithClient = require("../Misc/Tradition.bs.js");
var Ley_IntMap$OptolithClient = require("../Data/Ley_IntMap.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var Ley_Function$OptolithClient = require("../Data/Ley_Function.bs.js");
var Prerequisite$OptolithClient = require("./Prerequisite.bs.js");
var SelectOption$OptolithClient = require("../Activatable/SelectOption.bs.js");
var Activatable_Convert$OptolithClient = require("../Activatable/Activatable_Convert.bs.js");
var Activatable_SelectOptions$OptolithClient = require("../Activatable/Activatable_SelectOptions.bs.js");

function getEntrySpecificDynamicPrerequisites(isEntryToAdd, staticData, staticEntry, heroEntry, singleEntry) {
  var sid = Activatable_SelectOptions$OptolithClient.getOption1(singleEntry);
  var sid2 = Activatable_SelectOptions$OptolithClient.getOption2(singleEntry);
  var tmp;
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
        var match = Id$OptolithClient.Advantage.fromInt(staticEntry._0.id);
        tmp = typeof match === "number" ? (
            match < 5 ? (
                match > 3 || match < 1 ? ({
                      hd: {
                        TAG: /* Activatable */6,
                        _0: {
                          id: {
                            TAG: /* Disadvantage */1,
                            _0: Id$OptolithClient.Disadvantage.toInt(/* Incompetent */18)
                          },
                          active: false,
                          options: Ley_Option$OptolithClient.catOptions({
                                hd: Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                                tl: /* [] */0
                              }),
                          level: undefined
                        }
                      },
                      tl: /* [] */0
                    }) : /* [] */0
              ) : (
                match !== 13 ? /* [] */0 : ({
                      hd: {
                        TAG: /* Activatable */6,
                        _0: {
                          id: {
                            TAG: /* Disadvantage */1,
                            _0: Id$OptolithClient.Disadvantage.toInt(/* MagicalRestriction */5)
                          },
                          active: false,
                          options: Ley_Option$OptolithClient.catOptions({
                                hd: Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                                tl: /* [] */0
                              }),
                          level: undefined
                        }
                      },
                      tl: /* [] */0
                    })
              )
          ) : /* [] */0;
        break;
    case /* Disadvantage */1 :
        var match$1 = Id$OptolithClient.Disadvantage.fromInt(staticEntry._0.id);
        tmp = typeof match$1 === "number" ? (
            match$1 !== 5 ? (
                match$1 !== 18 ? /* [] */0 : ({
                      hd: {
                        TAG: /* Activatable */6,
                        _0: {
                          id: {
                            TAG: /* Advantage */0,
                            _0: Id$OptolithClient.Advantage.toInt(/* Aptitude */0)
                          },
                          active: false,
                          options: Ley_Option$OptolithClient.catOptions({
                                hd: Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                                tl: /* [] */0
                              }),
                          level: undefined
                        }
                      },
                      tl: {
                        hd: {
                          TAG: /* Activatable */6,
                          _0: {
                            id: {
                              TAG: /* Advantage */0,
                              _0: Id$OptolithClient.Advantage.toInt(/* ExceptionalSkill */4)
                            },
                            active: false,
                            options: Ley_Option$OptolithClient.catOptions({
                                  hd: Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                                  tl: /* [] */0
                                }),
                            level: undefined
                          }
                        },
                        tl: /* [] */0
                      }
                    })
              ) : ({
                  hd: {
                    TAG: /* Activatable */6,
                    _0: {
                      id: {
                        TAG: /* Advantage */0,
                        _0: Id$OptolithClient.Advantage.toInt(/* MagicalAttunement */13)
                      },
                      active: false,
                      options: Ley_Option$OptolithClient.catOptions({
                            hd: Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                            tl: /* [] */0
                          }),
                      level: undefined
                    }
                  },
                  tl: /* [] */0
                })
          ) : /* [] */0;
        break;
    case /* SpecialAbility */2 :
        var match$2 = Id$OptolithClient.SpecialAbility.fromInt(staticEntry._0.id);
        if (typeof match$2 === "number") {
          var exit = 0;
          if (match$2 >= 71) {
            tmp = match$2 !== 76 ? (
                match$2 >= 72 ? /* [] */0 : ({
                      hd: {
                        TAG: /* Activatable */6,
                        _0: {
                          id: {
                            TAG: /* SpecialAbility */2,
                            _0: Id$OptolithClient.SpecialAbility.toInt(/* Language */6)
                          },
                          active: true,
                          options: Ley_Option$OptolithClient.catOptions({
                                hd: Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                                tl: /* [] */0
                              }),
                          level: 3
                        }
                      },
                      tl: /* [] */0
                    })
              ) : Ley_Option$OptolithClient.option(/* [] */0, (function (ids) {
                      return {
                              hd: {
                                TAG: /* ActivatableMultiEntry */7,
                                _0: {
                                  id: {
                                    TAG: /* SpecialAbilities */2,
                                    _0: ids
                                  },
                                  active: true,
                                  options: /* [] */0,
                                  level: undefined
                                }
                              },
                              tl: /* [] */0
                            };
                    }), Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Curry._3(Ley_IntMap$OptolithClient.foldr, (function (x) {
                              if (!x.canLearnRituals) {
                                return Ley_Function$OptolithClient.id;
                              }
                              var partial_arg = x.id;
                              return function (param) {
                                return Ley_List$OptolithClient.cons(partial_arg, param);
                              };
                            }), /* [] */0, staticData.magicalTraditions)));
          } else if (match$2 !== 46) {
            if (match$2 >= 26) {
              tmp = /* [] */0;
            } else {
              switch (match$2) {
                case /* SkillSpecialization */0 :
                    var sameSkillActiveCount = Ley_Option$OptolithClient.option(0, (function (heroEntry) {
                            return Ley_List$OptolithClient.countBy((function (x) {
                                          var match = Ley_Option$OptolithClient.listToOption(x.options);
                                          if (sid !== undefined && match !== undefined) {
                                            return Curry._2(Id$OptolithClient.Activatable.$$Option.$eq, sid, match);
                                          } else {
                                            return false;
                                          }
                                        }), heroEntry.active);
                          }), heroEntry);
                    var sameSkillDependency;
                    if (sid !== undefined && !sid.TAG) {
                      var id = sid._0;
                      sameSkillDependency = id.TAG === /* Skill */1 ? ({
                            TAG: /* Increasable */9,
                            _0: {
                              id: {
                                TAG: /* Skill */1,
                                _0: id._0
                              },
                              value: Math.imul(sameSkillActiveCount + (
                                    isEntryToAdd ? 1 : 0
                                  ) | 0, 6)
                            }
                          }) : undefined;
                    } else {
                      sameSkillDependency = undefined;
                    }
                    tmp = Ley_List$OptolithClient.append(Curry._1(Ley_Option$OptolithClient.optionToList, sameSkillDependency), Curry._1(Ley_Option$OptolithClient.optionToList, Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId), (function (param) {
                                        return Activatable_SelectOptions$OptolithClient.getSelectOption(staticEntry, param);
                                      })), (function (option) {
                                    var match = option.staticEntry;
                                    var tmp;
                                    tmp = match !== undefined && match.TAG === /* Skill */4 ? Caml_option.some(match._0.applications) : undefined;
                                    return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, tmp, (function (appMp) {
                                                  var tmp;
                                                  if (sid2 !== undefined && !sid2.TAG) {
                                                    var id = sid2._0;
                                                    if (id.TAG) {
                                                      tmp = undefined;
                                                    } else {
                                                      var id$1 = id._0;
                                                      tmp = Curry._2(Ley_IntMap$OptolithClient.find, (function (app) {
                                                              return app.id === id$1;
                                                            }), appMp);
                                                    }
                                                  } else {
                                                    tmp = undefined;
                                                  }
                                                  return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, tmp, (function (app) {
                                                                return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, app.prerequisite, (function (prerequisite) {
                                                                              return {
                                                                                      TAG: /* Activatable */6,
                                                                                      _0: prerequisite
                                                                                    };
                                                                            }));
                                                              }));
                                                }));
                                  }))));
                    break;
                case /* PropertyFocus */11 :
                    tmp = {
                      hd: {
                        TAG: /* Activatable */6,
                        _0: {
                          id: {
                            TAG: /* SpecialAbility */2,
                            _0: Id$OptolithClient.SpecialAbility.toInt(/* PropertyKnowledge */10)
                          },
                          active: true,
                          options: Ley_Option$OptolithClient.catOptions({
                                hd: Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                                tl: /* [] */0
                              }),
                          level: undefined
                        }
                      },
                      tl: /* [] */0
                    };
                    break;
                case /* AdaptionZauber */16 :
                    if (sid !== undefined && !sid.TAG) {
                      var id$1 = sid._0;
                      tmp = id$1.TAG === /* Spell */3 ? ({
                            hd: {
                              TAG: /* Increasable */9,
                              _0: {
                                id: {
                                  TAG: /* Spell */3,
                                  _0: id$1._0
                                },
                                value: 10
                              }
                            },
                            tl: /* [] */0
                          }) : /* [] */0;
                    } else {
                      tmp = /* [] */0;
                    }
                    break;
                case /* FavoriteSpellwork */18 :
                    if (sid !== undefined && !sid.TAG) {
                      var id$2 = sid._0;
                      tmp = id$2.TAG === /* Spell */3 ? ({
                            hd: {
                              TAG: /* Increasable */9,
                              _0: {
                                id: {
                                  TAG: /* Spell */3,
                                  _0: id$2._0
                                },
                                value: 0
                              }
                            },
                            tl: /* [] */0
                          }) : /* [] */0;
                    } else {
                      tmp = /* [] */0;
                    }
                    break;
                case /* TerrainKnowledge */1 :
                case /* CraftInstruments */2 :
                case /* Hunter */3 :
                case /* AreaKnowledge */4 :
                case /* Literacy */5 :
                case /* Language */6 :
                case /* CombatReflexes */7 :
                case /* ImprovedDodge */8 :
                case /* TraditionGuildMages */9 :
                case /* PropertyKnowledge */10 :
                case /* AspectKnowledge */12 :
                case /* TraditionChurchOfPraios */13 :
                case /* Feuerschlucker */14 :
                case /* CombatStyleCombination */15 :
                case /* Exorzist */17 :
                case /* TraditionWitches */19 :
                case /* MagicStyleCombination */20 :
                case /* Harmoniezauberei */21 :
                case /* Matrixzauberei */22 :
                case /* TraditionElves */23 :
                case /* TraditionDruids */24 :
                    tmp = /* [] */0;
                    break;
                case /* SpellEnhancement */25 :
                    exit = 1;
                    break;
                
              }
            }
          } else {
            exit = 1;
          }
          if (exit === 1) {
            tmp = Ley_Option$OptolithClient.fromOption(/* [] */0, Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId), (function (param) {
                            return Activatable_SelectOptions$OptolithClient.getSelectOption(staticEntry, param);
                          })), (function (option) {
                        return Curry._3(Ley_Option$OptolithClient.liftM2, (function (target, level) {
                                      return {
                                              hd: {
                                                TAG: /* Increasable */9,
                                                _0: {
                                                  id: match$2 === /* SpellEnhancement */25 ? ({
                                                        TAG: /* Spell */3,
                                                        _0: target
                                                      }) : ({
                                                        TAG: /* LiturgicalChant */4,
                                                        _0: target
                                                      }),
                                                  value: (level << 2) + 4 | 0
                                                }
                                              },
                                              tl: /* [] */0
                                            };
                                    }), option.enhancementTarget, option.enhancementLevel);
                      })));
          }
          
        } else {
          tmp = /* [] */0;
        }
        break;
    
  }
  return Curry._2(Ley_List$OptolithClient.map, (function (value) {
                return {
                        value: value,
                        displayOption: /* Generate */0
                      };
              }), tmp);
}

function getDynamicPrerequisites(isEntryToAdd, staticData, staticEntry, heroEntry, singleEntry) {
  var sid = Activatable_SelectOptions$OptolithClient.getOption1(singleEntry);
  var entrySpecifics = getEntrySpecificDynamicPrerequisites(isEntryToAdd, staticData, staticEntry, heroEntry, singleEntry);
  var selectOptionSpecifics = Ley_Option$OptolithClient.option(/* [] */0, (function (sid) {
          var tmp;
          switch (staticEntry.TAG | 0) {
            case /* Advantage */0 :
            case /* Disadvantage */1 :
                tmp = staticEntry._0.selectOptions;
                break;
            case /* SpecialAbility */2 :
                tmp = staticEntry._0.selectOptions;
                break;
            
          }
          return Ley_Option$OptolithClient.option(/* [] */0, (function (option) {
                        return Curry._2(Ley_List$OptolithClient.map, Prerequisite$OptolithClient.General.unify, Curry._1(Prerequisite$OptolithClient.Collection.ByLevel.getFirstLevel, option.prerequisites));
                      }), Curry._2(SelectOption$OptolithClient.$$Map.lookup, sid, tmp));
        }), Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId));
  return Pervasives.$at(selectOptionSpecifics, entrySpecifics);
}

function getRaceCultureProfession(staticData, hero) {
  var match = hero.race;
  var partial_arg = staticData.races;
  var id = hero.culture;
  var partial_arg$1 = staticData.cultures;
  var match$1 = hero.profession;
  var partial_arg$2 = staticData.professions;
  return [
          Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, match !== undefined ? match._0 : undefined, (function (param) {
                  return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg, param);
                })),
          Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, id !== undefined ? id : undefined, (function (param) {
                  return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg$1, param);
                })),
          Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, match$1 !== undefined ? match$1._0 : undefined, (function (param) {
                  return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg$2, param);
                }))
        ];
}

function hasSamePactCategory(current, prerequisite) {
  return prerequisite.category === current.category;
}

function hasNeededPactType(current, prerequisite) {
  var match = prerequisite.category;
  if (match !== 1) {
    return true;
  } else {
    return current.type_ === 3;
  }
}

function hasNeededPactDomain(current, prerequisite) {
  var match = prerequisite.domain;
  var match$1 = current.domain;
  if (match !== undefined) {
    if (match.TAG) {
      if (match$1.TAG) {
        return false;
      } else {
        return Curry._2(Ley_List$OptolithClient.elem, match$1._0, match._0);
      }
    } else if (match$1.TAG) {
      return false;
    } else {
      return match$1._0 === match._0;
    }
  } else {
    return true;
  }
}

function getPrimaryAttributeId(staticData, heroSpecialAbilities, scope) {
  if (scope) {
    return Tradition$OptolithClient.Blessed.getPrimaryAttributeId(staticData, heroSpecialAbilities);
  } else {
    return Tradition$OptolithClient.Magical.getPrimaryAttributeId(staticData, heroSpecialAbilities);
  }
}

function hasIncreasableMinValue(current, param) {
  var minValue = param.value;
  var id = param.id;
  switch (id.TAG | 0) {
    case /* Attribute */0 :
        return Ley_Option$OptolithClient.option(false, (function (x) {
                      return x.value >= minValue;
                    }), Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, current.attributes));
    case /* Skill */1 :
        return Ley_Option$OptolithClient.option(false, (function (x) {
                      return x.value >= minValue;
                    }), Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, current.skills));
    case /* CombatTechnique */2 :
        return Ley_Option$OptolithClient.option(false, (function (x) {
                      return x.value >= minValue;
                    }), Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, current.combatTechniques));
    case /* Spell */3 :
        return Ley_Option$OptolithClient.option(false, (function (x) {
                      var value = x.value;
                      if (value) {
                        return value._0 >= minValue;
                      } else {
                        return false;
                      }
                    }), Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, current.spells));
    case /* LiturgicalChant */4 :
        return Ley_Option$OptolithClient.option(false, (function (x) {
                      var value = x.value;
                      if (value) {
                        return value._0 >= minValue;
                      } else {
                        return false;
                      }
                    }), Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, current.liturgicalChants));
    
  }
}

function isSidValid(single, sid) {
  return Ley_Option$OptolithClient.option(false, (function (param) {
                return sid === param;
              }), Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId(single));
}

function isLevelValid(single, level) {
  if (level !== undefined) {
    return Ley_Option$OptolithClient.option(false, (function (param) {
                  return level === param;
                }), single.level);
  } else {
    return true;
  }
}

function isSingleActivatableValid(current, param) {
  var level = param.level;
  var options = param.options;
  var active = param.active;
  var id = param.id;
  var heroEntry;
  switch (id.TAG | 0) {
    case /* Advantage */0 :
        heroEntry = Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, current.advantages);
        break;
    case /* Disadvantage */1 :
        heroEntry = Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, current.disadvantages);
        break;
    case /* SpecialAbility */2 :
        heroEntry = Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, current.specialAbilities);
        break;
    
  }
  if (heroEntry !== undefined) {
    return Curry._2(Ley_List$OptolithClient.any, (function (single) {
                  if (Curry._2(Ley_List$OptolithClient.all, (function (param) {
                            return isSidValid(param[0], param[1]);
                          }), Ley_List$OptolithClient.zip(single.options, options))) {
                    return isLevelValid(single, level);
                  } else {
                    return false;
                  }
                }), heroEntry.active) === active;
  } else {
    return !active;
  }
}

function isPrerequisiteMet(staticData, hero, sourceId, prerequisite) {
  var sex = prerequisite.value;
  if (typeof sex === "number") {
    var match = getRaceCultureProfession(staticData, hero);
    var profession = match[2];
    var culture = match[1];
    var race = match[0];
    switch (sourceId.TAG | 0) {
      case /* Advantage */5 :
          var id = sourceId._0;
          if (Ley_Option$OptolithClient.option(false, (function (race) {
                    return Curry._2(Ley_List$OptolithClient.elem, id, race.automaticAdvantages) || Curry._2(Ley_List$OptolithClient.elem, id, race.stronglyRecommendedAdvantages) ? true : Curry._2(Ley_List$OptolithClient.elem, id, race.commonAdvantages);
                  }), race) || Ley_Option$OptolithClient.option(false, (function (culture) {
                    return Curry._2(Ley_List$OptolithClient.elem, id, culture.commonAdvantages);
                  }), culture)) {
            return true;
          } else {
            return Ley_Option$OptolithClient.option(false, (function (profession) {
                          return Curry._2(Ley_List$OptolithClient.elem, id, profession.suggestedAdvantages);
                        }), profession);
          }
      case /* Disadvantage */6 :
          var id$1 = sourceId._0;
          if (Ley_Option$OptolithClient.option(false, (function (race) {
                    return Curry._2(Ley_List$OptolithClient.elem, id$1, race.stronglyRecommendedDisadvantages) ? true : Curry._2(Ley_List$OptolithClient.elem, id$1, race.commonDisadvantages);
                  }), race) || Ley_Option$OptolithClient.option(false, (function (culture) {
                    return Curry._2(Ley_List$OptolithClient.elem, id$1, culture.commonDisadvantages);
                  }), culture)) {
            return true;
          } else {
            return Ley_Option$OptolithClient.option(false, (function (profession) {
                          return Curry._2(Ley_List$OptolithClient.elem, id$1, profession.suggestedDisadvantages);
                        }), profession);
          }
      default:
        return false;
    }
  }
  switch (sex.TAG | 0) {
    case /* Sex */0 :
        return hero.sex === sex._0;
    case /* Race */1 :
        var prerequisite$1 = sex._0;
        var match$1 = hero.race;
        if (match$1 === undefined) {
          return false;
        }
        var requiredId = prerequisite$1.id;
        if (requiredId.TAG) {
          return Curry._2(Ley_List$OptolithClient.elem, match$1._0, prerequisite$1.id._0) === prerequisite$1.active;
        } else {
          return requiredId._0 === match$1._0 === prerequisite$1.active;
        }
    case /* Culture */2 :
        var prerequisite$2 = sex._0;
        var match$2 = hero.culture;
        if (match$2 !== undefined) {
          if (prerequisite$2.TAG) {
            return Curry._2(Ley_List$OptolithClient.elem, match$2, prerequisite$2._0);
          } else {
            return prerequisite$2._0 === match$2;
          }
        } else {
          return false;
        }
    case /* Pact */3 :
        var prerequisite$3 = sex._0;
        var pact = hero.pact;
        if (pact !== undefined && Pacts$OptolithClient.isPactFromStateValid(pact) && hasSamePactCategory(pact, prerequisite$3) && hasNeededPactType(pact, prerequisite$3) && hasNeededPactDomain(pact, prerequisite$3)) {
          var requiredLevel = prerequisite$3.level;
          if (requiredLevel !== undefined && requiredLevel > pact.level) {
            if (requiredLevel <= 1) {
              return pact.level === 0;
            } else {
              return false;
            }
          } else {
            return true;
          }
        } else {
          return false;
        }
    case /* SocialStatus */4 :
        var prerequisite$4 = sex._0;
        var socialStatus = hero.personalData.socialStatus;
        if (socialStatus !== undefined) {
          return socialStatus >= prerequisite$4;
        } else {
          return false;
        }
    case /* PrimaryAttribute */5 :
        var prerequisite$5 = sex._0;
        var partial_arg = hero.attributes;
        var attr = Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, getPrimaryAttributeId(staticData, hero.specialAbilities, prerequisite$5.scope), (function (param) {
                return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg, param);
              }));
        return Ley_Option$OptolithClient.option(8, (function (attr) {
                      return attr.value;
                    }), attr) >= prerequisite$5.value;
    case /* Activatable */6 :
        return isSingleActivatableValid(hero, sex._0);
    case /* ActivatableMultiEntry */7 :
        var param = sex._0;
        var level = param.level;
        var options = param.options;
        var active = param.active;
        var ids = param.id;
        var tmp;
        switch (ids.TAG | 0) {
          case /* Advantages */0 :
              tmp = Curry._2(Ley_List$OptolithClient.map, (function (id) {
                      return {
                              TAG: /* Advantage */0,
                              _0: id
                            };
                    }), ids._0);
              break;
          case /* Disadvantages */1 :
              tmp = Curry._2(Ley_List$OptolithClient.map, (function (id) {
                      return {
                              TAG: /* Disadvantage */1,
                              _0: id
                            };
                    }), ids._0);
              break;
          case /* SpecialAbilities */2 :
              tmp = Curry._2(Ley_List$OptolithClient.map, (function (id) {
                      return {
                              TAG: /* SpecialAbility */2,
                              _0: id
                            };
                    }), ids._0);
              break;
          
        }
        return Curry._2(Ley_List$OptolithClient.any, (function (id) {
                      return isSingleActivatableValid(hero, {
                                  id: id,
                                  active: active,
                                  options: options,
                                  level: level
                                });
                    }), tmp);
    case /* ActivatableMultiSelect */8 :
        var param$1 = sex._0;
        var level$1 = param$1.level;
        var otherOptions = param$1.otherOptions;
        var firstOption = param$1.firstOption;
        var active$1 = param$1.active;
        var id$2 = param$1.id;
        var heroEntry;
        switch (id$2.TAG | 0) {
          case /* Advantage */0 :
              heroEntry = Curry._2(Ley_IntMap$OptolithClient.lookup, id$2._0, hero.advantages);
              break;
          case /* Disadvantage */1 :
              heroEntry = Curry._2(Ley_IntMap$OptolithClient.lookup, id$2._0, hero.disadvantages);
              break;
          case /* SpecialAbility */2 :
              heroEntry = Curry._2(Ley_IntMap$OptolithClient.lookup, id$2._0, hero.specialAbilities);
              break;
          
        }
        if (heroEntry !== undefined) {
          return Curry._2(Ley_List$OptolithClient.any, (function (single) {
                        var match = Ley_List$OptolithClient.uncons(single.options);
                        var tmp;
                        if (match !== undefined) {
                          var x = match[0];
                          tmp = Curry._2(Ley_List$OptolithClient.any, (function (option) {
                                  return isSidValid(x, option);
                                }), firstOption) && Curry._2(Ley_List$OptolithClient.all, (function (param) {
                                  return isSidValid(param[0], param[1]);
                                }), Ley_List$OptolithClient.zip(match[1], otherOptions));
                        } else {
                          tmp = false;
                        }
                        if (tmp) {
                          return isLevelValid(single, level$1);
                        } else {
                          return false;
                        }
                      }), heroEntry.active) === active$1;
        } else {
          return !active$1;
        }
    case /* Increasable */9 :
        return hasIncreasableMinValue(hero, sex._0);
    case /* IncreasableMultiEntry */10 :
        var param$2 = sex._0;
        var value = param$2.value;
        var ids$1 = param$2.id;
        var tmp$1;
        switch (ids$1.TAG | 0) {
          case /* Attributes */0 :
              tmp$1 = Curry._2(Ley_List$OptolithClient.map, (function (id) {
                      return {
                              TAG: /* Attribute */0,
                              _0: id
                            };
                    }), ids$1._0);
              break;
          case /* Skills */1 :
              tmp$1 = Curry._2(Ley_List$OptolithClient.map, (function (id) {
                      return {
                              TAG: /* Skill */1,
                              _0: id
                            };
                    }), ids$1._0);
              break;
          case /* CombatTechniques */2 :
              tmp$1 = Curry._2(Ley_List$OptolithClient.map, (function (id) {
                      return {
                              TAG: /* CombatTechnique */2,
                              _0: id
                            };
                    }), ids$1._0);
              break;
          case /* Spells */3 :
              tmp$1 = Curry._2(Ley_List$OptolithClient.map, (function (id) {
                      return {
                              TAG: /* Spell */3,
                              _0: id
                            };
                    }), ids$1._0);
              break;
          case /* LiturgicalChants */4 :
              tmp$1 = Curry._2(Ley_List$OptolithClient.map, (function (id) {
                      return {
                              TAG: /* LiturgicalChant */4,
                              _0: id
                            };
                    }), ids$1._0);
              break;
          
        }
        return Curry._2(Ley_List$OptolithClient.any, (function (id) {
                      return hasIncreasableMinValue(hero, {
                                  id: id,
                                  value: value
                                });
                    }), tmp$1);
    
  }
}

function arePrerequisitesMet(staticData, hero, sourceId, prerequisites) {
  return Curry._2(Ley_List$OptolithClient.all, (function (param) {
                return isPrerequisiteMet(staticData, hero, sourceId, param);
              }), prerequisites);
}

function getMaxLevel(staticData, hero, sourceId, prerequisites) {
  return Curry._3(Ley_IntMap$OptolithClient.foldlWithKey, (function (max, level, prerequisites) {
                if (max !== undefined && max <= level) {
                  return max;
                }
                if (arePrerequisitesMet(staticData, hero, sourceId, prerequisites)) {
                  return max;
                } else {
                  return level;
                }
              }), undefined, prerequisites);
}

function getFlatFirstPrerequisites(staticAdvantage) {
  switch (staticAdvantage.TAG | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        break;
    case /* SpecialAbility */2 :
        return Curry._2(Ley_List$OptolithClient.map, Prerequisite$OptolithClient.General.unify, Curry._1(Prerequisite$OptolithClient.Collection.ByLevel.getFirstLevel, staticAdvantage._0.prerequisites));
    
  }
  return Curry._2(Ley_List$OptolithClient.map, Prerequisite$OptolithClient.AdvantageDisadvantage.unify, Curry._1(Prerequisite$OptolithClient.Collection.ByLevel.getFirstLevel, staticAdvantage._0.prerequisites));
}

function getLevelPrerequisites(staticAdvantage) {
  switch (staticAdvantage.TAG | 0) {
    case /* Advantage */0 :
        var mp = staticAdvantage._0.prerequisites;
        if (mp.TAG) {
          return Curry._2(Ley_IntMap$OptolithClient.map, Curry._1(Ley_List$OptolithClient.map, Prerequisite$OptolithClient.AdvantageDisadvantage.unify), Curry._2(Ley_IntMap$OptolithClient.filterWithKey, (function (k, param) {
                            return k > 1;
                          }), mp._0));
        } else {
          return Ley_IntMap$OptolithClient.empty;
        }
    case /* Disadvantage */1 :
        var mp$1 = staticAdvantage._0.prerequisites;
        if (mp$1.TAG) {
          return Curry._2(Ley_IntMap$OptolithClient.map, Curry._1(Ley_List$OptolithClient.map, Prerequisite$OptolithClient.AdvantageDisadvantage.unify), Curry._2(Ley_IntMap$OptolithClient.filterWithKey, (function (k, param) {
                            return k > 1;
                          }), mp$1._0));
        } else {
          return Ley_IntMap$OptolithClient.empty;
        }
    case /* SpecialAbility */2 :
        var mp$2 = staticAdvantage._0.prerequisites;
        if (mp$2.TAG) {
          return Curry._2(Ley_IntMap$OptolithClient.map, Curry._1(Ley_List$OptolithClient.map, Prerequisite$OptolithClient.General.unify), Curry._2(Ley_IntMap$OptolithClient.filterWithKey, (function (k, param) {
                            return k > 1;
                          }), mp$2._0));
        } else {
          return Ley_IntMap$OptolithClient.empty;
        }
    
  }
}

var Activatable = {
  getFlatFirstPrerequisites: getFlatFirstPrerequisites,
  getLevelPrerequisites: getLevelPrerequisites
};

var Dynamic = {
  getDynamicPrerequisites: getDynamicPrerequisites
};

var Validation = {
  isPrerequisiteMet: isPrerequisiteMet,
  arePrerequisitesMet: arePrerequisitesMet,
  getMaxLevel: getMaxLevel
};

exports.Dynamic = Dynamic;
exports.Validation = Validation;
exports.Activatable = Activatable;
/* Id-OptolithClient Not a pure module */
