// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Skill$OptolithClient from "../Increasable/Skill.bs.js";
import * as Ley_Int$OptolithClient from "../Data/Ley_Int.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Attribute$OptolithClient from "../Increasable/Attribute.bs.js";
import * as Tradition$OptolithClient from "../Misc/Tradition.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_IntSet$OptolithClient from "../Data/Ley_IntSet.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as Prerequisites$OptolithClient from "./Prerequisites.bs.js";
import * as CombatTechnique$OptolithClient from "../Increasable/CombatTechnique.bs.js";
import * as ActivatableSkill$OptolithClient from "../Increasable/ActivatableSkill.bs.js";
import * as Activatable_Convert$OptolithClient from "../Activatable/Activatable_Convert.bs.js";
import * as Activatable_Dynamic$OptolithClient from "../Activatable/Activatable_Dynamic.bs.js";

function isLevelDependencyMatched(dependency, active) {
  var match = dependency.level;
  var match$1 = active.level;
  if (match !== undefined) {
    if (match$1 !== undefined) {
      return match$1 >= match === dependency.active;
    } else {
      return !dependency.active;
    }
  } else {
    return true;
  }
}

function areOptionDependenciesMatched(dependency, active) {
  return Ley_List$OptolithClient.Index.iall((function (i, option) {
                return Ley_Option$OptolithClient.option(false, (function (activeOption) {
                              if (option.TAG) {
                                return Curry._2(Ley_List$OptolithClient.elem, activeOption, option._0) === dependency.active;
                              } else {
                                return Curry._2(Id$OptolithClient.Activatable.SelectOption.$eq, activeOption, option._0) === dependency.active;
                              }
                            }), Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Ley_List$OptolithClient.Safe.atMay(active.options, i), Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId));
              }), dependency.options);
}

function isDependencyMatched(dependency, active) {
  return (isLevelDependencyMatched(dependency, active) && areOptionDependenciesMatched(dependency, active)) === dependency.active;
}

function flattenSkillDependencies(getValueForTargetId, id, dependencies) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                var targets = dep.target;
                if (!targets.TAG) {
                  return dep.value;
                }
                var isMatchedByOtherEntry = Curry._2(Ley_List$OptolithClient.any, (function (value) {
                        return value >= dep.value;
                      }), Curry._2(Ley_List$OptolithClient.map, getValueForTargetId, Ley_List$OptolithClient.$$delete(id, targets._0)));
                if (isMatchedByOtherEntry) {
                  return ;
                } else {
                  return dep.value;
                }
              }), dependencies);
}

function flattenActivatableSkillDependencies(getValueForTargetId, id, dependencies) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                var targets = dep.target;
                if (!targets.TAG) {
                  return dep.value;
                }
                var isMatchedByOtherEntry = Curry._2(Ley_List$OptolithClient.any, (function (value) {
                        if (value) {
                          return value._0 >= dep.value;
                        } else {
                          return false;
                        }
                      }), Curry._2(Ley_List$OptolithClient.map, getValueForTargetId, Ley_List$OptolithClient.$$delete(id, targets._0)));
                if (isMatchedByOtherEntry) {
                  return ;
                } else {
                  return dep.value;
                }
              }), dependencies);
}

function flattenActivatableDependencies(getActiveListForTargetId, id, dependencies) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                var targets = dep.target;
                if (!targets.TAG) {
                  return dep;
                }
                var isMatchedByOtherEntry = Curry._2(Ley_List$OptolithClient.any, (function (param) {
                        return isDependencyMatched(dep, param);
                      }), Curry._2(Ley_List$OptolithClient.concatMap, getActiveListForTargetId, Ley_List$OptolithClient.$$delete(id, targets._0)));
                if (isMatchedByOtherEntry) {
                  return ;
                } else {
                  return dep;
                }
              }), dependencies);
}

function getRequiredSelectOptions1(otherActivatables, x) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                return Ley_Option$OptolithClient.listToOption(dep.options);
              }), flattenActivatableDependencies((function (id) {
                    return Ley_Option$OptolithClient.option(/* [] */0, (function (x) {
                                  return x.active;
                                }), Curry._2(Ley_IntMap$OptolithClient.lookup, id, otherActivatables));
                  }), x.id, x.dependencies));
}

var Flatten = {
  flattenSkillDependencies: flattenSkillDependencies,
  flattenActivatableSkillDependencies: flattenActivatableSkillDependencies,
  flattenActivatableDependencies: flattenActivatableDependencies,
  getRequiredSelectOptions1: getRequiredSelectOptions1
};

function addAttributeDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.attributes = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Curry._1(Attribute$OptolithClient.Dynamic.empty, id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.attributes);
  return newrecord;
}

function addSkillDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.skills = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Curry._1(Skill$OptolithClient.Dynamic.empty, id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.skills);
  return newrecord;
}

function addCombatTechniqueDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.combatTechniques = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Curry._1(CombatTechnique$OptolithClient.Dynamic.empty, id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.combatTechniques);
  return newrecord;
}

function addSpellDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.spells = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(ActivatableSkill$OptolithClient.Dynamic.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.spells);
  return newrecord;
}

function addLiturgicalChantDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.liturgicalChants = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(ActivatableSkill$OptolithClient.Dynamic.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.liturgicalChants);
  return newrecord;
}

function addAdvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.advantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Activatable_Dynamic$OptolithClient.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  active: heroEntry$1.active,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.advantages);
  return newrecord;
}

function addDisadvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.disadvantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Activatable_Dynamic$OptolithClient.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  active: heroEntry$1.active,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.disadvantages);
  return newrecord;
}

function addSpecialAbilityDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.specialAbilities = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Activatable_Dynamic$OptolithClient.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  active: heroEntry$1.active,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.specialAbilities);
  return newrecord;
}

function addAttributeDependency$1(dep, hero) {
  var id = dep.target;
  if (id.TAG) {
    return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                  return addAttributeDependency(dep, param, param$1);
                }), hero, id._0);
  } else {
    return addAttributeDependency(dep, hero, id._0);
  }
}

function removeAttributeDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.attributes = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Curry._1(Attribute$OptolithClient.Dynamic.isEmpty, heroEntry);
                                    }), param);
                      }));
        }), id, hero.attributes);
  return newrecord;
}

function removeSkillDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.skills = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Curry._1(Skill$OptolithClient.Dynamic.isEmpty, heroEntry);
                                    }), param);
                      }));
        }), id, hero.skills);
  return newrecord;
}

function removeCombatTechniqueDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.combatTechniques = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Curry._1(CombatTechnique$OptolithClient.Dynamic.isEmpty, heroEntry);
                                    }), param);
                      }));
        }), id, hero.combatTechniques);
  return newrecord;
}

function removeSpellDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.spells = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !ActivatableSkill$OptolithClient.Dynamic.isEmpty(heroEntry);
                                    }), param);
                      }));
        }), id, hero.spells);
  return newrecord;
}

function removeLiturgicalChantDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.liturgicalChants = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !ActivatableSkill$OptolithClient.Dynamic.isEmpty(heroEntry);
                                    }), param);
                      }));
        }), id, hero.liturgicalChants);
  return newrecord;
}

function removeAdvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.advantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    active: heroEntry.active,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Activatable_Dynamic$OptolithClient.isEmpty(heroEntry);
                                    }), param);
                      }));
        }), id, hero.advantages);
  return newrecord;
}

function removeDisadvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.disadvantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    active: heroEntry.active,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Activatable_Dynamic$OptolithClient.isEmpty(heroEntry);
                                    }), param);
                      }));
        }), id, hero.disadvantages);
  return newrecord;
}

function removeSpecialAbilityDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.specialAbilities = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    active: heroEntry.active,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Activatable_Dynamic$OptolithClient.isEmpty(heroEntry);
                                    }), param);
                      }));
        }), id, hero.specialAbilities);
  return newrecord;
}

function removeAttributeDependency$1(dep, hero) {
  var id = dep.target;
  if (id.TAG) {
    return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                  return removeAttributeDependency(dep, param, param$1);
                }), hero, id._0);
  } else {
    return removeAttributeDependency(dep, hero, id._0);
  }
}

function isUnfamiliarSpell(transferredUnfamiliar, heroTraditions) {
  var isIntuitiveMageActive = Curry._2(Ley_List$OptolithClient.any, (function (param) {
          return param[0].id === Id$OptolithClient.SpecialAbility.toInt(/* TraditionIntuitiveMage */51);
        }), heroTraditions);
  if (isIntuitiveMageActive) {
    return function (param) {
      return Ley_Function$OptolithClient.$$const(false, param);
    };
  }
  var activeTraditionNumericIds = Curry._1(Ley_IntSet$OptolithClient.fromList, Ley_List$OptolithClient.cons(Id$OptolithClient.MagicalTradition.toInt(/* General */0), Curry._2(Ley_List$OptolithClient.concatMap, (function (param) {
                  var trad = param[2];
                  if (trad.id === Id$OptolithClient.SpecialAbility.toInt(/* TraditionGuildMages */9)) {
                    return Ley_List$OptolithClient.cons(Id$OptolithClient.MagicalTradition.toInt(/* Qabalyamagier */10), Curry._1(Ley_Option$OptolithClient.optionToList, trad.numId));
                  } else {
                    return Curry._1(Ley_Option$OptolithClient.optionToList, trad.numId);
                  }
                }), heroTraditions)));
  var isNoTraditionActive = Curry._1(Ley_IntSet$OptolithClient.disjoint, activeTraditionNumericIds);
  return function (staticSpell) {
    if (Curry._2(Ley_List$OptolithClient.all, (function (tu) {
              var id = tu.id;
              return typeof id === "number" ? (
                        id === /* Spells */0 ? true : false
                      ) : (
                        id.TAG ? false : id._0 !== staticSpell.id
                      );
            }), transferredUnfamiliar)) {
      return Curry._1(isNoTraditionActive, staticSpell.traditions);
    } else {
      return false;
    }
  };
}

function getTransferredUnfamiliarById(single) {
  var match = Id$OptolithClient.SpecialAbility.fromInt(single.id);
  if (typeof match !== "number") {
    return /* [] */0;
  }
  if (match >= 80) {
    if (match !== 91) {
      if (match !== 95) {
        return /* [] */0;
      } else {
        return {
                hd: {
                  id: /* Spells */0,
                  srcId: single.id
                },
                tl: /* [] */0
              };
      }
    }
    
  } else if (match >= 77) {
    if (match < 79) {
      return Ley_Option$OptolithClient.mapOption((function (param) {
                    if (param.TAG) {
                      return ;
                    }
                    var match = param._0;
                    if (match[0] !== 3) {
                      return ;
                    } else {
                      return {
                              id: {
                                TAG: /* Spell */0,
                                _0: match[1]
                              },
                              srcId: single.id
                            };
                    }
                  }), Ley_List$OptolithClient.take(3, single.options));
    }
    
  } else if (match !== 9) {
    return /* [] */0;
  }
  var match$1 = single.options;
  if (!match$1) {
    return /* [] */0;
  }
  var match$2 = match$1.hd;
  if (match$2.TAG) {
    return /* [] */0;
  }
  var match$3 = match$2._0;
  if (match$3[0] !== 3) {
    return /* [] */0;
  } else {
    return {
            hd: {
              id: {
                TAG: /* Spell */0,
                _0: match$3[1]
              },
              srcId: single.id
            },
            tl: /* [] */0
          };
  }
}

function addTransferUnfamiliarDependencies(single, hero) {
  var xs = getTransferredUnfamiliarById(single);
  if (!xs) {
    return hero;
  }
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.transferredUnfamiliarSpells = Pervasives.$at(xs, hero.transferredUnfamiliarSpells);
  return newrecord;
}

function removeTradById(id, xs) {
  return Ley_List$OptolithClient.filter((function (param) {
                return param[0].id === id;
              }), xs);
}

function removeUnfamiliarDepsById(id, xs) {
  return Ley_List$OptolithClient.filter((function (x) {
                return x.srcId === id;
              }), xs);
}

function getUnfamiliarCountAfter(staticData, transferredUnfamiliar, heroTraditions, srcId, heroSpells) {
  var transferredUnfamiliar$1 = removeUnfamiliarDepsById(srcId, transferredUnfamiliar);
  var heroTraditions$1 = removeTradById(srcId, heroTraditions);
  return Ley_List$OptolithClient.countBy((function (heroSpell) {
                return Ley_Option$OptolithClient.option(false, isUnfamiliarSpell(transferredUnfamiliar$1, heroTraditions$1), Curry._2(Ley_IntMap$OptolithClient.lookup, heroSpell.id, staticData.spells));
              }), heroSpells);
}

function isEntryAllowingTransferUnfamiliarRemovable(staticData, hero) {
  var match = hero.phase;
  if (match >= 2) {
    return function (param) {
      return Ley_Function$OptolithClient.$$const(true, param);
    };
  }
  var heroTraditions = Tradition$OptolithClient.Magical.getEntries(staticData, hero.specialAbilities);
  var transferredUnfamiliar = hero.transferredUnfamiliarSpells;
  var spells = Curry._1(Ley_IntMap$OptolithClient.elems, hero.spells);
  return Ley_Option$OptolithClient.option((function (param) {
                return Ley_Function$OptolithClient.$$const(false, param);
              }), (function (el, srcId) {
                return el.maxUnfamiliarSpells >= getUnfamiliarCountAfter(staticData, transferredUnfamiliar, heroTraditions, srcId, spells);
              }), Curry._2(Ley_IntMap$OptolithClient.lookup, hero.experienceLevel, staticData.experienceLevels));
}

function putActivatableDependency(mode, category, dependency, hero) {
  if (mode) {
    switch (category) {
      case /* Advantages */0 :
          var id = dependency.target;
          if (id.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return removeAdvantageDependency(dependency, param, param$1);
                        }), hero, id._0);
          } else {
            return removeAdvantageDependency(dependency, hero, id._0);
          }
      case /* Disadvantages */1 :
          var id$1 = dependency.target;
          if (id$1.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return removeDisadvantageDependency(dependency, param, param$1);
                        }), hero, id$1._0);
          } else {
            return removeDisadvantageDependency(dependency, hero, id$1._0);
          }
      case /* SpecialAbilities */2 :
          var id$2 = dependency.target;
          if (id$2.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return removeSpecialAbilityDependency(dependency, param, param$1);
                        }), hero, id$2._0);
          } else {
            return removeSpecialAbilityDependency(dependency, hero, id$2._0);
          }
      
    }
  } else {
    switch (category) {
      case /* Advantages */0 :
          var id$3 = dependency.target;
          if (id$3.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return addAdvantageDependency(dependency, param, param$1);
                        }), hero, id$3._0);
          } else {
            return addAdvantageDependency(dependency, hero, id$3._0);
          }
      case /* Disadvantages */1 :
          var id$4 = dependency.target;
          if (id$4.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return addDisadvantageDependency(dependency, param, param$1);
                        }), hero, id$4._0);
          } else {
            return addDisadvantageDependency(dependency, hero, id$4._0);
          }
      case /* SpecialAbilities */2 :
          var id$5 = dependency.target;
          if (id$5.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return addSpecialAbilityDependency(dependency, param, param$1);
                        }), hero, id$5._0);
          } else {
            return addSpecialAbilityDependency(dependency, hero, id$5._0);
          }
      
    }
  }
}

function applyActivatablePrerequisite(mode, sourceId, prerequisite, hero) {
  var match = prerequisite.id;
  var tmp;
  switch (match[0]) {
    case /* Advantage */0 :
        tmp = /* Advantages */0;
        break;
    case /* Disadvantage */1 :
        tmp = /* Disadvantages */1;
        break;
    case /* SpecialAbility */2 :
        tmp = /* SpecialAbilities */2;
        break;
    
  }
  var match$1 = prerequisite.id;
  return putActivatableDependency(mode, tmp, {
              source: sourceId,
              target: {
                TAG: /* One */0,
                _0: match$1[1]
              },
              active: prerequisite.active,
              options: Curry._2(Ley_List$OptolithClient.map, (function (x) {
                      return {
                              TAG: /* One */0,
                              _0: x
                            };
                    }), prerequisite.options),
              level: prerequisite.level
            }, hero);
}

function applyActivatableMultiEntryPrerequisite(mode, sourceId, prerequisite, hero) {
  var match = prerequisite.id;
  var tmp;
  switch (match.TAG | 0) {
    case /* Advantages */0 :
        tmp = /* Advantages */0;
        break;
    case /* Disadvantages */1 :
        tmp = /* Disadvantages */1;
        break;
    case /* SpecialAbilities */2 :
        tmp = /* SpecialAbilities */2;
        break;
    
  }
  var match$1 = prerequisite.id;
  return putActivatableDependency(mode, tmp, {
              source: sourceId,
              target: {
                TAG: /* Many */1,
                _0: match$1._0
              },
              active: prerequisite.active,
              options: Curry._2(Ley_List$OptolithClient.map, (function (x) {
                      return {
                              TAG: /* One */0,
                              _0: x
                            };
                    }), prerequisite.options),
              level: prerequisite.level
            }, hero);
}

function applyActivatableMultiSelectPrerequisite(mode, sourceId, prerequisite, hero) {
  var match = prerequisite.id;
  var tmp;
  switch (match[0]) {
    case /* Advantage */0 :
        tmp = /* Advantages */0;
        break;
    case /* Disadvantage */1 :
        tmp = /* Disadvantages */1;
        break;
    case /* SpecialAbility */2 :
        tmp = /* SpecialAbilities */2;
        break;
    
  }
  var match$1 = prerequisite.id;
  return putActivatableDependency(mode, tmp, {
              source: sourceId,
              target: {
                TAG: /* One */0,
                _0: match$1[1]
              },
              active: prerequisite.active,
              options: {
                hd: {
                  TAG: /* Many */1,
                  _0: prerequisite.firstOption
                },
                tl: Curry._2(Ley_List$OptolithClient.map, (function (x) {
                        return {
                                TAG: /* One */0,
                                _0: x
                              };
                      }), prerequisite.otherOptions)
              },
              level: prerequisite.level
            }, hero);
}

function putIncreasableDependency(mode, category, dependency, hero) {
  if (mode) {
    switch (category) {
      case /* Attributes */0 :
          return removeAttributeDependency$1(dependency, hero);
      case /* Skills */1 :
          var id = dependency.target;
          if (id.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return removeSkillDependency(dependency, param, param$1);
                        }), hero, id._0);
          } else {
            return removeSkillDependency(dependency, hero, id._0);
          }
      case /* CombatTechniques */2 :
          var id$1 = dependency.target;
          if (id$1.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return removeCombatTechniqueDependency(dependency, param, param$1);
                        }), hero, id$1._0);
          } else {
            return removeCombatTechniqueDependency(dependency, hero, id$1._0);
          }
      case /* Spells */3 :
          var id$2 = dependency.target;
          if (id$2.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return removeSpellDependency(dependency, param, param$1);
                        }), hero, id$2._0);
          } else {
            return removeSpellDependency(dependency, hero, id$2._0);
          }
      case /* LiturgicalChants */4 :
          var id$3 = dependency.target;
          if (id$3.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return removeLiturgicalChantDependency(dependency, param, param$1);
                        }), hero, id$3._0);
          } else {
            return removeLiturgicalChantDependency(dependency, hero, id$3._0);
          }
      
    }
  } else {
    switch (category) {
      case /* Attributes */0 :
          return addAttributeDependency$1(dependency, hero);
      case /* Skills */1 :
          var id$4 = dependency.target;
          if (id$4.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return addSkillDependency(dependency, param, param$1);
                        }), hero, id$4._0);
          } else {
            return addSkillDependency(dependency, hero, id$4._0);
          }
      case /* CombatTechniques */2 :
          var id$5 = dependency.target;
          if (id$5.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return addCombatTechniqueDependency(dependency, param, param$1);
                        }), hero, id$5._0);
          } else {
            return addCombatTechniqueDependency(dependency, hero, id$5._0);
          }
      case /* Spells */3 :
          var id$6 = dependency.target;
          if (id$6.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return addSpellDependency(dependency, param, param$1);
                        }), hero, id$6._0);
          } else {
            return addSpellDependency(dependency, hero, id$6._0);
          }
      case /* LiturgicalChants */4 :
          var id$7 = dependency.target;
          if (id$7.TAG) {
            return Curry._3(Ley_List$OptolithClient.foldl, (function (param, param$1) {
                          return addLiturgicalChantDependency(dependency, param, param$1);
                        }), hero, id$7._0);
          } else {
            return addLiturgicalChantDependency(dependency, hero, id$7._0);
          }
      
    }
  }
}

function applyIncreasablePrerequisite(mode, sourceId, prerequisite, hero) {
  var match = prerequisite.id;
  var tmp;
  switch (match[0]) {
    case /* Attribute */0 :
        tmp = /* Attributes */0;
        break;
    case /* Skill */1 :
        tmp = /* Skills */1;
        break;
    case /* CombatTechnique */2 :
        tmp = /* CombatTechniques */2;
        break;
    case /* Spell */3 :
        tmp = /* Spells */3;
        break;
    case /* LiturgicalChant */4 :
        tmp = /* LiturgicalChants */4;
        break;
    
  }
  var match$1 = prerequisite.id;
  return putIncreasableDependency(mode, tmp, {
              source: sourceId,
              target: {
                TAG: /* One */0,
                _0: match$1[1]
              },
              value: prerequisite.value
            }, hero);
}

function applyIncreasableMultiEntryPrerequisite(mode, sourceId, prerequisite, hero) {
  var match = prerequisite.id;
  var tmp;
  switch (match.TAG | 0) {
    case /* Attributes */0 :
        tmp = /* Attributes */0;
        break;
    case /* Skills */1 :
        tmp = /* Skills */1;
        break;
    case /* CombatTechniques */2 :
        tmp = /* CombatTechniques */2;
        break;
    case /* Spells */3 :
        tmp = /* Spells */3;
        break;
    case /* LiturgicalChants */4 :
        tmp = /* LiturgicalChants */4;
        break;
    
  }
  var match$1 = prerequisite.id;
  return putIncreasableDependency(mode, tmp, {
              source: sourceId,
              target: {
                TAG: /* Many */1,
                _0: match$1._0
              },
              value: prerequisite.value
            }, hero);
}

function applyPrimaryAttributePrerequisite(mode, sourceId, staticData, prerequisite, hero) {
  var match = prerequisite.scope;
  return Ley_Option$OptolithClient.option(hero, (function (attrId) {
                var dependency_target = {
                  TAG: /* One */0,
                  _0: attrId
                };
                var dependency_value = prerequisite.value;
                var dependency = {
                  source: sourceId,
                  target: dependency_target,
                  value: dependency_value
                };
                if (mode) {
                  return removeAttributeDependency$1(dependency, hero);
                } else {
                  return addAttributeDependency$1(dependency, hero);
                }
              }), match ? Tradition$OptolithClient.Blessed.getPrimaryAttributeId(staticData, hero.specialAbilities) : Tradition$OptolithClient.Magical.getPrimaryAttributeId(staticData, hero.specialAbilities));
}

function modifyDependencies(mode, staticData, prerequisites, sourceId, hero) {
  return Curry._3(Ley_List$OptolithClient.foldr, (function (prerequisite) {
                var match = prerequisite.value;
                if (typeof match === "number") {
                  return Ley_Function$OptolithClient.id;
                }
                switch (match.TAG | 0) {
                  case /* PrimaryAttribute */5 :
                      var options = match._0;
                      switch (sourceId[0]) {
                        case /* Advantage */0 :
                            var partial_arg_1 = sourceId[1];
                            var partial_arg = [
                              /* Advantage */0,
                              partial_arg_1
                            ];
                            return function (param) {
                              return applyPrimaryAttributePrerequisite(mode, partial_arg, staticData, options, param);
                            };
                        case /* Disadvantage */1 :
                            var partial_arg_1$1 = sourceId[1];
                            var partial_arg$1 = [
                              /* Disadvantage */1,
                              partial_arg_1$1
                            ];
                            return function (param) {
                              return applyPrimaryAttributePrerequisite(mode, partial_arg$1, staticData, options, param);
                            };
                        case /* SpecialAbility */2 :
                            var partial_arg_1$2 = sourceId[1];
                            var partial_arg$2 = [
                              /* SpecialAbility */2,
                              partial_arg_1$2
                            ];
                            return function (param) {
                              return applyPrimaryAttributePrerequisite(mode, partial_arg$2, staticData, options, param);
                            };
                        case /* Attribute */3 :
                        case /* Skill */4 :
                        case /* CombatTechnique */5 :
                            return Ley_Function$OptolithClient.id;
                        case /* Spell */6 :
                            var partial_arg_1$3 = sourceId[1];
                            var partial_arg$3 = [
                              /* Spell */3,
                              partial_arg_1$3
                            ];
                            return function (param) {
                              return applyPrimaryAttributePrerequisite(mode, partial_arg$3, staticData, options, param);
                            };
                        case /* LiturgicalChant */7 :
                            var partial_arg_1$4 = sourceId[1];
                            var partial_arg$4 = [
                              /* LiturgicalChant */4,
                              partial_arg_1$4
                            ];
                            return function (param) {
                              return applyPrimaryAttributePrerequisite(mode, partial_arg$4, staticData, options, param);
                            };
                        
                      }
                  case /* Activatable */6 :
                      var options$1 = match._0;
                      switch (sourceId[0]) {
                        case /* Advantage */0 :
                            var partial_arg_1$5 = sourceId[1];
                            var partial_arg$5 = [
                              /* Advantage */0,
                              partial_arg_1$5
                            ];
                            return function (param) {
                              return applyActivatablePrerequisite(mode, partial_arg$5, options$1, param);
                            };
                        case /* Disadvantage */1 :
                            var partial_arg_1$6 = sourceId[1];
                            var partial_arg$6 = [
                              /* Disadvantage */1,
                              partial_arg_1$6
                            ];
                            return function (param) {
                              return applyActivatablePrerequisite(mode, partial_arg$6, options$1, param);
                            };
                        case /* SpecialAbility */2 :
                            var partial_arg_1$7 = sourceId[1];
                            var partial_arg$7 = [
                              /* SpecialAbility */2,
                              partial_arg_1$7
                            ];
                            return function (param) {
                              return applyActivatablePrerequisite(mode, partial_arg$7, options$1, param);
                            };
                        case /* Attribute */3 :
                        case /* Skill */4 :
                        case /* CombatTechnique */5 :
                        case /* Spell */6 :
                        case /* LiturgicalChant */7 :
                            return Ley_Function$OptolithClient.id;
                        
                      }
                  case /* ActivatableMultiEntry */7 :
                      var options$2 = match._0;
                      switch (sourceId[0]) {
                        case /* Advantage */0 :
                            var partial_arg_1$8 = sourceId[1];
                            var partial_arg$8 = [
                              /* Advantage */0,
                              partial_arg_1$8
                            ];
                            return function (param) {
                              return applyActivatableMultiEntryPrerequisite(mode, partial_arg$8, options$2, param);
                            };
                        case /* Disadvantage */1 :
                            var partial_arg_1$9 = sourceId[1];
                            var partial_arg$9 = [
                              /* Disadvantage */1,
                              partial_arg_1$9
                            ];
                            return function (param) {
                              return applyActivatableMultiEntryPrerequisite(mode, partial_arg$9, options$2, param);
                            };
                        case /* SpecialAbility */2 :
                            var partial_arg_1$10 = sourceId[1];
                            var partial_arg$10 = [
                              /* SpecialAbility */2,
                              partial_arg_1$10
                            ];
                            return function (param) {
                              return applyActivatableMultiEntryPrerequisite(mode, partial_arg$10, options$2, param);
                            };
                        case /* Attribute */3 :
                        case /* Skill */4 :
                        case /* CombatTechnique */5 :
                        case /* Spell */6 :
                        case /* LiturgicalChant */7 :
                            return Ley_Function$OptolithClient.id;
                        
                      }
                  case /* ActivatableMultiSelect */8 :
                      var options$3 = match._0;
                      switch (sourceId[0]) {
                        case /* Advantage */0 :
                            var partial_arg_1$11 = sourceId[1];
                            var partial_arg$11 = [
                              /* Advantage */0,
                              partial_arg_1$11
                            ];
                            return function (param) {
                              return applyActivatableMultiSelectPrerequisite(mode, partial_arg$11, options$3, param);
                            };
                        case /* Disadvantage */1 :
                            var partial_arg_1$12 = sourceId[1];
                            var partial_arg$12 = [
                              /* Disadvantage */1,
                              partial_arg_1$12
                            ];
                            return function (param) {
                              return applyActivatableMultiSelectPrerequisite(mode, partial_arg$12, options$3, param);
                            };
                        case /* SpecialAbility */2 :
                            var partial_arg_1$13 = sourceId[1];
                            var partial_arg$13 = [
                              /* SpecialAbility */2,
                              partial_arg_1$13
                            ];
                            return function (param) {
                              return applyActivatableMultiSelectPrerequisite(mode, partial_arg$13, options$3, param);
                            };
                        case /* Attribute */3 :
                        case /* Skill */4 :
                        case /* CombatTechnique */5 :
                        case /* Spell */6 :
                        case /* LiturgicalChant */7 :
                            return Ley_Function$OptolithClient.id;
                        
                      }
                  case /* Increasable */9 :
                      var options$4 = match._0;
                      switch (sourceId[0]) {
                        case /* Advantage */0 :
                            var partial_arg_1$14 = sourceId[1];
                            var partial_arg$14 = [
                              /* Advantage */0,
                              partial_arg_1$14
                            ];
                            return function (param) {
                              return applyIncreasablePrerequisite(mode, partial_arg$14, options$4, param);
                            };
                        case /* Disadvantage */1 :
                            var partial_arg_1$15 = sourceId[1];
                            var partial_arg$15 = [
                              /* Disadvantage */1,
                              partial_arg_1$15
                            ];
                            return function (param) {
                              return applyIncreasablePrerequisite(mode, partial_arg$15, options$4, param);
                            };
                        case /* SpecialAbility */2 :
                            var partial_arg_1$16 = sourceId[1];
                            var partial_arg$16 = [
                              /* SpecialAbility */2,
                              partial_arg_1$16
                            ];
                            return function (param) {
                              return applyIncreasablePrerequisite(mode, partial_arg$16, options$4, param);
                            };
                        case /* Attribute */3 :
                        case /* Skill */4 :
                        case /* CombatTechnique */5 :
                            return Ley_Function$OptolithClient.id;
                        case /* Spell */6 :
                            var partial_arg_1$17 = sourceId[1];
                            var partial_arg$17 = [
                              /* Spell */3,
                              partial_arg_1$17
                            ];
                            return function (param) {
                              return applyIncreasablePrerequisite(mode, partial_arg$17, options$4, param);
                            };
                        case /* LiturgicalChant */7 :
                            var partial_arg_1$18 = sourceId[1];
                            var partial_arg$18 = [
                              /* LiturgicalChant */4,
                              partial_arg_1$18
                            ];
                            return function (param) {
                              return applyIncreasablePrerequisite(mode, partial_arg$18, options$4, param);
                            };
                        
                      }
                  case /* IncreasableMultiEntry */10 :
                      var options$5 = match._0;
                      switch (sourceId[0]) {
                        case /* Advantage */0 :
                            var partial_arg_1$19 = sourceId[1];
                            var partial_arg$19 = [
                              /* Advantage */0,
                              partial_arg_1$19
                            ];
                            return function (param) {
                              return applyIncreasableMultiEntryPrerequisite(mode, partial_arg$19, options$5, param);
                            };
                        case /* Disadvantage */1 :
                            var partial_arg_1$20 = sourceId[1];
                            var partial_arg$20 = [
                              /* Disadvantage */1,
                              partial_arg_1$20
                            ];
                            return function (param) {
                              return applyIncreasableMultiEntryPrerequisite(mode, partial_arg$20, options$5, param);
                            };
                        case /* SpecialAbility */2 :
                            var partial_arg_1$21 = sourceId[1];
                            var partial_arg$21 = [
                              /* SpecialAbility */2,
                              partial_arg_1$21
                            ];
                            return function (param) {
                              return applyIncreasableMultiEntryPrerequisite(mode, partial_arg$21, options$5, param);
                            };
                        case /* Attribute */3 :
                        case /* Skill */4 :
                        case /* CombatTechnique */5 :
                            return Ley_Function$OptolithClient.id;
                        case /* Spell */6 :
                            var partial_arg_1$22 = sourceId[1];
                            var partial_arg$22 = [
                              /* Spell */3,
                              partial_arg_1$22
                            ];
                            return function (param) {
                              return applyIncreasableMultiEntryPrerequisite(mode, partial_arg$22, options$5, param);
                            };
                        case /* LiturgicalChant */7 :
                            var partial_arg_1$23 = sourceId[1];
                            var partial_arg$23 = [
                              /* LiturgicalChant */4,
                              partial_arg_1$23
                            ];
                            return function (param) {
                              return applyIncreasableMultiEntryPrerequisite(mode, partial_arg$23, options$5, param);
                            };
                        
                      }
                  default:
                    return Ley_Function$OptolithClient.id;
                }
              }), hero, prerequisites);
}

function addDependencies(param, param$1, param$2, param$3) {
  return modifyDependencies(/* Add */0, param, param$1, param$2, param$3);
}

function removeDependencies(param, param$1, param$2, param$3) {
  return modifyDependencies(/* Remove */1, param, param$1, param$2, param$3);
}

function getMaxLevel(staticData, hero, sourceId, dependencies, prerequisites) {
  return Ley_Function$OptolithClient.flip(Curry._1(Ley_List$OptolithClient.foldl, (function (prevMax, param) {
                    var level = param.level;
                    if (param.active) {
                      return prevMax;
                    } else if (prevMax !== undefined) {
                      if (level !== undefined) {
                        return Ley_Int$OptolithClient.min(prevMax, level - 1 | 0);
                      } else {
                        return prevMax;
                      }
                    } else if (level !== undefined) {
                      return level - 1 | 0;
                    } else {
                      return ;
                    }
                  })), dependencies, Prerequisites$OptolithClient.Validation.getMaxLevel(staticData, hero, sourceId, prerequisites));
}

var TransferredUnfamiliar = {
  isUnfamiliarSpell: isUnfamiliarSpell,
  addTransferUnfamiliarDependencies: addTransferUnfamiliarDependencies,
  isEntryAllowingTransferUnfamiliarRemovable: isEntryAllowingTransferUnfamiliarRemovable
};

var Activatable = {
  areOptionDependenciesMatched: areOptionDependenciesMatched,
  isDependencyMatched: isDependencyMatched
};

export {
  Flatten ,
  TransferredUnfamiliar ,
  addDependencies ,
  removeDependencies ,
  getMaxLevel ,
  Activatable ,
  
}
/* Skill-OptolithClient Not a pure module */
