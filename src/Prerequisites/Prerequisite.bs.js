// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Chars$OptolithClient from "../Utilities/Chars.bs.js";
import * as Ley_Ix$OptolithClient from "../Data/Ley_Ix.bs.js";
import * as Ley_Int$OptolithClient from "../Data/Ley_Int.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as JsonStrict$OptolithClient from "../Misc/JsonStrict.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as TranslationMap$OptolithClient from "../Misc/TranslationMap.bs.js";

function partial_arg_0(param) {
  return Json_decode.map((function (id) {
                return {
                        TAG: /* One */0,
                        _0: id
                      };
              }), Json_decode.$$int, param);
}

var partial_arg_1 = {
  hd: (function (param) {
      return Json_decode.map((function (id) {
                    return {
                            TAG: /* Many */1,
                            _0: id
                          };
                  }), (function (param) {
                    return Json_decode.list(Json_decode.$$int, param);
                  }), param);
    }),
  tl: /* [] */0
};

var partial_arg = {
  hd: partial_arg_0,
  tl: partial_arg_1
};

function oneOrManyInt(param) {
  return Json_decode.oneOf(partial_arg, param);
}

function t(json) {
  var str = Json_decode.string(json);
  switch (str) {
    case "f" :
        return /* Female */1;
    case "m" :
        return /* Male */0;
    default:
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "Unknown sex prerequisite: " + str,
            Error: new Error()
          };
  }
}

var Decode = {
  t: t
};

var Sex = {
  Decode: Decode
};

function partial_arg_0$1(json) {
  return {
          id: oneOrManyInt(json),
          active: true
        };
}

var partial_arg_1$1 = {
  hd: (function (json) {
      return {
              id: Json_decode.field("races", oneOrManyInt, json),
              active: Json_decode.field("active", Json_decode.bool, json)
            };
    }),
  tl: /* [] */0
};

var partial_arg$1 = {
  hd: partial_arg_0$1,
  tl: partial_arg_1$1
};

function t$1(param) {
  return Json_decode.oneOf(partial_arg$1, param);
}

var Decode$1 = {
  t: t$1
};

var Race = {
  Decode: Decode$1
};

var Decode$2 = {
  t: oneOrManyInt
};

var Culture = {
  Decode: Decode$2
};

function t$2(json) {
  var str = Json_decode.field("type", Json_decode.string, json);
  var tmp;
  switch (str) {
    case "blessed" :
        tmp = /* Blessed */1;
        break;
    case "magical" :
        tmp = /* Magical */0;
        break;
    default:
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "Unknown primary attribute type: " + str,
            Error: new Error()
          };
  }
  return {
          value: Json_decode.field("value", Json_decode.$$int, json),
          scope: tmp
        };
}

var Decode$3 = {
  t: t$2
};

var PrimaryAttribute = {
  Decode: Decode$3
};

function t$3(json) {
  return {
          category: JsonStrict$OptolithClient.field("category", JsonStrict$OptolithClient.$$int, json),
          domain: JsonStrict$OptolithClient.optionalField("domain", oneOrManyInt, json),
          level: JsonStrict$OptolithClient.optionalField("level", JsonStrict$OptolithClient.$$int, json)
        };
}

var Decode$4 = {
  t: t$3
};

var Pact = {
  Decode: Decode$4
};

var Decode$5 = {
  t: Json_decode.$$int
};

var SocialStatus = {
  Decode: Decode$5
};

function t$4(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", Id$OptolithClient.Activatable.Decode.t, json),
          active: JsonStrict$OptolithClient.field("active", JsonStrict$OptolithClient.bool, json),
          options: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("options", (function (param) {
                      return JsonStrict$OptolithClient.list(Id$OptolithClient.Activatable.SelectOption.Decode.t, param);
                    }), json)),
          level: JsonStrict$OptolithClient.optionalField("level", JsonStrict$OptolithClient.$$int, json)
        };
}

var Decode$6 = {
  t: t$4
};

var Activatable = {
  Decode: Decode$6
};

function activatableIdList(f, json) {
  return Curry._1(f, Json_decode.field("value", (function (param) {
                    return Json_decode.list(Json_decode.$$int, param);
                  }), json));
}

function activatableIds(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Advantage" :
                      return function (param) {
                        return activatableIdList((function (xs) {
                                      return {
                                              TAG: /* Advantages */0,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "Disadvantage" :
                      return function (param) {
                        return activatableIdList((function (xs) {
                                      return {
                                              TAG: /* Disadvantages */1,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "SpecialAbility" :
                      return function (param) {
                        return activatableIdList((function (xs) {
                                      return {
                                              TAG: /* SpecialAbilities */2,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown activatable ID scope: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("scope", Json_decode.string, param);
              }), param);
}

function t$5(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", activatableIds, json),
          active: JsonStrict$OptolithClient.field("active", JsonStrict$OptolithClient.bool, json),
          options: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("options", (function (param) {
                      return JsonStrict$OptolithClient.list(Id$OptolithClient.Activatable.SelectOption.Decode.t, param);
                    }), json)),
          level: JsonStrict$OptolithClient.optionalField("level", JsonStrict$OptolithClient.$$int, json)
        };
}

function t$6(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", Id$OptolithClient.Activatable.Decode.t, json),
          active: JsonStrict$OptolithClient.field("active", JsonStrict$OptolithClient.bool, json),
          firstOption: JsonStrict$OptolithClient.field("firstOption", (function (param) {
                  return JsonStrict$OptolithClient.list(Id$OptolithClient.Activatable.SelectOption.Decode.t, param);
                }), json),
          otherOptions: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("otherOptions", (function (param) {
                      return JsonStrict$OptolithClient.list(Id$OptolithClient.Activatable.SelectOption.Decode.t, param);
                    }), json)),
          level: JsonStrict$OptolithClient.optionalField("level", JsonStrict$OptolithClient.$$int, json)
        };
}

var Decode$7 = {
  t: t$6
};

var ActivatableMultiSelect = {
  Decode: Decode$7
};

function t$7(json) {
  return {
          id: Json_decode.field("id", Id$OptolithClient.Increasable.Decode.t, json),
          value: Json_decode.field("value", Json_decode.$$int, json)
        };
}

var Decode$8 = {
  t: t$7
};

var Increasable = {
  Decode: Decode$8
};

function increasableIdList(f, json) {
  return Curry._1(f, Json_decode.field("value", (function (param) {
                    return Json_decode.list(Json_decode.$$int, param);
                  }), json));
}

function increasableIds(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Attribute" :
                      return function (param) {
                        return increasableIdList((function (xs) {
                                      return {
                                              TAG: /* Attributes */0,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "CombatTechnique" :
                      return function (param) {
                        return increasableIdList((function (xs) {
                                      return {
                                              TAG: /* CombatTechniques */2,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "LiturgicalChant" :
                      return function (param) {
                        return increasableIdList((function (xs) {
                                      return {
                                              TAG: /* LiturgicalChants */4,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "Skill" :
                      return function (param) {
                        return increasableIdList((function (xs) {
                                      return {
                                              TAG: /* Skills */1,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "Spell" :
                      return function (param) {
                        return increasableIdList((function (xs) {
                                      return {
                                              TAG: /* Spells */3,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown increasable ID scope: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("scope", Json_decode.string, param);
              }), param);
}

function t$8(json) {
  return {
          id: Json_decode.field("id", increasableIds, json),
          value: Json_decode.field("value", Json_decode.$$int, json)
        };
}

var Translation = {
  t: Json_decode.string
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function multilingual(json) {
  return Ley_Option$OptolithClient.fromOption(/* MultilingualGenerate */0, JsonStrict$OptolithClient.optionalField("displayOption", (function (param) {
                    return JsonStrict$OptolithClient.andThen((function (str) {
                                  switch (str) {
                                    case "Hide" :
                                        return function (param) {
                                          return /* MultilingualHide */1;
                                        };
                                    case "ReplaceWith" :
                                        return function (json) {
                                          return /* MultilingualReplaceWith */{
                                                  _0: JsonStrict$OptolithClient.field("value", TranslationMap.Decode.t, json)
                                                };
                                        };
                                    default:
                                      throw {
                                            RE_EXN_ID: JsonStrict$OptolithClient.DecodeError,
                                            _1: "Unknown display option type: " + str,
                                            Error: new Error()
                                          };
                                  }
                                }), (function (param) {
                                  return JsonStrict$OptolithClient.field("type", JsonStrict$OptolithClient.string, param);
                                }), param);
                  }), json));
}

function resolveTranslations(langs, x) {
  if (typeof x === "number") {
    if (x !== 0) {
      return /* Hide */1;
    } else {
      return /* Generate */0;
    }
  } else {
    return /* ReplaceWith */{
            _0: Ley_Option$OptolithClient.fromOption(Chars$OptolithClient.mdash, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, x._0))
          };
  }
}

function multilingual$1(decoder, wrap, json) {
  return {
          value: Curry._1(wrap, Json_decode.field("value", decoder, json)),
          displayOption: multilingual(json)
        };
}

function resolveTranslations$1(langs, param) {
  return {
          value: param.value,
          displayOption: resolveTranslations(langs, param.displayOption)
        };
}

var Unified = {};

function unify(x) {
  var x$1 = x.value;
  var tmp;
  switch (x$1.TAG | 0) {
    case /* Sex */0 :
        tmp = {
          TAG: /* Sex */0,
          _0: x$1._0
        };
        break;
    case /* Race */1 :
        tmp = {
          TAG: /* Race */1,
          _0: x$1._0
        };
        break;
    case /* Culture */2 :
        tmp = {
          TAG: /* Culture */2,
          _0: x$1._0
        };
        break;
    case /* Pact */3 :
        tmp = {
          TAG: /* Pact */3,
          _0: x$1._0
        };
        break;
    case /* SocialStatus */4 :
        tmp = {
          TAG: /* SocialStatus */4,
          _0: x$1._0
        };
        break;
    case /* PrimaryAttribute */5 :
        tmp = {
          TAG: /* PrimaryAttribute */5,
          _0: x$1._0
        };
        break;
    case /* Activatable */6 :
        tmp = {
          TAG: /* Activatable */6,
          _0: x$1._0
        };
        break;
    case /* ActivatableMultiEntry */7 :
        tmp = {
          TAG: /* ActivatableMultiEntry */7,
          _0: x$1._0
        };
        break;
    case /* ActivatableMultiSelect */8 :
        tmp = {
          TAG: /* ActivatableMultiSelect */8,
          _0: x$1._0
        };
        break;
    case /* Increasable */9 :
        tmp = {
          TAG: /* Increasable */9,
          _0: x$1._0
        };
        break;
    case /* IncreasableMultiEntry */10 :
        tmp = {
          TAG: /* IncreasableMultiEntry */10,
          _0: x$1._0
        };
        break;
    
  }
  return {
          value: tmp,
          displayOption: x.displayOption
        };
}

function multilingual$2(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Activatable" :
                      return function (param) {
                        return multilingual$1(t$4, (function (v) {
                                      return {
                                              TAG: /* Activatable */6,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "ActivatableMultiEntry" :
                      return function (param) {
                        return multilingual$1(t$5, (function (v) {
                                      return {
                                              TAG: /* ActivatableMultiEntry */7,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "ActivatableMultiSelect" :
                      return function (param) {
                        return multilingual$1(t$6, (function (v) {
                                      return {
                                              TAG: /* ActivatableMultiSelect */8,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Culture" :
                      return function (param) {
                        return multilingual$1(oneOrManyInt, (function (v) {
                                      return {
                                              TAG: /* Culture */2,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Increasable" :
                      return function (param) {
                        return multilingual$1(t$7, (function (v) {
                                      return {
                                              TAG: /* Increasable */9,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "IncreasableMultiEntry" :
                      return function (param) {
                        return multilingual$1(t$8, (function (v) {
                                      return {
                                              TAG: /* IncreasableMultiEntry */10,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Pact" :
                      return function (param) {
                        return multilingual$1(t$3, (function (v) {
                                      return {
                                              TAG: /* Pact */3,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "PrimaryAttribute" :
                      return function (param) {
                        return multilingual$1(t$2, (function (v) {
                                      return {
                                              TAG: /* PrimaryAttribute */5,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Race" :
                      return function (param) {
                        return multilingual$1(t$1, (function (v) {
                                      return {
                                              TAG: /* Race */1,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Sex" :
                      return function (param) {
                        return multilingual$1(t, (function (v) {
                                      return {
                                              TAG: /* Sex */0,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "SocialStatus" :
                      return function (param) {
                        return multilingual$1(Json_decode.$$int, (function (v) {
                                      return {
                                              TAG: /* SocialStatus */4,
                                              _0: v
                                            };
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown prerequisite type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

var Decode$9 = {
  multilingual: multilingual$2,
  resolveTranslations: resolveTranslations$1
};

var General = {
  unify: unify,
  Decode: Decode$9
};

function unify$1(x) {
  var x$1 = x.value;
  var tmp;
  switch (x$1.TAG | 0) {
    case /* Sex */0 :
        tmp = {
          TAG: /* Sex */0,
          _0: x$1._0
        };
        break;
    case /* Race */1 :
        tmp = {
          TAG: /* Race */1,
          _0: x$1._0
        };
        break;
    case /* Culture */2 :
        tmp = {
          TAG: /* Culture */2,
          _0: x$1._0
        };
        break;
    case /* Activatable */3 :
        tmp = {
          TAG: /* Activatable */6,
          _0: x$1._0
        };
        break;
    case /* Increasable */4 :
        tmp = {
          TAG: /* Increasable */9,
          _0: x$1._0
        };
        break;
    
  }
  return {
          value: tmp,
          displayOption: x.displayOption
        };
}

function multilingual$3(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Activatable" :
                      return function (param) {
                        return multilingual$1(t$4, (function (v) {
                                      return {
                                              TAG: /* Activatable */3,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Culture" :
                      return function (param) {
                        return multilingual$1(oneOrManyInt, (function (v) {
                                      return {
                                              TAG: /* Culture */2,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Increasable" :
                      return function (param) {
                        return multilingual$1(t$7, (function (v) {
                                      return {
                                              TAG: /* Increasable */4,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Race" :
                      return function (param) {
                        return multilingual$1(t$1, (function (v) {
                                      return {
                                              TAG: /* Race */1,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Sex" :
                      return function (param) {
                        return multilingual$1(t, (function (v) {
                                      return {
                                              TAG: /* Sex */0,
                                              _0: v
                                            };
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown prerequisite type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

var Decode$10 = {
  multilingual: multilingual$3,
  resolveTranslations: resolveTranslations$1
};

var Profession = {
  unify: unify$1,
  Decode: Decode$10
};

function unify$2(x) {
  var x$1 = x.value;
  var tmp;
  if (typeof x$1 === "number") {
    tmp = /* CommonSuggestedByRCP */0;
  } else {
    switch (x$1.TAG | 0) {
      case /* Sex */0 :
          tmp = {
            TAG: /* Sex */0,
            _0: x$1._0
          };
          break;
      case /* Race */1 :
          tmp = {
            TAG: /* Race */1,
            _0: x$1._0
          };
          break;
      case /* Culture */2 :
          tmp = {
            TAG: /* Culture */2,
            _0: x$1._0
          };
          break;
      case /* Pact */3 :
          tmp = {
            TAG: /* Pact */3,
            _0: x$1._0
          };
          break;
      case /* SocialStatus */4 :
          tmp = {
            TAG: /* SocialStatus */4,
            _0: x$1._0
          };
          break;
      case /* PrimaryAttribute */5 :
          tmp = {
            TAG: /* PrimaryAttribute */5,
            _0: x$1._0
          };
          break;
      case /* Activatable */6 :
          tmp = {
            TAG: /* Activatable */6,
            _0: x$1._0
          };
          break;
      case /* ActivatableMultiEntry */7 :
          tmp = {
            TAG: /* ActivatableMultiEntry */7,
            _0: x$1._0
          };
          break;
      case /* ActivatableMultiSelect */8 :
          tmp = {
            TAG: /* ActivatableMultiSelect */8,
            _0: x$1._0
          };
          break;
      case /* Increasable */9 :
          tmp = {
            TAG: /* Increasable */9,
            _0: x$1._0
          };
          break;
      case /* IncreasableMultiEntry */10 :
          tmp = {
            TAG: /* IncreasableMultiEntry */10,
            _0: x$1._0
          };
          break;
      
    }
  }
  return {
          value: tmp,
          displayOption: x.displayOption
        };
}

function multilingual$4(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Activatable" :
                      return function (param) {
                        return multilingual$1(t$4, (function (v) {
                                      return {
                                              TAG: /* Activatable */6,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "ActivatableMultiEntry" :
                      return function (param) {
                        return multilingual$1(t$5, (function (v) {
                                      return {
                                              TAG: /* ActivatableMultiEntry */7,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "ActivatableMultiSelect" :
                      return function (param) {
                        return multilingual$1(t$6, (function (v) {
                                      return {
                                              TAG: /* ActivatableMultiSelect */8,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "CommonSuggestedByRCP" :
                      return function (param) {
                        return {
                                value: /* CommonSuggestedByRCP */0,
                                displayOption: /* MultilingualGenerate */0
                              };
                      };
                  case "Culture" :
                      return function (param) {
                        return multilingual$1(oneOrManyInt, (function (v) {
                                      return {
                                              TAG: /* Culture */2,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Increasable" :
                      return function (param) {
                        return multilingual$1(t$7, (function (v) {
                                      return {
                                              TAG: /* Increasable */9,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "IncreasableMultiEntry" :
                      return function (param) {
                        return multilingual$1(t$8, (function (v) {
                                      return {
                                              TAG: /* IncreasableMultiEntry */10,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Pact" :
                      return function (param) {
                        return multilingual$1(t$3, (function (v) {
                                      return {
                                              TAG: /* Pact */3,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "PrimaryAttribute" :
                      return function (param) {
                        return multilingual$1(t$2, (function (v) {
                                      return {
                                              TAG: /* PrimaryAttribute */5,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Race" :
                      return function (param) {
                        return multilingual$1(t$1, (function (v) {
                                      return {
                                              TAG: /* Race */1,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Sex" :
                      return function (param) {
                        return multilingual$1(t, (function (v) {
                                      return {
                                              TAG: /* Sex */0,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "SocialStatus" :
                      return function (param) {
                        return multilingual$1(Json_decode.$$int, (function (v) {
                                      return {
                                              TAG: /* SocialStatus */4,
                                              _0: v
                                            };
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown prerequisite type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

var Decode$11 = {
  multilingual: multilingual$4,
  resolveTranslations: resolveTranslations$1
};

var AdvantageDisadvantage = {
  unify: unify$2,
  Decode: Decode$11
};

function unify$3(x) {
  var x$1 = x.value;
  var tmp;
  tmp = x$1.TAG ? ({
        TAG: /* Culture */2,
        _0: x$1._0
      }) : ({
        TAG: /* Sex */0,
        _0: x$1._0
      });
  return {
          value: tmp,
          displayOption: x.displayOption
        };
}

function multilingual$5(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Culture" :
                      return function (param) {
                        return multilingual$1(oneOrManyInt, (function (v) {
                                      return {
                                              TAG: /* Culture */1,
                                              _0: v
                                            };
                                    }), param);
                      };
                  case "Sex" :
                      return function (param) {
                        return multilingual$1(t, (function (v) {
                                      return {
                                              TAG: /* Sex */0,
                                              _0: v
                                            };
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown prerequisite type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

var Decode$12 = {
  multilingual: multilingual$5,
  resolveTranslations: resolveTranslations$1
};

var ArcaneTradition = {
  unify: unify$3,
  Decode: Decode$12
};

function unify$4(x) {
  return {
          value: {
            TAG: /* Activatable */6,
            _0: x.value
          },
          displayOption: x.displayOption
        };
}

function multilingual$6(param) {
  return multilingual$1(t$4, (function (v) {
                return v;
              }), param);
}

var Decode$13 = {
  multilingual: multilingual$6,
  resolveTranslations: resolveTranslations$1
};

var ActivatableOnly = {
  unify: unify$4,
  Decode: Decode$13
};

function unify$5(x) {
  return {
          value: {
            TAG: /* Increasable */9,
            _0: x.value
          },
          displayOption: x.displayOption
        };
}

function multilingual$7(param) {
  return multilingual$1(t$7, (function (v) {
                return v;
              }), param);
}

var Decode$14 = {
  multilingual: multilingual$7,
  resolveTranslations: resolveTranslations$1
};

var IncreasableOnly = {
  unify: unify$5,
  Decode: Decode$14
};

function multilingual$8(decoder) {
  return function (param) {
    return Json_decode.andThen((function (str) {
                  if (str === "Plain") {
                    return function (json) {
                      return Json_decode.field("value", (function (param) {
                                    return Json_decode.list(decoder, param);
                                  }), json);
                    };
                  }
                  throw {
                        RE_EXN_ID: Json_decode.DecodeError,
                        _1: "Prerequisite list type has to be set to \"Plain\". Actual: " + str,
                        Error: new Error()
                      };
                }), (function (param) {
                  return Json_decode.field("type", Json_decode.string, param);
                }), param);
  };
}

function resolveTranslations$2(langs, f, xs) {
  return Curry._2(Ley_List$OptolithClient.map, Curry._1(f, langs), xs);
}

function getFirstLevel(prerequisites) {
  if (prerequisites.TAG) {
    return Ley_Option$OptolithClient.fromOption(/* [] */0, Curry._2(Ley_IntMap$OptolithClient.lookup, 1, prerequisites._0));
  } else {
    return prerequisites._0;
  }
}

function makeRangePredicate(oldLevel, newLevel) {
  var level;
  if (oldLevel !== undefined) {
    if (newLevel !== undefined) {
      var match = Ley_Int$OptolithClient.minmax(oldLevel, newLevel);
      var partial_arg_0 = match[0] + 1 | 0;
      var partial_arg_1 = match[1];
      var partial_arg = [
        partial_arg_0,
        partial_arg_1
      ];
      return function (param) {
        return Ley_Ix$OptolithClient.inRange(partial_arg, param);
      };
    }
    level = oldLevel;
  } else {
    if (newLevel === undefined) {
      return function (param) {
        return Ley_Function$OptolithClient.$$const(true, param);
      };
    }
    level = newLevel;
  }
  return function (param) {
    return level >= param;
  };
}

function concatRange(oldLevel, newLevel, prerequisites) {
  var pred = makeRangePredicate(oldLevel, newLevel);
  if (prerequisites.TAG) {
    return Curry._1(Ley_IntMap$OptolithClient.concat, Curry._2(Ley_IntMap$OptolithClient.filterWithKey, (function (k, param) {
                      return Curry._1(pred, k);
                    }), prerequisites._0));
  } else if (Curry._1(pred, 1)) {
    return prerequisites._0;
  } else {
    return /* [] */0;
  }
}

function multilingual$9(decoder) {
  return function (param) {
    return Json_decode.andThen((function (str) {
                  switch (str) {
                    case "ByLevel" :
                        return function (json) {
                          var xs = Json_decode.field("value", (function (param) {
                                  return Json_decode.list((function (json) {
                                                return [
                                                        Json_decode.field("level", Json_decode.$$int, json),
                                                        Json_decode.field("prerequisites", (function (param) {
                                                                return Json_decode.list(decoder, param);
                                                              }), json)
                                                      ];
                                              }), param);
                                }), json);
                          return {
                                  TAG: /* ByLevel */1,
                                  _0: Curry._1(Ley_IntMap$OptolithClient.fromList, xs)
                                };
                        };
                    case "Plain" :
                        return function (json) {
                          return {
                                  TAG: /* Plain */0,
                                  _0: Json_decode.field("value", (function (param) {
                                          return Json_decode.list(decoder, param);
                                        }), json)
                                };
                        };
                    default:
                      throw {
                            RE_EXN_ID: Json_decode.DecodeError,
                            _1: "Unknown prerequisite list type: " + str,
                            Error: new Error()
                          };
                  }
                }), (function (param) {
                  return Json_decode.field("type", Json_decode.string, param);
                }), param);
  };
}

function resolveTranslations$3(langs, f, x) {
  if (x.TAG) {
    return {
            TAG: /* ByLevel */1,
            _0: Curry._2(Ley_IntMap$OptolithClient.map, Curry._1(Ley_List$OptolithClient.map, Curry._1(f, langs)), x._0)
          };
  } else {
    return {
            TAG: /* Plain */0,
            _0: Curry._2(Ley_List$OptolithClient.map, Curry._1(f, langs), x._0)
          };
  }
}

var multilingual$10 = multilingual$9(multilingual$2);

function resolveTranslations$4(langs, x) {
  return resolveTranslations$3(langs, resolveTranslations$1, x);
}

var Decode$15 = {
  multilingual: multilingual$10,
  resolveTranslations: resolveTranslations$4
};

var General$1 = {
  Decode: Decode$15
};

var multilingual$11 = multilingual$8(multilingual$3);

function resolveTranslations$5(langs, x) {
  return resolveTranslations$2(langs, resolveTranslations$1, x);
}

var Decode$16 = {
  multilingual: multilingual$11,
  resolveTranslations: resolveTranslations$5
};

var Profession$1 = {
  Decode: Decode$16
};

var multilingual$12 = multilingual$9(multilingual$4);

function resolveTranslations$6(langs, x) {
  return resolveTranslations$3(langs, resolveTranslations$1, x);
}

var Decode$17 = {
  multilingual: multilingual$12,
  resolveTranslations: resolveTranslations$6
};

var AdvantageDisadvantage$1 = {
  Decode: Decode$17
};

var multilingual$13 = multilingual$8(multilingual$5);

function resolveTranslations$7(langs, x) {
  return resolveTranslations$2(langs, resolveTranslations$1, x);
}

var Decode$18 = {
  multilingual: multilingual$13,
  resolveTranslations: resolveTranslations$7
};

var ArcaneTradition$1 = {
  Decode: Decode$18
};

var multilingual$14 = multilingual$8(multilingual$6);

function resolveTranslations$8(langs, x) {
  return resolveTranslations$2(langs, resolveTranslations$1, x);
}

var Decode$19 = {
  multilingual: multilingual$14,
  resolveTranslations: resolveTranslations$8
};

var Activatable$1 = {
  Decode: Decode$19
};

var multilingual$15 = multilingual$8(multilingual$7);

function resolveTranslations$9(langs, x) {
  return resolveTranslations$2(langs, resolveTranslations$1, x);
}

var Decode$20 = {
  multilingual: multilingual$15,
  resolveTranslations: resolveTranslations$9
};

var Increasable$1 = {
  Decode: Decode$20
};

var ActivatableMultiEntry = {
  Decode: {
    t: t$5
  }
};

var IncreasableMultiEntry = {
  Decode: {
    t: t$8
  }
};

var DisplayOption = {};

var Config = {};

var Collection_ByLevel = {
  getFirstLevel: getFirstLevel,
  concatRange: concatRange
};

var Collection = {
  ByLevel: Collection_ByLevel,
  General: General$1,
  Profession: Profession$1,
  AdvantageDisadvantage: AdvantageDisadvantage$1,
  ArcaneTradition: ArcaneTradition$1,
  Activatable: Activatable$1,
  Increasable: Increasable$1
};

export {
  oneOrManyInt ,
  Sex ,
  Race ,
  Culture ,
  SocialStatus ,
  Pact ,
  PrimaryAttribute ,
  Activatable ,
  ActivatableMultiEntry ,
  ActivatableMultiSelect ,
  Increasable ,
  IncreasableMultiEntry ,
  DisplayOption ,
  Config ,
  Unified ,
  General ,
  Profession ,
  AdvantageDisadvantage ,
  ArcaneTradition ,
  ActivatableOnly ,
  IncreasableOnly ,
  Collection ,
  
}
/* TranslationMap Not a pure module */
