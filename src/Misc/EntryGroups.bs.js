// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Id$OptolithClient = require("./Id.bs.js");
var Ley_List$OptolithClient = require("../Data/Ley_List.bs.js");
var Ley_IntMap$OptolithClient = require("../Data/Ley_IntMap.bs.js");
var Activatable_Accessors$OptolithClient = require("../Activatable/Activatable_Accessors.bs.js");

function getFromGroup(getGroup, group, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.filter, (function (param) {
                return Curry._1(getGroup, param[0]) === group;
              }), pairs);
}

function getActiveFromGroup(isActive, getGroup, group, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.filter, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._1(getGroup, param[0]) === group) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function countActiveFromGroup(isActive, getGroup, group, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.countWith, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._1(getGroup, param[0]) === group) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function countActiveFromGroups(isActive, getGroup, groups, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.countWith, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._2(Ley_List$OptolithClient.elem, Curry._1(getGroup, param[0]), groups)) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function hasActiveFromGroup(isActive, getGroup, group, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.any, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._1(getGroup, param[0]) === group) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function hasActiveFromGroups(isActive, getGroup, groups, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.any, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._2(Ley_List$OptolithClient.elem, Curry._1(getGroup, param[0]), groups)) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function getFromGroup$1(group, pairs) {
  return getFromGroup((function (param) {
                return param.gr;
              }), Curry._1(Id$OptolithClient.CombatTechnique.Group.toInt, group), pairs);
}

var CombatTechnique = {
  getFromGroup: getFromGroup$1
};

function getFromGroup$2(group, pairs) {
  return getFromGroup((function (param) {
                return param.gr;
              }), Curry._1(Id$OptolithClient.SpecialAbility.Group.toInt, group), pairs);
}

function countActiveFromGroup$1(group, pairs) {
  return countActiveFromGroup(Activatable_Accessors$OptolithClient.isActive, (function (param) {
                return param.gr;
              }), Curry._1(Id$OptolithClient.SpecialAbility.Group.toInt, group), pairs);
}

function countActiveFromGroups$1(groups, pairs) {
  return countActiveFromGroups(Activatable_Accessors$OptolithClient.isActive, (function (param) {
                return param.gr;
              }), Curry._2(Ley_List$OptolithClient.map, Id$OptolithClient.SpecialAbility.Group.toInt, groups), pairs);
}

function hasActiveFromGroup$1(group, pairs) {
  return hasActiveFromGroup(Activatable_Accessors$OptolithClient.isActive, (function (param) {
                return param.gr;
              }), Curry._1(Id$OptolithClient.SpecialAbility.Group.toInt, group), pairs);
}

function hasActiveFromGroups$1(groups, pairs) {
  return hasActiveFromGroups(Activatable_Accessors$OptolithClient.isActive, (function (param) {
                return param.gr;
              }), Curry._2(Ley_List$OptolithClient.map, Id$OptolithClient.SpecialAbility.Group.toInt, groups), pairs);
}

var SpecialAbility = {
  getFromGroup: getFromGroup$2,
  countActiveFromGroup: countActiveFromGroup$1,
  countActiveFromGroups: countActiveFromGroups$1,
  hasActiveFromGroup: hasActiveFromGroup$1,
  hasActiveFromGroups: hasActiveFromGroups$1
};

exports.getFromGroup = getFromGroup;
exports.getActiveFromGroup = getActiveFromGroup;
exports.countActiveFromGroup = countActiveFromGroup;
exports.countActiveFromGroups = countActiveFromGroups;
exports.hasActiveFromGroup = hasActiveFromGroup;
exports.hasActiveFromGroups = hasActiveFromGroups;
exports.CombatTechnique = CombatTechnique;
exports.SpecialAbility = SpecialAbility;
/* Id-OptolithClient Not a pure module */
