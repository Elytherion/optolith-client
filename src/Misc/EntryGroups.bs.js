// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Id$OptolithClient from "./Id.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Activatable_Accessors$OptolithClient from "../Activatable/Activatable_Accessors.bs.js";

function getFromGroup(getGroup, group, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.filter, (function (param) {
                return Curry._1(getGroup, param[0]) === group;
              }), pairs);
}

function getActiveFromGroup(isActive, getGroup, group, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.filter, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._1(getGroup, param[0]) === group) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function countActiveFromGroup(isActive, getGroup, group, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.countWith, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._1(getGroup, param[0]) === group) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function countActiveFromGroups(isActive, getGroup, groups, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.countWith, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._2(Ley_List$OptolithClient.elem, Curry._1(getGroup, param[0]), groups)) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function hasActiveFromGroup(isActive, getGroup, group, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.any, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._1(getGroup, param[0]) === group) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function hasActiveFromGroups(isActive, getGroup, groups, pairs) {
  return Curry._2(Ley_IntMap$OptolithClient.any, (function (param) {
                var heroEntry = param[1];
                if (heroEntry !== undefined && Curry._2(Ley_List$OptolithClient.elem, Curry._1(getGroup, param[0]), groups)) {
                  return Curry._1(isActive, Caml_option.valFromOption(heroEntry));
                } else {
                  return false;
                }
              }), pairs);
}

function getFromGroup$1(group, pairs) {
  return getFromGroup((function (param) {
                return param.gr;
              }), Curry._1(Id$OptolithClient.CombatTechnique.Group.toInt, group), pairs);
}

var CombatTechnique = {
  getFromGroup: getFromGroup$1
};

function getFromGroup$2(group, pairs) {
  return getFromGroup((function (param) {
                return param.gr;
              }), Curry._1(Id$OptolithClient.SpecialAbility.Group.toInt, group), pairs);
}

function countActiveFromGroup$1(group, pairs) {
  return countActiveFromGroup(Activatable_Accessors$OptolithClient.isActive, (function (param) {
                return param.gr;
              }), Curry._1(Id$OptolithClient.SpecialAbility.Group.toInt, group), pairs);
}

function countActiveFromGroups$1(groups, pairs) {
  return countActiveFromGroups(Activatable_Accessors$OptolithClient.isActive, (function (param) {
                return param.gr;
              }), Curry._2(Ley_List$OptolithClient.map, Id$OptolithClient.SpecialAbility.Group.toInt, groups), pairs);
}

function hasActiveFromGroup$1(group, pairs) {
  return hasActiveFromGroup(Activatable_Accessors$OptolithClient.isActive, (function (param) {
                return param.gr;
              }), Curry._1(Id$OptolithClient.SpecialAbility.Group.toInt, group), pairs);
}

function hasActiveFromGroups$1(groups, pairs) {
  return hasActiveFromGroups(Activatable_Accessors$OptolithClient.isActive, (function (param) {
                return param.gr;
              }), Curry._2(Ley_List$OptolithClient.map, Id$OptolithClient.SpecialAbility.Group.toInt, groups), pairs);
}

var SpecialAbility = {
  getFromGroup: getFromGroup$2,
  countActiveFromGroup: countActiveFromGroup$1,
  countActiveFromGroups: countActiveFromGroups$1,
  hasActiveFromGroup: hasActiveFromGroup$1,
  hasActiveFromGroups: hasActiveFromGroups$1
};

export {
  getFromGroup ,
  getActiveFromGroup ,
  countActiveFromGroup ,
  countActiveFromGroups ,
  hasActiveFromGroup ,
  hasActiveFromGroups ,
  CombatTechnique ,
  SpecialAbility ,
  
}
/* Ley_List-OptolithClient Not a pure module */
