// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function maybe(decode, json) {
  if (json === undefined || json === null) {
    return ;
  } else {
    return Caml_option.some(Curry._1(decode, json));
  }
}

function optionalField(key, decode, json) {
  if (typeof json === "object" && !Array.isArray(json) && json !== null) {
    var value = Js_dict.get(json, key);
    if (value === undefined) {
      return ;
    }
    try {
      return Caml_option.some(Curry._1(decode, Caml_option.valFromOption(value)));
    }
    catch (raw_msg){
      var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
      if (msg.RE_EXN_ID === Json_decode.DecodeError) {
        throw {
              RE_EXN_ID: Json_decode.DecodeError,
              _1: msg._1 + ("\n\tat field '" + (key + "'")),
              Error: new Error()
            };
      }
      throw msg;
    }
  } else {
    throw {
          RE_EXN_ID: Json_decode.DecodeError,
          _1: "Expected object, got " + JSON.stringify(json),
          Error: new Error()
        };
  }
}

function $$const(x, json) {
  if (Caml_obj.caml_equal(json, x)) {
    return x;
  }
  throw {
        RE_EXN_ID: Json_decode.DecodeError,
        _1: "Expected \"" + (JSON.stringify(json) + ("\", but received: " + JSON.stringify(json))),
        Error: new Error()
      };
}

var DecodeError = Json_decode.DecodeError;

var id = Json_decode.id;

var bool = Json_decode.bool;

var $$float = Json_decode.$$float;

var $$int = Json_decode.$$int;

var string = Json_decode.string;

var $$char = Json_decode.$$char;

var date = Json_decode.date;

var nullable = Json_decode.nullable;

var nullAs = Json_decode.nullAs;

var array = Json_decode.array;

var list = Json_decode.list;

var pair = Json_decode.pair;

var tuple2 = Json_decode.tuple2;

var tuple3 = Json_decode.tuple3;

var tuple4 = Json_decode.tuple4;

var dict = Json_decode.dict;

var field = Json_decode.field;

var at = Json_decode.at;

var optional = Json_decode.optional;

var oneOf = Json_decode.oneOf;

var either = Json_decode.either;

var withDefault = Json_decode.withDefault;

var map = Json_decode.map;

var andThen = Json_decode.andThen;

var idTagName = "type";

exports.DecodeError = DecodeError;
exports.id = id;
exports.bool = bool;
exports.$$float = $$float;
exports.$$int = $$int;
exports.string = string;
exports.$$char = $$char;
exports.date = date;
exports.nullable = nullable;
exports.nullAs = nullAs;
exports.array = array;
exports.list = list;
exports.pair = pair;
exports.tuple2 = tuple2;
exports.tuple3 = tuple3;
exports.tuple4 = tuple4;
exports.dict = dict;
exports.field = field;
exports.at = at;
exports.optional = optional;
exports.oneOf = oneOf;
exports.either = either;
exports.withDefault = withDefault;
exports.map = map;
exports.andThen = andThen;
exports.idTagName = idTagName;
exports.maybe = maybe;
exports.optionalField = optionalField;
exports.$$const = $$const;
/* No side effect */
