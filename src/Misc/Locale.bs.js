// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Ley_List$OptolithClient = require("../Data/Ley_List.bs.js");
var JsonStrict$OptolithClient = require("./JsonStrict.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var Ley_StrMap$OptolithClient = require("../Data/Ley_StrMap.bs.js");
var Ley_Function$OptolithClient = require("../Data/Ley_Function.bs.js");

function fromList(xs) {
  return xs;
}

function toList(xs) {
  return xs;
}

function multilingual(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.string, json),
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          region: JsonStrict$OptolithClient.field("region", JsonStrict$OptolithClient.string, json),
          isMissingImplementation: JsonStrict$OptolithClient.optionalField("isMissingImplementation", JsonStrict$OptolithClient.bool, json)
        };
}

function assoc(json) {
  var x = multilingual(json);
  if (Curry._1(Ley_Option$OptolithClient.dis, x.isMissingImplementation)) {
    return ;
  } else {
    return [
            x.id,
            {
              id: x.id,
              name: x.name,
              region: x.region
            }
          ];
  }
}

function map(json) {
  return Curry._1(Ley_StrMap$OptolithClient.fromList, Ley_Option$OptolithClient.catOptions(Json_decode.list(assoc, json)));
}

function systemLocaleToId(supportedLocales, systemLocale) {
  var systemLocaleStart = Caml_array.get(systemLocale.split("-"), 0);
  return Ley_Option$OptolithClient.option("en-US", (function (locale) {
                return locale.id;
              }), Curry._2(Ley_StrMap$OptolithClient.find, (function (locale) {
                    return locale.id.startsWith(systemLocaleStart);
                  }), supportedLocales));
}

function filterBySupported(def, supportedLocales, order) {
  var order$1 = Ley_List$OptolithClient.filter((function (param) {
          return Ley_Function$OptolithClient.flip(Ley_StrMap$OptolithClient.member, supportedLocales, param);
        }), order);
  if (order$1) {
    return order$1;
  } else {
    return {
            hd: def,
            tl: /* [] */0
          };
  }
}

var getPreferred = List.hd;

var Supported_Decode = {
  map: map
};

var Supported = {
  systemLocaleToId: systemLocaleToId,
  Decode: Supported_Decode
};

exports.fromList = fromList;
exports.toList = toList;
exports.getPreferred = getPreferred;
exports.Supported = Supported;
exports.filterBySupported = filterBySupported;
/* Ley_List-OptolithClient Not a pure module */
