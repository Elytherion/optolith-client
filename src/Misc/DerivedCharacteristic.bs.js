// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Decoder$OptolithClient = require("../Utilities/Decoder.bs.js");
var JsonStrict$OptolithClient = require("./JsonStrict.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var TranslationMap$OptolithClient = require("./TranslationMap.bs.js");

var Dynamic = {};

function t(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          nameAbbr: JsonStrict$OptolithClient.field("nameAbbr", JsonStrict$OptolithClient.string, json),
          calc: JsonStrict$OptolithClient.field("calc", JsonStrict$OptolithClient.string, json),
          calcHalfPrimary: JsonStrict$OptolithClient.optionalField("calcHalfPrimary", JsonStrict$OptolithClient.string, json),
          calcNoPrimary: JsonStrict$OptolithClient.optionalField("calcNoPrimary", JsonStrict$OptolithClient.string, json)
        };
}

var Translation = {
  t: t
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function multilingual(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          translations: JsonStrict$OptolithClient.field("translations", TranslationMap.Decode.t, json)
        };
}

function t$1(langs, json) {
  var x = multilingual(json);
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        nameAbbr: translation.nameAbbr,
                        calc: translation.calc,
                        calcHalfPrimary: translation.calcHalfPrimary,
                        calcNoPrimary: translation.calcNoPrimary
                      };
              }));
}

function toAssoc(x) {
  return [
          x.id,
          x
        ];
}

function assoc(param, param$1) {
  return Decoder$OptolithClient.decodeAssoc(t$1, toAssoc, param, param$1);
}

var Static = {
  Decode: {
    assoc: assoc
  }
};

exports.Dynamic = Dynamic;
exports.Static = Static;
/* TranslationMap Not a pure module */
