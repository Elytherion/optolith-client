// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var JsonStrict$OptolithClient = require("./JsonStrict.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");

function raiseUnknownOption(optionName, invalidValue) {
  throw {
        RE_EXN_ID: Json_decode.DecodeError,
        _1: "Unknown value for option \"" + (optionName + ("\": " + invalidValue)),
        Error: new Error()
      };
}

function characterListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "dateModified" :
                  case "datemodified" :
                      return /* DateModified */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("characterListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function characterListVisibilityFilter(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "all" :
                      return /* All */0;
                  case "own" :
                      return /* Own */1;
                  case "shared" :
                      return /* Shared */2;
                  default:
                    return raiseUnknownOption("characterListVisibilityFilter", str);
                }
              }), Json_decode.string, param);
}

function raceListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "cost" :
                      return /* ApValue */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("raceListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function cultureListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "cost" :
                      return /* ApValue */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("cultureListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function cultureListVisibilityFilter(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "all" :
                      return /* All */0;
                  case "common" :
                      return /* Common */1;
                  default:
                    return raiseUnknownOption("cultureListVisibilityFilter", str);
                }
              }), Json_decode.string, param);
}

function professionListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "cost" :
                      return /* ApValue */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("professionListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function professionListVisibilityFilter(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "all" :
                      return /* All */0;
                  case "common" :
                      return /* Common */1;
                  default:
                    return raiseUnknownOption("professionListVisibilityFilter", str);
                }
              }), Json_decode.string, param);
}

function professionListGroupVisibilityFilter(param) {
  return Json_decode.map((function (num) {
                if (num > 3 || num < 0) {
                  return raiseUnknownOption("professionListGroupVisibilityFilter", num.toString());
                } else {
                  return num;
                }
              }), Json_decode.$$int, param);
}

function skillListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "ic" :
                      return /* IC */2;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("skillListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function combatTechniqueListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "ic" :
                      return /* IC */2;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("combatTechniqueListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function specialAbilityListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                  case "groupname" :
                      return /* Group */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("specialAbilityListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function spellListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "ic" :
                      return /* IC */3;
                  case "name" :
                      return /* Name */0;
                  case "property" :
                      return /* Property */2;
                  default:
                    return raiseUnknownOption("spellListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function liturgicalChantListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "ic" :
                      return /* IC */2;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("liturgicalChantListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function equipmentListSortOrder(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "groupname" :
                      return /* Group */1;
                  case "name" :
                      return /* Name */0;
                  case "weight" :
                      return /* Weight */3;
                  case "where" :
                      return /* Where */2;
                  default:
                    return raiseUnknownOption("equipmentListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function theme(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "dark" :
                      return /* Dark */0;
                  case "light" :
                      return /* Light */1;
                  default:
                    return raiseUnknownOption("theme", str);
                }
              }), Json_decode.string, param);
}

function t(json) {
  return {
          characterListSortOrder: JsonStrict$OptolithClient.field("herolistSortOrder", characterListSortOrder, json),
          characterListVisibilityFilter: JsonStrict$OptolithClient.field("herolistVisibilityFilter", characterListVisibilityFilter, json),
          raceListSortOrder: JsonStrict$OptolithClient.field("racesSortOrder", raceListSortOrder, json),
          cultureListSortOrder: JsonStrict$OptolithClient.field("culturesSortOrder", cultureListSortOrder, json),
          cultureListVisibilityFilter: JsonStrict$OptolithClient.field("culturesVisibilityFilter", cultureListVisibilityFilter, json),
          professionListSortOrder: JsonStrict$OptolithClient.field("professionsSortOrder", professionListSortOrder, json),
          professionListVisibilityFilter: JsonStrict$OptolithClient.field("professionsVisibilityFilter", professionListVisibilityFilter, json),
          professionListGroupVisibilityFilter: JsonStrict$OptolithClient.field("professionsGroupVisibilityFilter", professionListGroupVisibilityFilter, json),
          advantageDisadvantageListCultureRatingVisibility: JsonStrict$OptolithClient.field("advantagesDisadvantagesCultureRatingVisibility", JsonStrict$OptolithClient.bool, json),
          skillListSortOrder: JsonStrict$OptolithClient.field("talentsSortOrder", skillListSortOrder, json),
          skillListCultureRatingVisibility: JsonStrict$OptolithClient.field("talentsCultureRatingVisibility", JsonStrict$OptolithClient.bool, json),
          combatTechniqueListSortOrder: JsonStrict$OptolithClient.field("combatTechniquesSortOrder", combatTechniqueListSortOrder, json),
          specialAbilityListSortOrder: JsonStrict$OptolithClient.field("specialAbilitiesSortOrder", specialAbilityListSortOrder, json),
          spellListSortOrder: JsonStrict$OptolithClient.field("spellsSortOrder", spellListSortOrder, json),
          spellListUnfamiliarVisibility: JsonStrict$OptolithClient.field("spellsUnfamiliarVisibility", JsonStrict$OptolithClient.bool, json),
          liturgicalChantListSortOrder: JsonStrict$OptolithClient.field("liturgiesSortOrder", liturgicalChantListSortOrder, json),
          equipmentListSortOrder: JsonStrict$OptolithClient.field("equipmentSortOrder", equipmentListSortOrder, json),
          equipmentListGroupVisibilityFilter: JsonStrict$OptolithClient.field("equipmentGroupVisibilityFilter", JsonStrict$OptolithClient.$$int, json),
          sheetShowCheckAttributeValues: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("sheetCheckAttributeValueVisibility", JsonStrict$OptolithClient.bool, json)),
          sheetUseParchment: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("sheetUseParchment", JsonStrict$OptolithClient.bool, json)),
          sheetZoomFactor: JsonStrict$OptolithClient.field("sheetZoomFactor", JsonStrict$OptolithClient.$$int, json),
          enableActiveEntryHints: JsonStrict$OptolithClient.field("enableActiveItemHints", JsonStrict$OptolithClient.bool, json),
          locales: Ley_Option$OptolithClient.catOptions({
                hd: JsonStrict$OptolithClient.optionalField("locale", JsonStrict$OptolithClient.string, json),
                tl: {
                  hd: JsonStrict$OptolithClient.optionalField("fallbackLocale", JsonStrict$OptolithClient.string, json),
                  tl: /* [] */0
                }
              }),
          theme: Ley_Option$OptolithClient.fromOption(/* Dark */0, JsonStrict$OptolithClient.optionalField("theme", theme, json)),
          enableEditingHeroAfterCreationPhase: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("enableEditingHeroAfterCreationPhase", JsonStrict$OptolithClient.bool, json)),
          meleeItemTemplatesCombatTechniqueFilter: JsonStrict$OptolithClient.optionalField("meleeItemTemplatesCombatTechniqueFilter", JsonStrict$OptolithClient.string, json),
          rangedItemTemplatesCombatTechniqueFilter: JsonStrict$OptolithClient.optionalField("rangedItemTemplatesCombatTechniqueFilter", JsonStrict$OptolithClient.string, json),
          enableAnimations: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("enableAnimations", JsonStrict$OptolithClient.bool, json))
        };
}

var Old = {
  characterListSortOrder: characterListSortOrder,
  characterListVisibilityFilter: characterListVisibilityFilter,
  raceListSortOrder: raceListSortOrder,
  cultureListSortOrder: cultureListSortOrder,
  cultureListVisibilityFilter: cultureListVisibilityFilter,
  professionListSortOrder: professionListSortOrder,
  professionListVisibilityFilter: professionListVisibilityFilter,
  professionListGroupVisibilityFilter: professionListGroupVisibilityFilter,
  skillListSortOrder: skillListSortOrder,
  combatTechniqueListSortOrder: combatTechniqueListSortOrder,
  specialAbilityListSortOrder: specialAbilityListSortOrder,
  spellListSortOrder: spellListSortOrder,
  liturgicalChantListSortOrder: liturgicalChantListSortOrder,
  equipmentListSortOrder: equipmentListSortOrder,
  theme: theme,
  t: t
};

function characterListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "dateModified" :
                      return /* DateModified */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("characterListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function characterListVisibilityFilter$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "all" :
                      return /* All */0;
                  case "own" :
                      return /* Own */1;
                  case "shared" :
                      return /* Shared */2;
                  default:
                    return raiseUnknownOption("characterListVisibilityFilter", str);
                }
              }), Json_decode.string, param);
}

function raceListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "apValue" :
                      return /* ApValue */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("raceListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function cultureListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "apValue" :
                      return /* ApValue */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("cultureListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function cultureListVisibilityFilter$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "all" :
                      return /* All */0;
                  case "common" :
                      return /* Common */1;
                  default:
                    return raiseUnknownOption("cultureListVisibilityFilter", str);
                }
              }), Json_decode.string, param);
}

function professionListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "apValue" :
                      return /* ApValue */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("professionListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function professionListVisibilityFilter$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "all" :
                      return /* All */0;
                  case "common" :
                      return /* Common */1;
                  default:
                    return raiseUnknownOption("professionListVisibilityFilter", str);
                }
              }), Json_decode.string, param);
}

function professionListGroupVisibilityFilter$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "all" :
                      return /* All */0;
                  case "blessed" :
                      return /* Blessed */3;
                  case "magical" :
                      return /* Magical */2;
                  case "mundane" :
                      return /* Mundane */1;
                  default:
                    return raiseUnknownOption("professionListGroupVisibilityFilter", str);
                }
              }), Json_decode.string, param);
}

function skillListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "ic" :
                      return /* IC */2;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("skillListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function combatTechniqueListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "ic" :
                      return /* IC */2;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("combatTechniqueListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function specialAbilityListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("specialAbilityListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function spellListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "ic" :
                      return /* IC */3;
                  case "name" :
                      return /* Name */0;
                  case "property" :
                      return /* Property */2;
                  default:
                    return raiseUnknownOption("spellListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function liturgicalChantListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "ic" :
                      return /* IC */2;
                  case "name" :
                      return /* Name */0;
                  default:
                    return raiseUnknownOption("liturgicalChantListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function equipmentListSortOrder$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "group" :
                      return /* Group */1;
                  case "name" :
                      return /* Name */0;
                  case "weight" :
                      return /* Weight */3;
                  case "where" :
                      return /* Where */2;
                  default:
                    return raiseUnknownOption("equipmentListSortOrder", str);
                }
              }), Json_decode.string, param);
}

function theme$1(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "dark" :
                      return /* Dark */0;
                  case "light" :
                      return /* Light */1;
                  default:
                    return raiseUnknownOption("theme", str);
                }
              }), Json_decode.string, param);
}

function t$1(json) {
  return {
          characterListSortOrder: JsonStrict$OptolithClient.field("characterListSortOrder", characterListSortOrder$1, json),
          characterListVisibilityFilter: JsonStrict$OptolithClient.field("characterListVisibilityFilter", characterListVisibilityFilter$1, json),
          raceListSortOrder: JsonStrict$OptolithClient.field("raceListSortOrder", raceListSortOrder$1, json),
          cultureListSortOrder: JsonStrict$OptolithClient.field("cultureListSortOrder", cultureListSortOrder$1, json),
          cultureListVisibilityFilter: JsonStrict$OptolithClient.field("cultureListVisibilityFilter", cultureListVisibilityFilter$1, json),
          professionListSortOrder: JsonStrict$OptolithClient.field("professionListSortOrder", professionListSortOrder$1, json),
          professionListVisibilityFilter: JsonStrict$OptolithClient.field("professionListVisibilityFilter", professionListVisibilityFilter$1, json),
          professionListGroupVisibilityFilter: JsonStrict$OptolithClient.field("professionListGroupVisibilityFilter", professionListGroupVisibilityFilter$1, json),
          advantageDisadvantageListCultureRatingVisibility: JsonStrict$OptolithClient.field("advantageDisadvantageListCultureRatingVisibility", JsonStrict$OptolithClient.bool, json),
          skillListSortOrder: JsonStrict$OptolithClient.field("skillListSortOrder", skillListSortOrder$1, json),
          skillListCultureRatingVisibility: JsonStrict$OptolithClient.field("skillListCultureRatingVisibility", JsonStrict$OptolithClient.bool, json),
          combatTechniqueListSortOrder: JsonStrict$OptolithClient.field("combatTechniqueListSortOrder", combatTechniqueListSortOrder$1, json),
          specialAbilityListSortOrder: JsonStrict$OptolithClient.field("specialAbilityListSortOrder", specialAbilityListSortOrder$1, json),
          spellListSortOrder: JsonStrict$OptolithClient.field("spellListSortOrder", spellListSortOrder$1, json),
          spellListUnfamiliarVisibility: JsonStrict$OptolithClient.field("spellListUnfamiliarVisibility", JsonStrict$OptolithClient.bool, json),
          liturgicalChantListSortOrder: JsonStrict$OptolithClient.field("liturgicalChantListSortOrder", liturgicalChantListSortOrder$1, json),
          equipmentListSortOrder: JsonStrict$OptolithClient.field("equipmentListSortOrder", equipmentListSortOrder$1, json),
          equipmentListGroupVisibilityFilter: JsonStrict$OptolithClient.field("equipmentListGroupVisibilityFilter", JsonStrict$OptolithClient.$$int, json),
          sheetShowCheckAttributeValues: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("sheetShowCheckAttributeValues", JsonStrict$OptolithClient.bool, json)),
          sheetUseParchment: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("sheetUseParchment", JsonStrict$OptolithClient.bool, json)),
          sheetZoomFactor: JsonStrict$OptolithClient.field("sheetZoomFactor", JsonStrict$OptolithClient.$$int, json),
          enableActiveEntryHints: JsonStrict$OptolithClient.field("enableActiveEntryHints", JsonStrict$OptolithClient.bool, json),
          locales: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("locales", (function (param) {
                      return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.string, param);
                    }), json)),
          theme: Ley_Option$OptolithClient.fromOption(/* Dark */0, JsonStrict$OptolithClient.optionalField("theme", theme$1, json)),
          enableEditingHeroAfterCreationPhase: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("enableEditingHeroAfterCreationPhase", JsonStrict$OptolithClient.bool, json)),
          meleeItemTemplatesCombatTechniqueFilter: JsonStrict$OptolithClient.optionalField("meleeItemTemplatesCombatTechniqueFilter", JsonStrict$OptolithClient.string, json),
          rangedItemTemplatesCombatTechniqueFilter: JsonStrict$OptolithClient.optionalField("rangedItemTemplatesCombatTechniqueFilter", JsonStrict$OptolithClient.string, json),
          enableAnimations: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("enableAnimations", JsonStrict$OptolithClient.bool, json))
        };
}

var Decode = {
  raiseUnknownOption: raiseUnknownOption,
  Old: Old,
  characterListSortOrder: characterListSortOrder$1,
  characterListVisibilityFilter: characterListVisibilityFilter$1,
  raceListSortOrder: raceListSortOrder$1,
  cultureListSortOrder: cultureListSortOrder$1,
  cultureListVisibilityFilter: cultureListVisibilityFilter$1,
  professionListSortOrder: professionListSortOrder$1,
  professionListVisibilityFilter: professionListVisibilityFilter$1,
  professionListGroupVisibilityFilter: professionListGroupVisibilityFilter$1,
  skillListSortOrder: skillListSortOrder$1,
  combatTechniqueListSortOrder: combatTechniqueListSortOrder$1,
  specialAbilityListSortOrder: specialAbilityListSortOrder$1,
  spellListSortOrder: spellListSortOrder$1,
  liturgicalChantListSortOrder: liturgicalChantListSortOrder$1,
  equipmentListSortOrder: equipmentListSortOrder$1,
  theme: theme$1,
  t: t$1
};

var $$default = {
  characterListSortOrder: /* DateModified */1,
  characterListVisibilityFilter: /* All */0,
  raceListSortOrder: /* Name */0,
  cultureListSortOrder: /* Name */0,
  cultureListVisibilityFilter: /* Common */1,
  professionListSortOrder: /* Name */0,
  professionListVisibilityFilter: /* Common */1,
  professionListGroupVisibilityFilter: /* All */0,
  advantageDisadvantageListCultureRatingVisibility: false,
  skillListSortOrder: /* Group */1,
  skillListCultureRatingVisibility: false,
  combatTechniqueListSortOrder: /* Name */0,
  specialAbilityListSortOrder: /* Name */0,
  spellListSortOrder: /* Name */0,
  spellListUnfamiliarVisibility: false,
  liturgicalChantListSortOrder: /* Name */0,
  equipmentListSortOrder: /* Name */0,
  equipmentListGroupVisibilityFilter: 1,
  sheetShowCheckAttributeValues: false,
  sheetUseParchment: false,
  sheetZoomFactor: 1,
  enableActiveEntryHints: false,
  locales: /* [] */0,
  theme: /* Dark */0,
  enableEditingHeroAfterCreationPhase: false,
  meleeItemTemplatesCombatTechniqueFilter: undefined,
  rangedItemTemplatesCombatTechniqueFilter: undefined,
  enableAnimations: false
};

exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.Decode = Decode;
/* Ley_Option-OptolithClient Not a pure module */
