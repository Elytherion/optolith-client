// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("bs-platform/lib/js/string.js");
var Ley_Map$OptolithClient = require("./Ley_Map.bs.js");

var StrMap = Ley_Map$OptolithClient.Make({
      compare: $$String.compare
    });

var foldr = StrMap.foldr;

var foldl = StrMap.foldl;

var toList = StrMap.toList;

var length = StrMap.length;

var elem = StrMap.elem;

var sum = StrMap.sum;

var maximum = StrMap.maximum;

var minimum = StrMap.minimum;

var concat = StrMap.concat;

var concatMap = StrMap.concatMap;

var con = StrMap.con;

var dis = StrMap.dis;

var any = StrMap.any;

var all = StrMap.all;

var notElem = StrMap.notElem;

var find = StrMap.find;

var mapMEither = StrMap.mapMEither;

var $$null = StrMap.$$null;

var size = StrMap.size;

var member = StrMap.member;

var notMember = StrMap.notMember;

var lookup = StrMap.lookup;

var findWithDefault = StrMap.findWithDefault;

var empty = StrMap.empty;

var singleton = StrMap.singleton;

var insert = StrMap.insert;

var insertWith = StrMap.insertWith;

var insertWithKey = StrMap.insertWithKey;

var insertLookupWithKey = StrMap.insertLookupWithKey;

var $$delete = StrMap.$$delete;

var adjust = StrMap.adjust;

var adjustWithKey = StrMap.adjustWithKey;

var update = StrMap.update;

var updateWithKey = StrMap.updateWithKey;

var updateLookupWithKey = StrMap.updateLookupWithKey;

var alter = StrMap.alter;

var union = StrMap.union;

var map = StrMap.map;

var mapWithKey = StrMap.mapWithKey;

var foldrWithKey = StrMap.foldrWithKey;

var foldlWithKey = StrMap.foldlWithKey;

var elems = StrMap.elems;

var keys = StrMap.keys;

var assocs = StrMap.assocs;

var fromList = StrMap.fromList;

var fromArray = StrMap.fromArray;

var filter = StrMap.filter;

var filterWithKey = StrMap.filterWithKey;

var mapMaybe = StrMap.mapMaybe;

var mapMaybeWithKey = StrMap.mapMaybeWithKey;

var zip = StrMap.zip;

var zipOption = StrMap.zipOption;

var countWith = StrMap.countWith;

var countWithKey = StrMap.countWithKey;

var countBy = StrMap.countBy;

var countByM = StrMap.countByM;

var groupBy = StrMap.groupBy;

exports.StrMap = StrMap;
exports.foldr = foldr;
exports.foldl = foldl;
exports.toList = toList;
exports.length = length;
exports.elem = elem;
exports.sum = sum;
exports.maximum = maximum;
exports.minimum = minimum;
exports.concat = concat;
exports.concatMap = concatMap;
exports.con = con;
exports.dis = dis;
exports.any = any;
exports.all = all;
exports.notElem = notElem;
exports.find = find;
exports.mapMEither = mapMEither;
exports.$$null = $$null;
exports.size = size;
exports.member = member;
exports.notMember = notMember;
exports.lookup = lookup;
exports.findWithDefault = findWithDefault;
exports.empty = empty;
exports.singleton = singleton;
exports.insert = insert;
exports.insertWith = insertWith;
exports.insertWithKey = insertWithKey;
exports.insertLookupWithKey = insertLookupWithKey;
exports.$$delete = $$delete;
exports.adjust = adjust;
exports.adjustWithKey = adjustWithKey;
exports.update = update;
exports.updateWithKey = updateWithKey;
exports.updateLookupWithKey = updateLookupWithKey;
exports.alter = alter;
exports.union = union;
exports.map = map;
exports.mapWithKey = mapWithKey;
exports.foldrWithKey = foldrWithKey;
exports.foldlWithKey = foldlWithKey;
exports.elems = elems;
exports.keys = keys;
exports.assocs = assocs;
exports.fromList = fromList;
exports.fromArray = fromArray;
exports.filter = filter;
exports.filterWithKey = filterWithKey;
exports.mapMaybe = mapMaybe;
exports.mapMaybeWithKey = mapMaybeWithKey;
exports.zip = zip;
exports.zipOption = zipOption;
exports.countWith = countWith;
exports.countWithKey = countWithKey;
exports.countBy = countBy;
exports.countByM = countByM;
exports.groupBy = groupBy;
/* StrMap Not a pure module */
