// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ley_Map$OptolithClient from "./Ley_Map.bs.js";

function compare(x, y) {
  return y - x | 0;
}

var IntMap = Ley_Map$OptolithClient.Make({
      compare: compare
    });

var foldr = IntMap.foldr;

var foldl = IntMap.foldl;

var toList = IntMap.toList;

var length = IntMap.length;

var elem = IntMap.elem;

var sum = IntMap.sum;

var maximum = IntMap.maximum;

var minimum = IntMap.minimum;

var concat = IntMap.concat;

var concatMap = IntMap.concatMap;

var con = IntMap.con;

var dis = IntMap.dis;

var any = IntMap.any;

var all = IntMap.all;

var notElem = IntMap.notElem;

var find = IntMap.find;

var mapMEither = IntMap.mapMEither;

var $$null = IntMap.$$null;

var size = IntMap.size;

var member = IntMap.member;

var notMember = IntMap.notMember;

var lookup = IntMap.lookup;

var findWithDefault = IntMap.findWithDefault;

var empty = IntMap.empty;

var singleton = IntMap.singleton;

var insert = IntMap.insert;

var insertWith = IntMap.insertWith;

var insertWithKey = IntMap.insertWithKey;

var insertLookupWithKey = IntMap.insertLookupWithKey;

var $$delete = IntMap.$$delete;

var adjust = IntMap.adjust;

var adjustWithKey = IntMap.adjustWithKey;

var update = IntMap.update;

var updateWithKey = IntMap.updateWithKey;

var updateLookupWithKey = IntMap.updateLookupWithKey;

var alter = IntMap.alter;

var union = IntMap.union;

var map = IntMap.map;

var mapWithKey = IntMap.mapWithKey;

var foldrWithKey = IntMap.foldrWithKey;

var foldlWithKey = IntMap.foldlWithKey;

var elems = IntMap.elems;

var keys = IntMap.keys;

var assocs = IntMap.assocs;

var fromList = IntMap.fromList;

var fromArray = IntMap.fromArray;

var filter = IntMap.filter;

var filterWithKey = IntMap.filterWithKey;

var mapMaybe = IntMap.mapMaybe;

var mapMaybeWithKey = IntMap.mapMaybeWithKey;

var zip = IntMap.zip;

var zipOption = IntMap.zipOption;

var countWith = IntMap.countWith;

var countWithKey = IntMap.countWithKey;

var countBy = IntMap.countBy;

var countByM = IntMap.countByM;

var groupBy = IntMap.groupBy;

export {
  IntMap ,
  foldr ,
  foldl ,
  toList ,
  length ,
  elem ,
  sum ,
  maximum ,
  minimum ,
  concat ,
  concatMap ,
  con ,
  dis ,
  any ,
  all ,
  notElem ,
  find ,
  mapMEither ,
  $$null ,
  size ,
  member ,
  notMember ,
  lookup ,
  findWithDefault ,
  empty ,
  singleton ,
  insert ,
  insertWith ,
  insertWithKey ,
  insertLookupWithKey ,
  $$delete ,
  adjust ,
  adjustWithKey ,
  update ,
  updateWithKey ,
  updateLookupWithKey ,
  alter ,
  union ,
  map ,
  mapWithKey ,
  foldrWithKey ,
  foldlWithKey ,
  elems ,
  keys ,
  assocs ,
  fromList ,
  fromArray ,
  filter ,
  filterWithKey ,
  mapMaybe ,
  mapMaybeWithKey ,
  zip ,
  zipOption ,
  countWith ,
  countWithKey ,
  countBy ,
  countByM ,
  groupBy ,
  
}
/* IntMap Not a pure module */
