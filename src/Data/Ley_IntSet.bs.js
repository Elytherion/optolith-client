// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ley_Set$OptolithClient = require("./Ley_Set.bs.js");

function compare(x, y) {
  return y - x | 0;
}

var IntSet = Ley_Set$OptolithClient.Make({
      compare: compare
    });

var foldr = IntSet.foldr;

var foldl = IntSet.foldl;

var toList = IntSet.toList;

var $$null = IntSet.$$null;

var length = IntSet.length;

var elem = IntSet.elem;

var concatMap = IntSet.concatMap;

var any = IntSet.any;

var all = IntSet.all;

var notElem = IntSet.notElem;

var find = IntSet.find;

var empty = IntSet.empty;

var singleton = IntSet.singleton;

var fromList = IntSet.fromList;

var insert = IntSet.insert;

var $$delete = IntSet.$$delete;

var toggle = IntSet.toggle;

var member = IntSet.member;

var notMember = IntSet.notMember;

var size = IntSet.size;

var disjoint = IntSet.disjoint;

var union = IntSet.union;

var difference = IntSet.difference;

var filter = IntSet.filter;

var map = IntSet.map;

var elems = IntSet.elems;

var Infix = IntSet.Infix;

exports.IntSet = IntSet;
exports.foldr = foldr;
exports.foldl = foldl;
exports.toList = toList;
exports.$$null = $$null;
exports.length = length;
exports.elem = elem;
exports.concatMap = concatMap;
exports.any = any;
exports.all = all;
exports.notElem = notElem;
exports.find = find;
exports.empty = empty;
exports.singleton = singleton;
exports.fromList = fromList;
exports.insert = insert;
exports.$$delete = $$delete;
exports.toggle = toggle;
exports.member = member;
exports.notMember = notMember;
exports.size = size;
exports.disjoint = disjoint;
exports.union = union;
exports.difference = difference;
exports.filter = filter;
exports.map = map;
exports.elems = elems;
exports.Infix = Infix;
/* IntSet Not a pure module */
