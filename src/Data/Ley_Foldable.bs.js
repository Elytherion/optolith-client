// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_int = require("bs-platform/lib/js/js_int.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function Make(Arg) {
  var foldr = Arg.foldr;
  var toList = function (x) {
    return Curry._3(foldr, (function (e, xs) {
                  return {
                          hd: e,
                          tl: xs
                        };
                }), /* [] */0, x);
  };
  var $$null = function (x) {
    return Curry._3(foldr, (function (param, param$1) {
                  return false;
                }), true, x);
  };
  var length = function (x) {
    return Curry._3(foldr, (function (param, len) {
                  return len + 1 | 0;
                }), 0, x);
  };
  var any = function (f, x) {
    return Curry._3(foldr, (function (e, res) {
                  if (Curry._1(f, e)) {
                    return true;
                  } else {
                    return res;
                  }
                }), false, x);
  };
  var all = function (f, x) {
    return Curry._3(foldr, (function (e, res) {
                  if (Curry._1(f, e)) {
                    return res;
                  } else {
                    return false;
                  }
                }), true, x);
  };
  var elem = function (e, x) {
    return any((function (x$prime) {
                  return Caml_obj.caml_equal(e, x$prime);
                }), x);
  };
  var sum = function (x) {
    return Curry._3(foldr, (function (prim, prim$1) {
                  return prim + prim$1 | 0;
                }), 0, x);
  };
  var maximum = function (xs) {
    return Curry._3(foldr, (function (prim, prim$1) {
                  return Math.max(prim, prim$1);
                }), Js_int.min, xs);
  };
  var minimum = function (xs) {
    return Curry._3(foldr, (function (prim, prim$1) {
                  return Math.min(prim, prim$1);
                }), Js_int.max, xs);
  };
  var concat = function (x) {
    return Curry._3(foldr, Pervasives.$at, /* [] */0, x);
  };
  var concatMap = function (f, x) {
    return Curry._3(foldr, (function (e, rs) {
                  return Pervasives.$at(Curry._1(f, e), rs);
                }), /* [] */0, x);
  };
  var con = function (x) {
    return Curry._3(foldr, (function (e, acc) {
                  if (acc) {
                    return e;
                  } else {
                    return false;
                  }
                }), true, x);
  };
  var dis = function (x) {
    return Curry._3(foldr, (function (e, acc) {
                  if (acc) {
                    return true;
                  } else {
                    return e;
                  }
                }), false, x);
  };
  var notElem = function (e, x) {
    return all((function (x$prime) {
                  return Caml_obj.caml_notequal(e, x$prime);
                }), x);
  };
  var find = function (f, x) {
    return Curry._3(foldr, (function (e, res) {
                  if (res !== undefined) {
                    return res;
                  } else if (Curry._1(f, e)) {
                    return Caml_option.some(e);
                  } else {
                    return ;
                  }
                }), undefined, x);
  };
  return {
          foldr: foldr,
          foldl: Arg.foldl,
          toList: toList,
          $$null: $$null,
          length: length,
          elem: elem,
          sum: sum,
          maximum: maximum,
          minimum: minimum,
          concat: concat,
          concatMap: concatMap,
          con: con,
          dis: dis,
          any: any,
          all: all,
          notElem: notElem,
          find: find
        };
}

exports.Make = Make;
/* No side effect */
