// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_int = require("bs-platform/lib/js/js_int.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Ley_Option$OptolithClient = require("../Ley_Option.bs.js");

Jest.describe("Functor", (function (param) {
        return Jest.describe("fmap", (function (param) {
                      Jest.test("maps a function over a value in a Some", (function (param) {
                              return Jest.Expect.toEqual(6, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.fmap, (function (param) {
                                                    return (param << 1);
                                                  }), 3)));
                            }));
                      return Jest.test("does nothing if its a None", (function (param) {
                                    return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.fmap, (function (param) {
                                                          return (param << 1);
                                                        }), undefined)));
                                  }));
                    }));
      }));

Jest.describe("Applicative", (function (param) {
        Jest.describe("pure", (function (param) {
                return Jest.test("lifts a value into an option", (function (param) {
                              return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.pure, 2)));
                            }));
              }));
        return Jest.describe("liftA2", (function (param) {
                      Jest.test("maps a function over two values in Somes", (function (param) {
                              return Jest.Expect.toEqual(5, Jest.Expect.expect(Curry._3(Ley_Option$OptolithClient.liftA2, (function (prim, prim$1) {
                                                    return prim + prim$1 | 0;
                                                  }), 3, 2)));
                            }));
                      return Jest.testAll("does nothing if at least one of the values is a None", {
                                  hd: [
                                    undefined,
                                    2
                                  ],
                                  tl: {
                                    hd: [
                                      3,
                                      undefined
                                    ],
                                    tl: {
                                      hd: [
                                        undefined,
                                        undefined
                                      ],
                                      tl: /* [] */0
                                    }
                                  }
                                }, (function (param) {
                                    return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._3(Ley_Option$OptolithClient.liftA2, (function (prim, prim$1) {
                                                          return prim + prim$1 | 0;
                                                        }), param[0], param[1])));
                                  }));
                    }));
      }));

Jest.describe("Alternative", (function (param) {
        return Jest.describe("empty", (function (param) {
                      return Jest.test("is the empty option", (function (param) {
                                    return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Ley_Option$OptolithClient.empty));
                                  }));
                    }));
      }));

Jest.describe("Monad", (function (param) {
        Jest.describe("return", (function (param) {
                return Jest.test("lifts a value into an option", (function (param) {
                              return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.pure, 2)));
                            }));
              }));
        Jest.describe("join", (function (param) {
                Jest.test("joins two nested Somes into a single Some", (function (param) {
                        return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.join, 3)));
                      }));
                Jest.test("joins a nested None into a single None", (function (param) {
                        return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.join, Caml_option.some(undefined))));
                      }));
                return Jest.test("does nothing if its a None", (function (param) {
                              return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.join, undefined)));
                            }));
              }));
        Jest.describe("liftM2", (function (param) {
                Jest.test("maps a function over two values in Somes", (function (param) {
                        return Jest.Expect.toEqual(5, Jest.Expect.expect(Curry._3(Ley_Option$OptolithClient.liftM2, (function (prim, prim$1) {
                                              return prim + prim$1 | 0;
                                            }), 3, 2)));
                      }));
                return Jest.testAll("does nothing if at least one of the values is a None", {
                            hd: [
                              undefined,
                              2
                            ],
                            tl: {
                              hd: [
                                3,
                                undefined
                              ],
                              tl: {
                                hd: [
                                  undefined,
                                  undefined
                                ],
                                tl: /* [] */0
                              }
                            }
                          }, (function (param) {
                              return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._3(Ley_Option$OptolithClient.liftM2, (function (prim, prim$1) {
                                                    return prim + prim$1 | 0;
                                                  }), param[0], param[1])));
                            }));
              }));
        Jest.describe("liftM3", (function (param) {
                Jest.test("maps a function over three values in Somes", (function (param) {
                        return Jest.Expect.toEqual(6, Jest.Expect.expect(Curry._4(Ley_Option$OptolithClient.liftM3, (function (a, b, c) {
                                              return (a + b | 0) + c | 0;
                                            }), 1, 2, 3)));
                      }));
                return Jest.testAll("does nothing if at least one of the values is a None", {
                            hd: [
                              undefined,
                              2,
                              3
                            ],
                            tl: {
                              hd: [
                                1,
                                undefined,
                                3
                              ],
                              tl: {
                                hd: [
                                  1,
                                  2,
                                  undefined
                                ],
                                tl: /* [] */0
                              }
                            }
                          }, (function (param) {
                              return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._4(Ley_Option$OptolithClient.liftM3, (function (a, b, c) {
                                                    return (a + b | 0) + c | 0;
                                                  }), param[0], param[1], param[2])));
                            }));
              }));
        Jest.describe("liftM4", (function (param) {
                Jest.test("maps a function over three values in Somes", (function (param) {
                        return Jest.Expect.toEqual(10, Jest.Expect.expect(Curry._5(Ley_Option$OptolithClient.liftM4, (function (a, b, c, d) {
                                              return ((a + b | 0) + c | 0) + d | 0;
                                            }), 1, 2, 3, 4)));
                      }));
                return Jest.testAll("does nothing if at least one of the values is a None", {
                            hd: [
                              undefined,
                              2,
                              3,
                              4
                            ],
                            tl: {
                              hd: [
                                1,
                                undefined,
                                3,
                                4
                              ],
                              tl: {
                                hd: [
                                  1,
                                  2,
                                  undefined,
                                  4
                                ],
                                tl: {
                                  hd: [
                                    1,
                                    2,
                                    3,
                                    undefined
                                  ],
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, (function (param) {
                              return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._5(Ley_Option$OptolithClient.liftM4, (function (a, b, c, d) {
                                                    return ((a + b | 0) + c | 0) + d | 0;
                                                  }), param[0], param[1], param[2], param[3])));
                            }));
              }));
        return Jest.describe("liftM5", (function (param) {
                      Jest.test("maps a function over three values in Somes", (function (param) {
                              return Jest.Expect.toEqual(15, Jest.Expect.expect(Curry._6(Ley_Option$OptolithClient.liftM5, (function (a, b, c, d, e) {
                                                    return (((a + b | 0) + c | 0) + d | 0) + e | 0;
                                                  }), 1, 2, 3, 4, 5)));
                            }));
                      return Jest.testAll("does nothing if at least one of the values is a None", {
                                  hd: [
                                    undefined,
                                    2,
                                    3,
                                    4,
                                    5
                                  ],
                                  tl: {
                                    hd: [
                                      1,
                                      undefined,
                                      3,
                                      4,
                                      5
                                    ],
                                    tl: {
                                      hd: [
                                        1,
                                        2,
                                        undefined,
                                        4,
                                        5
                                      ],
                                      tl: {
                                        hd: [
                                          1,
                                          2,
                                          3,
                                          undefined,
                                          5
                                        ],
                                        tl: {
                                          hd: [
                                            1,
                                            2,
                                            3,
                                            4,
                                            undefined
                                          ],
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  }
                                }, (function (param) {
                                    return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._6(Ley_Option$OptolithClient.liftM5, (function (a, b, c, d, e) {
                                                          return (((a + b | 0) + c | 0) + d | 0) + e | 0;
                                                        }), param[0], param[1], param[2], param[3], param[4])));
                                  }));
                    }));
      }));

Jest.describe("Foldable", (function (param) {
        Jest.describe("foldr", (function (param) {
                Jest.test("folds the value from a Some into the default", (function (param) {
                        return Jest.Expect.toEqual(8, Jest.Expect.expect(Curry._3(Ley_Option$OptolithClient.foldr, (function (x, acc) {
                                              return (x << 1) + acc | 0;
                                            }), 2, 3)));
                      }));
                return Jest.test("returns the initial value if its a None", (function (param) {
                              return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._3(Ley_Option$OptolithClient.foldr, (function (x, acc) {
                                                    return (x << 1) + acc | 0;
                                                  }), 2, undefined)));
                            }));
              }));
        Jest.describe("foldl", (function (param) {
                Jest.test("folds the value from a Some into the default", (function (param) {
                        return Jest.Expect.toEqual(8, Jest.Expect.expect(Curry._3(Ley_Option$OptolithClient.foldl, (function (acc, x) {
                                              return (x << 1) + acc | 0;
                                            }), 2, 3)));
                      }));
                return Jest.test("returns the initial value if its a None", (function (param) {
                              return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._3(Ley_Option$OptolithClient.foldl, (function (acc, x) {
                                                    return (x << 1) + acc | 0;
                                                  }), 2, undefined)));
                            }));
              }));
        Jest.describe("toList", (function (param) {
                Jest.test("returns a singleton list with the value from the Some", (function (param) {
                        return Jest.Expect.toEqual({
                                    hd: 3,
                                    tl: /* [] */0
                                  }, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.toList, 3)));
                      }));
                return Jest.test("returns an empty list if the value is None", (function (param) {
                              return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.toList, undefined)));
                            }));
              }));
        Jest.describe("null", (function (param) {
                Jest.test("returns true if its a Some", (function (param) {
                        return Jest.Expect.toBe(false, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.$$null, 3)));
                      }));
                return Jest.test("returns false if its a None", (function (param) {
                              return Jest.Expect.toBe(true, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.$$null, undefined)));
                            }));
              }));
        Jest.describe("length", (function (param) {
                Jest.test("returns 1 if its a Some", (function (param) {
                        return Jest.Expect.toBe(1, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.length, 3)));
                      }));
                return Jest.test("returns 0 if its a None", (function (param) {
                              return Jest.Expect.toBe(0, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.length, undefined)));
                            }));
              }));
        Jest.describe("elem", (function (param) {
                Jest.test("returns if the value is a None", (function (param) {
                        return Jest.Expect.toBe(false, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.elem, 3, undefined)));
                      }));
                Jest.test("returns if the search value does not equal the value in the Some", (function (param) {
                        return Jest.Expect.toBe(false, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.elem, 3, 2)));
                      }));
                return Jest.test("returns if the search value equals the value in the Some", (function (param) {
                              return Jest.Expect.toBe(true, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.elem, 3, 3)));
                            }));
              }));
        Jest.describe("sum", (function (param) {
                Jest.test("returns the value in the Some if its a Some", (function (param) {
                        return Jest.Expect.toBe(3, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.sum, 3)));
                      }));
                return Jest.test("returns 0 if its a None", (function (param) {
                              return Jest.Expect.toBe(0, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.sum, undefined)));
                            }));
              }));
        Jest.describe("maximum", (function (param) {
                Jest.test("returns the value in the Some if its a Some", (function (param) {
                        return Jest.Expect.toBe(3, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.maximum, 3)));
                      }));
                return Jest.test("returns the minimum possible integer if its a None", (function (param) {
                              return Jest.Expect.toBe(Js_int.min, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.maximum, undefined)));
                            }));
              }));
        Jest.describe("minimum", (function (param) {
                Jest.test("returns the value in the Some if its a Some", (function (param) {
                        return Jest.Expect.toBe(3, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.minimum, 3)));
                      }));
                return Jest.test("returns the maximum possible integer if its a None", (function (param) {
                              return Jest.Expect.toBe(Js_int.max, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.minimum, undefined)));
                            }));
              }));
        Jest.describe("concat", (function (param) {
                Jest.test("returns the list in the Some if its a Some", (function (param) {
                        return Jest.Expect.toEqual({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.concat, {
                                            hd: 1,
                                            tl: {
                                              hd: 2,
                                              tl: {
                                                hd: 3,
                                                tl: /* [] */0
                                              }
                                            }
                                          })));
                      }));
                return Jest.test("returns an empty list if its a None", (function (param) {
                              return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.concat, undefined)));
                            }));
              }));
        Jest.describe("concatMap", (function (param) {
                Jest.test("returns the list in the Some if its a Some", (function (param) {
                        return Jest.Expect.toEqual({
                                    hd: 3,
                                    tl: {
                                      hd: 6,
                                      tl: /* [] */0
                                    }
                                  }, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.concatMap, (function (x) {
                                              return {
                                                      hd: x,
                                                      tl: {
                                                        hd: (x << 1),
                                                        tl: /* [] */0
                                                      }
                                                    };
                                            }), 3)));
                      }));
                return Jest.test("returns an empty list if its a None", (function (param) {
                              return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.concatMap, (function (x) {
                                                    return {
                                                            hd: x,
                                                            tl: {
                                                              hd: (x << 1),
                                                              tl: /* [] */0
                                                            }
                                                          };
                                                  }), undefined)));
                            }));
              }));
        Jest.describe("con", (function (param) {
                return Jest.testAll("returns the conjunction of an option and a boolean value", {
                            hd: [
                              true,
                              true
                            ],
                            tl: {
                              hd: [
                                false,
                                false
                              ],
                              tl: {
                                hd: [
                                  undefined,
                                  true
                                ],
                                tl: /* [] */0
                              }
                            }
                          }, (function (param) {
                              return Jest.Expect.toBe(param[1], Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.con, param[0])));
                            }));
              }));
        Jest.describe("dis", (function (param) {
                return Jest.testAll("returns the disjunction of an option and a boolean value", {
                            hd: [
                              true,
                              true
                            ],
                            tl: {
                              hd: [
                                false,
                                false
                              ],
                              tl: {
                                hd: [
                                  undefined,
                                  false
                                ],
                                tl: /* [] */0
                              }
                            }
                          }, (function (param) {
                              return Jest.Expect.toBe(param[1], Jest.Expect.expect(Curry._1(Ley_Option$OptolithClient.dis, param[0])));
                            }));
              }));
        Jest.describe("any", (function (param) {
                Jest.testAll("returns if the predicate matches the value in the Some", {
                      hd: [
                        5,
                        true
                      ],
                      tl: {
                        hd: [
                          3,
                          false
                        ],
                        tl: /* [] */0
                      }
                    }, (function (param) {
                        return Jest.Expect.toBe(param[1], Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.any, (function (e) {
                                              return e > 3;
                                            }), param[0])));
                      }));
                return Jest.test("returns false if its a None", (function (param) {
                              return Jest.Expect.toBe(false, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.any, (function (e) {
                                                    return e > 3;
                                                  }), undefined)));
                            }));
              }));
        Jest.describe("all", (function (param) {
                Jest.testAll("returns if the predicate matches the value in the Some", {
                      hd: [
                        5,
                        true
                      ],
                      tl: {
                        hd: [
                          3,
                          false
                        ],
                        tl: /* [] */0
                      }
                    }, (function (param) {
                        return Jest.Expect.toBe(param[1], Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.all, (function (e) {
                                              return e > 3;
                                            }), param[0])));
                      }));
                return Jest.test("returns true if its a None", (function (param) {
                              return Jest.Expect.toBe(true, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.all, (function (e) {
                                                    return e > 3;
                                                  }), undefined)));
                            }));
              }));
        Jest.describe("notElem", (function (param) {
                Jest.test("returns if the value is a None", (function (param) {
                        return Jest.Expect.toBe(true, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.notElem, 3, undefined)));
                      }));
                Jest.test("returns if the search value does not equal the value in the Some", (function (param) {
                        return Jest.Expect.toBe(true, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.notElem, 3, 2)));
                      }));
                return Jest.test("returns if the search value equals the value in the Some", (function (param) {
                              return Jest.Expect.toBe(false, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.notElem, 3, 3)));
                            }));
              }));
        return Jest.describe("find", (function (param) {
                      Jest.testAll("returns the option if the predicate matches the value in the Some", {
                            hd: [
                              5,
                              5
                            ],
                            tl: {
                              hd: [
                                3,
                                undefined
                              ],
                              tl: /* [] */0
                            }
                          }, (function (param) {
                              return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.find, (function (e) {
                                                    return e > 3;
                                                  }), param[0])));
                            }));
                      return Jest.test("returns None if its a None", (function (param) {
                                    return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Ley_Option$OptolithClient.find, (function (e) {
                                                          return e > 3;
                                                        }), undefined)));
                                  }));
                    }));
      }));

/*  Not a pure module */
