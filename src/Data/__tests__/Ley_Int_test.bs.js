// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var Ley_Int$OptolithClient = require("../Ley_Int.bs.js");

Jest.describe("compare", (function (param) {
        Jest.test("returns LT if the first is lower than the second", (function (param) {
                return Jest.Expect.toBe(/* LT */0, Jest.Expect.expect(Ley_Int$OptolithClient.compare(1, 2)));
              }));
        Jest.test("returns GT if the first is greater than the second", (function (param) {
                return Jest.Expect.toBe(/* GT */2, Jest.Expect.expect(Ley_Int$OptolithClient.compare(3, 2)));
              }));
        return Jest.test("returns EQ if the first equals the second", (function (param) {
                      return Jest.Expect.toBe(/* EQ */1, Jest.Expect.expect(Ley_Int$OptolithClient.compare(2, 2)));
                    }));
      }));

Jest.describe("max", (function (param) {
        Jest.test("returns the first argument if its larger", (function (param) {
                return Jest.Expect.toBe(6, Jest.Expect.expect(Ley_Int$OptolithClient.max(6, 5)));
              }));
        return Jest.test("returns the second argument if its larger", (function (param) {
                      return Jest.Expect.toBe(5, Jest.Expect.expect(Ley_Int$OptolithClient.max(3, 5)));
                    }));
      }));

Jest.describe("min", (function (param) {
        Jest.test("returns the first argument if its smaller", (function (param) {
                return Jest.Expect.toBe(5, Jest.Expect.expect(Ley_Int$OptolithClient.max(3, 5)));
              }));
        return Jest.test("returns the second argument if its smaller", (function (param) {
                      return Jest.Expect.toBe(6, Jest.Expect.expect(Ley_Int$OptolithClient.max(6, 5)));
                    }));
      }));

Jest.describe("minmax", (function (param) {
        Jest.test("returns the smaller first argument as the first tuple element", (function (param) {
                return Jest.Expect.toEqual([
                            3,
                            5
                          ], Jest.Expect.expect(Ley_Int$OptolithClient.minmax(3, 5)));
              }));
        return Jest.test("returns the larger first argument as the second tuple element", (function (param) {
                      return Jest.Expect.toEqual([
                                  5,
                                  6
                                ], Jest.Expect.expect(Ley_Int$OptolithClient.minmax(6, 5)));
                    }));
      }));

Jest.describe("inc", (function (param) {
        return Jest.testAll("increments its argument by 1", {
                    hd: [
                      3,
                      4
                    ],
                    tl: {
                      hd: [
                        5,
                        6
                      ],
                      tl: /* [] */0
                    }
                  }, (function (param) {
                      return Jest.Expect.toBe(param[1], Jest.Expect.expect(Ley_Int$OptolithClient.inc(param[0])));
                    }));
      }));

Jest.describe("dec", (function (param) {
        return Jest.testAll("decrements its argument by 1", {
                    hd: [
                      3,
                      2
                    ],
                    tl: {
                      hd: [
                        5,
                        4
                      ],
                      tl: /* [] */0
                    }
                  }, (function (param) {
                      return Jest.Expect.toBe(param[1], Jest.Expect.expect(Ley_Int$OptolithClient.dec(param[0])));
                    }));
      }));

Jest.describe("negate", (function (param) {
        return Jest.testAll("negates its argument", {
                    hd: [
                      3,
                      -3
                    ],
                    tl: {
                      hd: [
                        -5,
                        5
                      ],
                      tl: /* [] */0
                    }
                  }, (function (param) {
                      return Jest.Expect.toBe(param[1], Jest.Expect.expect(Ley_Int$OptolithClient.negate(param[0])));
                    }));
      }));

Jest.describe("abs", (function (param) {
        return Jest.testAll("returns the absolute value", {
                    hd: [
                      3,
                      3
                    ],
                    tl: {
                      hd: [
                        0,
                        0
                      ],
                      tl: {
                        hd: [
                          -5,
                          5
                        ],
                        tl: /* [] */0
                      }
                    }
                  }, (function (param) {
                      return Jest.Expect.toBe(param[1], Jest.Expect.expect(Ley_Int$OptolithClient.abs(param[0])));
                    }));
      }));

Jest.describe("even", (function (param) {
        return Jest.testAll("returns if an integer is even", {
                    hd: [
                      1,
                      false
                    ],
                    tl: {
                      hd: [
                        2,
                        true
                      ],
                      tl: /* [] */0
                    }
                  }, (function (param) {
                      return Jest.Expect.toBe(param[1], Jest.Expect.expect(Ley_Int$OptolithClient.even(param[0])));
                    }));
      }));

Jest.describe("odd", (function (param) {
        return Jest.testAll("returns if an integer is odd", {
                    hd: [
                      1,
                      true
                    ],
                    tl: {
                      hd: [
                        2,
                        false
                      ],
                      tl: /* [] */0
                    }
                  }, (function (param) {
                      return Jest.Expect.toBe(param[1], Jest.Expect.expect(Ley_Int$OptolithClient.odd(param[0])));
                    }));
      }));

Jest.describe("gcd", (function (param) {
        Jest.testAll("returns the greatest common divisor for an integer", {
              hd: [
                -3,
                6,
                3
              ],
              tl: {
                hd: [
                  -3,
                  -6,
                  3
                ],
                tl: {
                  hd: [
                    12,
                    18,
                    6
                  ],
                  tl: {
                    hd: [
                      0,
                      4,
                      4
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toBe(param[2], Jest.Expect.expect(Ley_Int$OptolithClient.gcd(param[0], param[1])));
              }));
        return Jest.test("throws if both arguments are 0", (function (param) {
                      return Jest.Expect.toThrow(Jest.Expect.expect(function (param) {
                                      return Ley_Int$OptolithClient.gcd(0, 0);
                                    }));
                    }));
      }));

Jest.describe("lcm", (function (param) {
        Jest.testAll("returns the greatest common divisor for an integer", {
              hd: [
                -3,
                6,
                -6
              ],
              tl: {
                hd: [
                  -3,
                  -6,
                  6
                ],
                tl: {
                  hd: [
                    12,
                    18,
                    36
                  ],
                  tl: {
                    hd: [
                      0,
                      4,
                      0
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toBe(param[2], Jest.Expect.expect(Ley_Int$OptolithClient.lcm(param[0], param[1])));
              }));
        return Jest.test("throws if both arguments are 0", (function (param) {
                      return Jest.Expect.toThrow(Jest.Expect.expect(function (param) {
                                      return Ley_Int$OptolithClient.lcm(0, 0);
                                    }));
                    }));
      }));

Jest.describe("signum", (function (param) {
        Jest.test("returns -1 for a negative integer", (function (param) {
                return Jest.Expect.toBe(-1, Jest.Expect.expect(Ley_Int$OptolithClient.signum(-43)));
              }));
        Jest.test("returns 0 for a 0", (function (param) {
                return Jest.Expect.toBe(0, Jest.Expect.expect(Ley_Int$OptolithClient.signum(0)));
              }));
        return Jest.test("returns 1 for a positive integer", (function (param) {
                      return Jest.Expect.toBe(1, Jest.Expect.expect(Ley_Int$OptolithClient.signum(61)));
                    }));
      }));

Jest.describe("show", (function (param) {
        return Jest.testAll("converts an integer to a string", {
                    hd: [
                      1,
                      "1"
                    ],
                    tl: {
                      hd: [
                        2,
                        "2"
                      ],
                      tl: {
                        hd: [
                          -3,
                          "-3"
                        ],
                        tl: /* [] */0
                      }
                    }
                  }, (function (param) {
                      return Jest.Expect.toBe(param[1], Jest.Expect.expect(Ley_Int$OptolithClient.show(param[0])));
                    }));
      }));

Jest.describe("unsafeRead", (function (param) {
        Jest.test("parses a string as an integer", (function (param) {
                return Jest.Expect.toBe(-6, Jest.Expect.expect(Ley_Int$OptolithClient.unsafeRead("-6")));
              }));
        return Jest.test("throws if string representation is invalid", (function (param) {
                      return Jest.Expect.toThrow(Jest.Expect.expect(function (param) {
                                      return Ley_Int$OptolithClient.unsafeRead("--6");
                                    }));
                    }));
      }));

Jest.describe("readOption", (function (param) {
        Jest.test("parses a string as an integer", (function (param) {
                return Jest.Expect.toEqual(-6, Jest.Expect.expect(Ley_Int$OptolithClient.readOption("-6")));
              }));
        return Jest.test("returns None if string representation is invalid", (function (param) {
                      return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Ley_Int$OptolithClient.readOption("--6")));
                    }));
      }));

/*  Not a pure module */
