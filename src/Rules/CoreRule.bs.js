// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Decoder$OptolithClient from "../Utilities/Decoder.bs.js";
import * as Erratum$OptolithClient from "../Sources/Erratum.bs.js";
import * as JsonStrict$OptolithClient from "../Misc/JsonStrict.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as PublicationRef$OptolithClient from "../Sources/PublicationRef.bs.js";
import * as TranslationMap$OptolithClient from "../Misc/TranslationMap.bs.js";

function contentList(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "Advantages" :
                      return /* Advantages */6;
                  case "Archetypes" :
                      return /* Archetypes */2;
                  case "Armors" :
                      return /* Armors */29;
                  case "Blessings" :
                      return /* Blessings */16;
                  case "Cantrips" :
                      return /* Cantrips */14;
                  case "CombatTechniques" :
                      return /* CombatTechniques */10;
                  case "Conditions" :
                      return /* Conditions */0;
                  case "Creatures" :
                      return /* Creatures */23;
                  case "Cultures" :
                      return /* Cultures */4;
                  case "Curses" :
                      return /* Curses */11;
                  case "Disadvantages" :
                      return /* Disadvantages */7;
                  case "Diseases" :
                      return /* Diseases */19;
                  case "DominationRituals" :
                      return /* DominationRituals */13;
                  case "Elixirs" :
                      return /* Elixirs */24;
                  case "ElvenMagicalSongs" :
                      return /* ElvenMagicalSongs */12;
                  case "Equipment" :
                      return /* Equipment */30;
                  case "EquipmentPackages" :
                      return /* EquipmentPackages */26;
                  case "FocusRules" :
                      return /* FocusRules */21;
                  case "LiturgicalChants" :
                      return /* LiturgicalChants */17;
                  case "MeleeWeapons" :
                      return /* MeleeWeapons */27;
                  case "OptionalRules" :
                      return /* OptionalRules */22;
                  case "Plants" :
                      return /* Plants */20;
                  case "Poisons" :
                      return /* Poisons */18;
                  case "Professions" :
                      return /* Professions */5;
                  case "Races" :
                      return /* Races */3;
                  case "RangedWeapons" :
                      return /* RangedWeapons */28;
                  case "Receipes" :
                      return /* Receipes */25;
                  case "Skills" :
                      return /* Skills */8;
                  case "SpecialAbilities" :
                      return /* SpecialAbilities */9;
                  case "Spells" :
                      return /* Spells */15;
                  case "States" :
                      return /* States */1;
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown content list: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

function contentSingle(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "Advantage" :
                      return /* Advantage */6;
                  case "Archetype" :
                      return /* Archetype */2;
                  case "Blessing" :
                      return /* Blessing */16;
                  case "Cantrip" :
                      return /* Cantrip */14;
                  case "CombatTechnique" :
                      return /* CombatTechnique */10;
                  case "Condition" :
                      return /* Condition */0;
                  case "Creature" :
                      return /* Creature */23;
                  case "Culture" :
                      return /* Culture */4;
                  case "Curse" :
                      return /* Curse */11;
                  case "Disadvantage" :
                      return /* Disadvantage */7;
                  case "Disease" :
                      return /* Disease */19;
                  case "DominationRitual" :
                      return /* DominationRitual */13;
                  case "Elixir" :
                      return /* Elixir */24;
                  case "ElvenMagicalSong" :
                      return /* ElvenMagicalSong */12;
                  case "EquipmentPackage" :
                      return /* EquipmentPackage */26;
                  case "FocusRule" :
                      return /* FocusRule */21;
                  case "Item" :
                      return /* Item */27;
                  case "LiturgicalChant" :
                      return /* LiturgicalChant */17;
                  case "OptionalRule" :
                      return /* OptionalRule */22;
                  case "Plant" :
                      return /* Plant */20;
                  case "Poison" :
                      return /* Poison */18;
                  case "Profession" :
                      return /* Profession */5;
                  case "Race" :
                      return /* Race */3;
                  case "Receipe" :
                      return /* Receipe */25;
                  case "Skill" :
                      return /* Skill */8;
                  case "SpecialAbility" :
                      return /* SpecialAbility */9;
                  case "Spell" :
                      return /* Spell */15;
                  case "State" :
                      return /* State */1;
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown content list: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

function nodeType(param) {
  return JsonStrict$OptolithClient.andThen((function (str) {
                switch (str) {
                  case "ListChild" :
                      return function (param) {
                        return JsonStrict$OptolithClient.field("value", (function (json) {
                                      return {
                                              TAG: /* ListChild */1,
                                              entryType: JsonStrict$OptolithClient.field("entryType", contentList, json),
                                              entryGroup: JsonStrict$OptolithClient.optionalField("entryGroup", JsonStrict$OptolithClient.$$int, json)
                                            };
                                    }), param);
                      };
                  case "Parent" :
                      return function (param) {
                        return JsonStrict$OptolithClient.field("value", (function (json) {
                                      return {
                                              TAG: /* Parent */0,
                                              _0: JsonStrict$OptolithClient.field("children", (function (param) {
                                                      return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                                                    }), json)
                                            };
                                    }), param);
                      };
                  case "SimpleChild" :
                      return function (param) {
                        return /* SimpleChild */0;
                      };
                  case "SingleChild" :
                      return function (param) {
                        return JsonStrict$OptolithClient.field("value", (function (json) {
                                      return {
                                              TAG: /* SingleChild */2,
                                              entryType: JsonStrict$OptolithClient.field("entryType", contentSingle, json),
                                              entryId: JsonStrict$OptolithClient.field("entryId", JsonStrict$OptolithClient.$$int, json)
                                            };
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: JsonStrict$OptolithClient.DecodeError,
                          _1: "Unknown node type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return JsonStrict$OptolithClient.field("type", JsonStrict$OptolithClient.string, param);
              }), param);
}

function t(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          description: JsonStrict$OptolithClient.field("description", JsonStrict$OptolithClient.string, json),
          errata: JsonStrict$OptolithClient.optionalField("errata", Erratum$OptolithClient.Decode.list, json)
        };
}

var Translation = {
  t: t
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function multilingual(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          nodeType: Json_decode.field("typeSpecific", nodeType, json),
          src: Json_decode.field("src", PublicationRef$OptolithClient.Decode.multilingualList, json),
          translations: Json_decode.field("translations", TranslationMap.Decode.t, json)
        };
}

function resolveTranslations(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        description: translation.description,
                        nodeType: x.nodeType,
                        src: PublicationRef$OptolithClient.Decode.resolveTranslationsList(langs, x.src),
                        errata: Ley_Option$OptolithClient.fromOption(/* [] */0, translation.errata)
                      };
              }));
}

function t$1(langs, json) {
  return resolveTranslations(langs, multilingual(json));
}

function toAssoc(x) {
  return [
          x.id,
          x
        ];
}

function assoc(param, param$1) {
  return Decoder$OptolithClient.decodeAssoc(t$1, toAssoc, param, param$1);
}

var Decode = {
  contentList: contentList,
  contentSingle: contentSingle,
  nodeType: nodeType,
  Translation: Translation,
  TranslationMap: TranslationMap,
  multilingual: multilingual,
  resolveTranslations: resolveTranslations,
  t: t$1,
  toAssoc: toAssoc,
  assoc: assoc
};

export {
  Decode ,
  
}
/* TranslationMap Not a pure module */
