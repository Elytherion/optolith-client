// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var OneOrMany$OptolithClient = require("../Utilities/OneOrMany.bs.js");
var JsonStrict$OptolithClient = require("../Misc/JsonStrict.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var TranslationMap$OptolithClient = require("../Misc/TranslationMap.bs.js");

var partial_arg = OneOrMany$OptolithClient.Decode.t(function (json) {
      var first = JsonStrict$OptolithClient.field("firstPage", JsonStrict$OptolithClient.$$int, json);
      var maybeLast = JsonStrict$OptolithClient.optionalField("lastPage", JsonStrict$OptolithClient.$$int, json);
      return Ley_Option$OptolithClient.option({
                  TAG: /* Single */0,
                  _0: first
                }, (function (last) {
                    return {
                            TAG: /* Range */1,
                            _0: first,
                            _1: last
                          };
                  }), maybeLast);
    });

function t(param) {
  return JsonStrict$OptolithClient.map((function (x) {
                if (x.TAG) {
                  return x._0;
                } else {
                  return {
                          hd: x._0,
                          tl: /* [] */0
                        };
                }
              }), partial_arg, param);
}

var Translation = {
  t: t
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function multilingual(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          occurrences: Json_decode.field("occurrences", TranslationMap.Decode.t, json)
        };
}

function multilingualList(param) {
  return Json_decode.list(multilingual, param);
}

function resolveTranslationsList(langs, xs) {
  return Ley_Option$OptolithClient.mapOption((function (param) {
                return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, param.occurrences), (function (occurrences) {
                              return {
                                      id: param.id,
                                      occurrences: occurrences
                                    };
                            }));
              }), xs);
}

var Decode = {
  multilingualList: multilingualList,
  resolveTranslationsList: resolveTranslationsList
};

exports.Decode = Decode;
/* partial_arg Not a pure module */
