// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Skills$OptolithClient = require("./Skills.bs.js");
var Ley_Int$OptolithClient = require("../Data/Ley_Int.bs.js");
var Ley_List$OptolithClient = require("../Data/Ley_List.bs.js");
var Ley_IntMap$OptolithClient = require("../Data/Ley_IntMap.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var Dependencies$OptolithClient = require("../Prerequisites/Dependencies.bs.js");
var Ley_Function$OptolithClient = require("../Data/Ley_Function.bs.js");
var ActivatableSkill$OptolithClient = require("./ActivatableSkill.bs.js");
var Activatable_SelectOptions$OptolithClient = require("../Activatable/Activatable_SelectOptions.bs.js");

function getMaxSrFromPropertyKnowledge(propertyKnowledge, staticEntry) {
  var hasRestriction = Ley_Option$OptolithClient.option(true, Curry._1(Ley_List$OptolithClient.notElem, staticEntry.property), Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, propertyKnowledge, (function (param) {
              return Activatable_SelectOptions$OptolithClient.mapActiveOptions1((function (param) {
                            if (param.TAG) {
                              return ;
                            }
                            var id = param._0;
                            if (id.TAG) {
                              return ;
                            } else {
                              return id._0;
                            }
                          }), param);
            })));
  if (hasRestriction) {
    return 14;
  }
  
}

function getMax(startEl, phase, heroAttrs, exceptionalSkill, propertyKnowledge, staticEntry) {
  return Skills$OptolithClient.getExceptionalSkillBonus(exceptionalSkill, {
              TAG: /* Spell */3,
              _0: staticEntry.id
            }) + Curry._1(Ley_List$OptolithClient.minimum, Ley_Option$OptolithClient.catOptions({
                  hd: Skills$OptolithClient.getMaxSrByCheckAttrs(heroAttrs, staticEntry.check),
                  tl: {
                    hd: Skills$OptolithClient.getMaxSrFromEl(startEl, phase),
                    tl: {
                      hd: getMaxSrFromPropertyKnowledge(propertyKnowledge, staticEntry),
                      tl: /* [] */0
                    }
                  }
                })) | 0;
}

function isIncreasable(startEl, phase, heroAttrs, exceptionalSkill, propertyKnowledge, staticEntry, heroEntry) {
  return ActivatableSkill$OptolithClient.Dynamic.valueToInt(heroEntry.value) < getMax(startEl, phase, heroAttrs, exceptionalSkill, propertyKnowledge, staticEntry);
}

function isOnMinimum(spell) {
  var value = spell.value;
  if (value) {
    return value._0 >= 10;
  } else {
    return false;
  }
}

function addToCounter(spell) {
  return Curry._3(Ley_IntMap$OptolithClient.insertWith, (function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), spell.property, 1);
}

function countApplicable(staticSpells, heroSpells) {
  return Curry._3(Ley_IntMap$OptolithClient.foldrWithKey, (function (spellId, spell) {
                if (isOnMinimum(spell)) {
                  return Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, addToCounter, Curry._2(Ley_IntMap$OptolithClient.lookup, spellId, staticSpells));
                } else {
                  return Ley_Function$OptolithClient.id;
                }
              }), Ley_IntMap$OptolithClient.empty, heroSpells);
}

var counterToAvailable = Curry._2(Ley_IntMap$OptolithClient.foldrWithKey, (function (propertyId, count) {
        if (count >= 3) {
          return function (param) {
            return Ley_List$OptolithClient.cons(propertyId, param);
          };
        } else {
          return Ley_Function$OptolithClient.id;
        }
      }), /* [] */0);

function getAvailableProperties(staticSpells, heroSpells) {
  return Curry._1(counterToAvailable, countApplicable(staticSpells, heroSpells));
}

function getMinSr(counter, activePropertyKnowledges, staticEntry, heroEntry) {
  var hasActivePropertyKnowledge = Curry._2(Ley_List$OptolithClient.any, (function (sid) {
          if (sid.TAG) {
            return false;
          }
          var x = sid._0;
          if (x.TAG) {
            return false;
          } else {
            return x._0 === staticEntry.property;
          }
        }), activePropertyKnowledges);
  if (hasActivePropertyKnowledge) {
    return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_IntMap$OptolithClient.lookup, staticEntry.property, counter), (function (count) {
                  if (ActivatableSkill$OptolithClient.Dynamic.valueToInt(heroEntry.value) >= 10 && count <= 3) {
                    return 10;
                  }
                  
                }));
  }
  
}

function getMinSrByDeps(heroSpells, heroEntry) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Dependencies$OptolithClient.Flatten.flattenActivatableSkillDependencies((function (id) {
                        return ActivatableSkill$OptolithClient.Dynamic.getValueDef(Curry._2(Ley_IntMap$OptolithClient.lookup, id, heroSpells));
                      }), heroEntry.id, heroEntry.dependencies)), Curry._2(Ley_List$OptolithClient.foldr, (function (d, acc) {
                    return Ley_Option$OptolithClient.option(d, (function (prev) {
                                  return Ley_Int$OptolithClient.max(prev, d);
                                }), acc);
                  }), undefined));
}

function getMin(propertyKnowledge, staticSpells, heroSpells) {
  var counter = countApplicable(staticSpells, heroSpells);
  var activePropertyKnowledges = Activatable_SelectOptions$OptolithClient.getActiveOptions1(propertyKnowledge);
  return function (staticEntry, heroEntry) {
    return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Ley_Option$OptolithClient.catOptions({
                        hd: getMinSrByDeps(heroSpells, heroEntry),
                        tl: {
                          hd: getMinSr(counter, activePropertyKnowledges, staticEntry, heroEntry),
                          tl: /* [] */0
                        }
                      })), Ley_List$OptolithClient.maximum);
  };
}

function isDecreasable(propertyKnowledge, staticSpells, heroSpells) {
  var getMinCached = getMin(propertyKnowledge, staticSpells, heroSpells);
  return function (staticEntry, heroEntry) {
    return ActivatableSkill$OptolithClient.Dynamic.valueToInt(heroEntry.value) > Ley_Option$OptolithClient.fromOption(0, Curry._2(getMinCached, staticEntry, heroEntry));
  };
}

var PropertyKnowledge = {
  getAvailableProperties: getAvailableProperties
};

exports.getMax = getMax;
exports.isIncreasable = isIncreasable;
exports.getMin = getMin;
exports.isDecreasable = isDecreasable;
exports.PropertyKnowledge = PropertyKnowledge;
/* counterToAvailable Not a pure module */
