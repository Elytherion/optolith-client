// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Skills$OptolithClient = require("./Skills.bs.js");
var Ley_Int$OptolithClient = require("../Data/Ley_Int.bs.js");
var Ley_List$OptolithClient = require("../Data/Ley_List.bs.js");
var Ley_IntMap$OptolithClient = require("../Data/Ley_IntMap.bs.js");
var Ley_IntSet$OptolithClient = require("../Data/Ley_IntSet.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var Dependencies$OptolithClient = require("../Prerequisites/Dependencies.bs.js");
var Ley_Function$OptolithClient = require("../Data/Ley_Function.bs.js");
var ActivatableSkill$OptolithClient = require("./ActivatableSkill.bs.js");
var Activatable_SelectOptions$OptolithClient = require("../Activatable/Activatable_SelectOptions.bs.js");

function getMaxSrFromAspectKnowledge(aspectKnowledge, staticEntry) {
  var hasRestriction = Ley_Option$OptolithClient.option(true, (function (actives) {
          return Curry._2(Ley_IntSet$OptolithClient.all, (function (aspect) {
                        return Curry._2(Ley_List$OptolithClient.notElem, {
                                    TAG: /* Preset */0,
                                    _0: {
                                      TAG: /* Generic */0,
                                      _0: aspect
                                    }
                                  }, actives);
                      }), staticEntry.aspects);
        }), Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, aspectKnowledge, Activatable_SelectOptions$OptolithClient.getActiveOptions1));
  if (hasRestriction) {
    return 14;
  }
  
}

function getMax(startEl, phase, heroAttrs, exceptionalSkill, aspectKnowledge, staticEntry) {
  return Skills$OptolithClient.getExceptionalSkillBonus(exceptionalSkill, {
              TAG: /* LiturgicalChant */5,
              _0: staticEntry.id
            }) + Curry._1(Ley_List$OptolithClient.minimum, Ley_Option$OptolithClient.catOptions({
                  hd: Skills$OptolithClient.getMaxSrByCheckAttrs(heroAttrs, staticEntry.check),
                  tl: {
                    hd: Skills$OptolithClient.getMaxSrFromEl(startEl, phase),
                    tl: {
                      hd: getMaxSrFromAspectKnowledge(aspectKnowledge, staticEntry),
                      tl: /* [] */0
                    }
                  }
                })) | 0;
}

function isIncreasable(startEl, phase, heroAttrs, exceptionalSkill, aspectKnowledge, staticEntry, heroEntry) {
  return ActivatableSkill$OptolithClient.Dynamic.valueToInt(heroEntry.value) < getMax(startEl, phase, heroAttrs, exceptionalSkill, aspectKnowledge, staticEntry);
}

function isOnMinimum(spell) {
  var value = spell.value;
  if (value) {
    return value._0 >= 10;
  } else {
    return false;
  }
}

function addToCounter(chant, counter) {
  return Curry._3(Ley_IntSet$OptolithClient.foldr, (function (aspect) {
                return Curry._3(Ley_IntMap$OptolithClient.insertWith, (function (prim, prim$1) {
                              return prim + prim$1 | 0;
                            }), aspect, 1);
              }), counter, chant.aspects);
}

function countApplicable(staticChants, heroChants) {
  return Curry._3(Ley_IntMap$OptolithClient.foldrWithKey, (function (chantId, chant) {
                if (isOnMinimum(chant)) {
                  return Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, addToCounter, Curry._2(Ley_IntMap$OptolithClient.lookup, chantId, staticChants));
                } else {
                  return Ley_Function$OptolithClient.id;
                }
              }), Ley_IntMap$OptolithClient.empty, heroChants);
}

var counterToAvailable = Curry._2(Ley_IntMap$OptolithClient.foldrWithKey, (function (aspectId, count) {
        if (count >= 3) {
          return function (param) {
            return Ley_List$OptolithClient.cons(aspectId, param);
          };
        } else {
          return Ley_Function$OptolithClient.id;
        }
      }), /* [] */0);

function getAvailableAspects(staticChants, heroChants) {
  return Curry._1(counterToAvailable, countApplicable(staticChants, heroChants));
}

function getMinSr(counter, activeAspectKnowledges, staticEntry, heroEntry) {
  var hasActiveAspectKnowledge = Curry._2(Ley_List$OptolithClient.any, (function (sid) {
          if (sid.TAG) {
            return false;
          }
          var x = sid._0;
          if (x.TAG) {
            return false;
          } else {
            return Curry._2(Ley_IntSet$OptolithClient.elem, x._0, staticEntry.aspects);
          }
        }), activeAspectKnowledges);
  if (!hasActiveAspectKnowledge) {
    return ;
  }
  var isRequired = Curry._2(Ley_IntSet$OptolithClient.any, (function (aspect) {
          return Ley_Option$OptolithClient.option(false, (function (count) {
                        if (ActivatableSkill$OptolithClient.Dynamic.valueToInt(heroEntry.value) >= 10) {
                          return count <= 3;
                        } else {
                          return false;
                        }
                      }), Curry._2(Ley_IntMap$OptolithClient.lookup, aspect, counter));
        }), staticEntry.aspects);
  if (isRequired) {
    return 10;
  }
  
}

function getMinSrByDeps(heroLiturgicalChants, heroEntry) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Dependencies$OptolithClient.Flatten.flattenActivatableSkillDependencies((function (id) {
                        return ActivatableSkill$OptolithClient.Dynamic.getValueDef(Curry._2(Ley_IntMap$OptolithClient.lookup, id, heroLiturgicalChants));
                      }), heroEntry.id, heroEntry.dependencies)), Curry._2(Ley_List$OptolithClient.foldr, (function (d, acc) {
                    return Ley_Option$OptolithClient.option(d, (function (prev) {
                                  return Ley_Int$OptolithClient.max(prev, d);
                                }), acc);
                  }), undefined));
}

function getMin(aspectKnowledge, staticLiturgicalChants, heroLiturgicalChants) {
  var counter = countApplicable(staticLiturgicalChants, heroLiturgicalChants);
  var activeAspectKnowledges = Activatable_SelectOptions$OptolithClient.getActiveOptions1(aspectKnowledge);
  return function (staticEntry, heroEntry) {
    return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Ley_Option$OptolithClient.catOptions({
                        hd: getMinSrByDeps(heroLiturgicalChants, heroEntry),
                        tl: {
                          hd: getMinSr(counter, activeAspectKnowledges, staticEntry, heroEntry),
                          tl: /* [] */0
                        }
                      })), Ley_List$OptolithClient.maximum);
  };
}

function isDecreasable(aspectKnowledge, staticLiturgicalChants, heroLiturgicalChants) {
  var getMinCached = getMin(aspectKnowledge, staticLiturgicalChants, heroLiturgicalChants);
  return function (staticEntry, heroEntry) {
    return ActivatableSkill$OptolithClient.Dynamic.valueToInt(heroEntry.value) > Ley_Option$OptolithClient.fromOption(0, Curry._2(getMinCached, staticEntry, heroEntry));
  };
}

var AspectKnowledge = {
  getAvailableAspects: getAvailableAspects
};

exports.getMax = getMax;
exports.isIncreasable = isIncreasable;
exports.getMin = getMin;
exports.isDecreasable = isDecreasable;
exports.AspectKnowledge = AspectKnowledge;
/* counterToAvailable Not a pure module */
