// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var IC$OptolithClient = require("./IC.bs.js");
var Decoder$OptolithClient = require("../Utilities/Decoder.bs.js");
var Erratum$OptolithClient = require("../Sources/Erratum.bs.js");
var JsonStrict$OptolithClient = require("../Misc/JsonStrict.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var SkillCheck$OptolithClient = require("./SkillCheck.bs.js");
var CheckModifier$OptolithClient = require("./CheckModifier.bs.js");
var PublicationRef$OptolithClient = require("../Sources/PublicationRef.bs.js");
var TranslationMap$OptolithClient = require("../Misc/TranslationMap.bs.js");
var ActivatableSkill$OptolithClient = require("./ActivatableSkill.bs.js");

function t(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          effect: JsonStrict$OptolithClient.field("effect", JsonStrict$OptolithClient.string, json),
          castingTime: JsonStrict$OptolithClient.field("castingTime", ActivatableSkill$OptolithClient.MainParameter.decode, json),
          cost: JsonStrict$OptolithClient.field("cost", ActivatableSkill$OptolithClient.MainParameter.decode, json),
          range: JsonStrict$OptolithClient.field("range", ActivatableSkill$OptolithClient.MainParameter.decode, json),
          duration: JsonStrict$OptolithClient.field("duration", ActivatableSkill$OptolithClient.MainParameter.decode, json),
          target: JsonStrict$OptolithClient.field("target", JsonStrict$OptolithClient.string, json),
          errata: JsonStrict$OptolithClient.optionalField("errata", Erratum$OptolithClient.Decode.list, json)
        };
}

var Translation = {
  t: t
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function multilingual(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          check: JsonStrict$OptolithClient.field("check", SkillCheck$OptolithClient.Decode.t, json),
          checkMod: JsonStrict$OptolithClient.optionalField("checkMod", CheckModifier$OptolithClient.Decode.t, json),
          property: JsonStrict$OptolithClient.field("property", JsonStrict$OptolithClient.$$int, json),
          ic: JsonStrict$OptolithClient.field("ic", IC$OptolithClient.Decode.t, json),
          src: JsonStrict$OptolithClient.field("src", PublicationRef$OptolithClient.Decode.multilingualList, json),
          translations: JsonStrict$OptolithClient.field("translations", TranslationMap.Decode.t, json)
        };
}

function t$1(langs, json) {
  var x = multilingual(json);
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        check: x.check,
                        checkMod: x.checkMod,
                        effect: translation.effect,
                        castingTime: ActivatableSkill$OptolithClient.MainParameter.make(false, translation.castingTime),
                        cost: ActivatableSkill$OptolithClient.MainParameter.make(false, translation.cost),
                        range: ActivatableSkill$OptolithClient.MainParameter.make(false, translation.range),
                        duration: ActivatableSkill$OptolithClient.MainParameter.make(false, translation.duration),
                        target: translation.target,
                        property: x.property,
                        ic: x.ic,
                        src: PublicationRef$OptolithClient.Decode.resolveTranslationsList(langs, x.src),
                        errata: Ley_Option$OptolithClient.fromOption(/* [] */0, translation.errata)
                      };
              }));
}

function toAssoc(x) {
  return [
          x.id,
          x
        ];
}

function assoc(param, param$1) {
  return Decoder$OptolithClient.decodeAssoc(t$1, toAssoc, param, param$1);
}

var Dynamic = ActivatableSkill$OptolithClient.Dynamic;

var Static = {
  Decode: {
    assoc: assoc
  }
};

exports.Dynamic = Dynamic;
exports.Static = Static;
/* TranslationMap Not a pure module */
