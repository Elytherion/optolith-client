// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Erratum$OptolithClient = require("../Sources/Erratum.bs.js");
var Ley_Int$OptolithClient = require("../Data/Ley_Int.bs.js");
var JsonStrict$OptolithClient = require("../Misc/JsonStrict.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var PublicationRef$OptolithClient = require("../Sources/PublicationRef.bs.js");
var TranslationMap$OptolithClient = require("../Misc/TranslationMap.bs.js");

function t(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          effect: JsonStrict$OptolithClient.field("effect", JsonStrict$OptolithClient.string, json)
        };
}

var LevelTranslation = {
  t: t
};

var LevelTranslationMap = TranslationMap$OptolithClient.Make(LevelTranslation);

function multilingual(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          translations: JsonStrict$OptolithClient.field("translations", LevelTranslationMap.Decode.t, json)
        };
}

function resolveTranslations(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(LevelTranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        effect: translation.effect
                      };
              }));
}

function prerequisite(json) {
  var x = JsonStrict$OptolithClient.$$int(json);
  if (x === 1) {
    return 1;
  }
  throw {
        RE_EXN_ID: JsonStrict$OptolithClient.DecodeError,
        _1: "Unknown level 2 prerequisite: " + Ley_Int$OptolithClient.show(x),
        Error: new Error()
      };
}

function multilingual$1(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          requiresLevel1: Ley_Option$OptolithClient.isSome(JsonStrict$OptolithClient.optionalField("previousRequirement", prerequisite, json)),
          translations: JsonStrict$OptolithClient.field("translations", LevelTranslationMap.Decode.t, json)
        };
}

function resolveTranslations$1(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(LevelTranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        effect: translation.effect,
                        requiresLevel1: x.requiresLevel1
                      };
              }));
}

function prerequisite$1(json) {
  var x = JsonStrict$OptolithClient.$$int(json);
  if (x === 1) {
    return /* First */0;
  }
  if (x === 2) {
    return /* Second */1;
  }
  throw {
        RE_EXN_ID: JsonStrict$OptolithClient.DecodeError,
        _1: "Unknown level 3 prerequisite: " + Ley_Int$OptolithClient.show(x),
        Error: new Error()
      };
}

function multilingual$2(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          requiresPrevious: JsonStrict$OptolithClient.optionalField("previousRequirement", prerequisite$1, json),
          translations: JsonStrict$OptolithClient.field("translations", LevelTranslationMap.Decode.t, json)
        };
}

function resolveTranslations$2(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(LevelTranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        effect: translation.effect,
                        requiresPrevious: x.requiresPrevious
                      };
              }));
}

function t$1(json) {
  return {
          errata: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("errata", Erratum$OptolithClient.Decode.list, json))
        };
}

var Translation = {
  t: t$1
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function multilingual$3(json) {
  return {
          levels: JsonStrict$OptolithClient.field("levels", (function (param) {
                  return JsonStrict$OptolithClient.tuple3(multilingual, multilingual$1, multilingual$2, param);
                }), json),
          src: JsonStrict$OptolithClient.field("src", PublicationRef$OptolithClient.Decode.multilingualList, json),
          translations: JsonStrict$OptolithClient.field("translations", TranslationMap.Decode.t, json)
        };
}

function resolveTranslations$3(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                var match = x.levels;
                return Curry._4(Ley_Option$OptolithClient.liftM3, (function (level1, level2, level3) {
                              return {
                                      levels: [
                                        level1,
                                        level2,
                                        level3
                                      ],
                                      src: PublicationRef$OptolithClient.Decode.resolveTranslationsList(langs, x.src),
                                      errata: translation.errata
                                    };
                            }), resolveTranslations(langs, match[0]), resolveTranslations$1(langs, match[1]), resolveTranslations$2(langs, match[2]));
              }));
}

var Level1 = {};

var Level2 = {};

var Level3 = {};

var Decode = {
  multilingual: multilingual$3,
  resolveTranslations: resolveTranslations$3
};

exports.Level1 = Level1;
exports.Level2 = Level2;
exports.Level3 = Level3;
exports.Decode = Decode;
/* LevelTranslationMap Not a pure module */
