// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as IC$OptolithClient from "./IC.bs.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as SelectOption$OptolithClient from "../Activatable/SelectOption.bs.js";

function getSingle(target, targetId, targetName, level, id, name, cost, description, prerequisites, src, errata) {
  return {
          id: [
            /* Generic */0,
            id
          ],
          name: targetName + (": " + name),
          apValue: cost,
          prerequisites: prerequisites,
          description: description,
          isSecret: undefined,
          languages: undefined,
          continent: undefined,
          isExtinct: undefined,
          specializations: undefined,
          specializationInput: undefined,
          animalGr: undefined,
          animalLevel: undefined,
          enhancementTarget: targetId,
          enhancementLevel: level,
          staticEntry: target,
          applications: undefined,
          src: src,
          errata: errata
        };
}

function getAllFromObject(target, targetId, targetName, targetIC, param) {
  var errata = param.errata;
  var src = param.src;
  var match = param.levels;
  var level3 = match[2];
  var level2 = match[1];
  var level1 = match[0];
  var match$1 = level3.requiresPrevious;
  return {
          hd: getSingle(target, targetId, targetName, 1, level1.id, level1.name, IC$OptolithClient.getAPForActivatation(targetIC), level1.effect, {
                TAG: /* Plain */0,
                _0: /* [] */0
              }, src, errata),
          tl: {
            hd: getSingle(target, targetId, targetName, 2, level2.id, level2.name, (IC$OptolithClient.getAPForActivatation(targetIC) << 1), level2.effect, {
                  TAG: /* Plain */0,
                  _0: level2.requiresLevel1 ? ({
                        hd: {
                          value: {
                            TAG: /* Activatable */6,
                            _0: {
                              id: [
                                /* SpecialAbility */2,
                                Id$OptolithClient.SpecialAbility.toInt(/* SpellEnhancement */25)
                              ],
                              active: true,
                              options: {
                                hd: [
                                  /* Generic */0,
                                  level1.id
                                ],
                                tl: /* [] */0
                              },
                              level: undefined
                            }
                          },
                          displayOption: /* Generate */0
                        },
                        tl: /* [] */0
                      }) : /* [] */0
                }, src, errata),
            tl: {
              hd: getSingle(target, targetId, targetName, 3, level3.id, level3.name, Math.imul(IC$OptolithClient.getAPForActivatation(targetIC), 3), level3.effect, match$1 !== undefined ? (
                      match$1 ? ({
                            TAG: /* Plain */0,
                            _0: {
                              hd: {
                                value: {
                                  TAG: /* Activatable */6,
                                  _0: {
                                    id: [
                                      /* SpecialAbility */2,
                                      Id$OptolithClient.SpecialAbility.toInt(/* SpellEnhancement */25)
                                    ],
                                    active: true,
                                    options: {
                                      hd: [
                                        /* Generic */0,
                                        level2.id
                                      ],
                                      tl: /* [] */0
                                    },
                                    level: undefined
                                  }
                                },
                                displayOption: /* Generate */0
                              },
                              tl: /* [] */0
                            }
                          }) : ({
                            TAG: /* Plain */0,
                            _0: {
                              hd: {
                                value: {
                                  TAG: /* Activatable */6,
                                  _0: {
                                    id: [
                                      /* SpecialAbility */2,
                                      Id$OptolithClient.SpecialAbility.toInt(/* SpellEnhancement */25)
                                    ],
                                    active: true,
                                    options: {
                                      hd: [
                                        /* Generic */0,
                                        level1.id
                                      ],
                                      tl: /* [] */0
                                    },
                                    level: undefined
                                  }
                                },
                                displayOption: /* Generate */0
                              },
                              tl: /* [] */0
                            }
                          })
                    ) : ({
                        TAG: /* Plain */0,
                        _0: /* [] */0
                      }), src, errata),
              tl: /* [] */0
            }
          }
        };
}

function toSpecialAbilityOptions(getTarget, getId, getName, getEnhancements, getIC, xs) {
  return Curry._3(Ley_IntMap$OptolithClient.foldr, (function (x) {
                return Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, (function (enhancements) {
                              var partial_arg = getAllFromObject(Curry._1(getTarget, x), Curry._1(getId, x), Curry._1(getName, x), Curry._1(getIC, x), enhancements);
                              var partial_arg$1 = Curry._1(Ley_List$OptolithClient.foldr, (function (selectOption) {
                                      return Curry._2(SelectOption$OptolithClient.$$Map.insert, selectOption.id, selectOption);
                                    }));
                              return function (param) {
                                return Ley_Function$OptolithClient.flip(partial_arg$1, partial_arg, param);
                              };
                            }), Curry._1(getEnhancements, x));
              }), SelectOption$OptolithClient.$$Map.empty, xs);
}

function spellsToSpecialAbilityOptions(param) {
  return toSpecialAbilityOptions((function (x) {
                return {
                        TAG: /* Spell */5,
                        _0: x
                      };
              }), (function (x) {
                return x.id;
              }), (function (x) {
                return x.name;
              }), (function (x) {
                return x.enhancements;
              }), (function (x) {
                return x.ic;
              }), param);
}

function liturgicalChantsToSpecialAbilityOptions(param) {
  return toSpecialAbilityOptions((function (x) {
                return {
                        TAG: /* LiturgicalChant */3,
                        _0: x
                      };
              }), (function (x) {
                return x.id;
              }), (function (x) {
                return x.name;
              }), (function (x) {
                return x.enhancements;
              }), (function (x) {
                return x.ic;
              }), param);
}

export {
  spellsToSpecialAbilityOptions ,
  liturgicalChantsToSpecialAbilityOptions ,
  
}
/* Ley_List-OptolithClient Not a pure module */
