// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Id$OptolithClient = require("../Misc/Id.bs.js");
var Skill$OptolithClient = require("./Skill.bs.js");
var Ley_Int$OptolithClient = require("../Data/Ley_Int.bs.js");
var Ley_List$OptolithClient = require("../Data/Ley_List.bs.js");
var Ley_IntMap$OptolithClient = require("../Data/Ley_IntMap.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var SkillCheck$OptolithClient = require("./SkillCheck.bs.js");
var Dependencies$OptolithClient = require("../Prerequisites/Dependencies.bs.js");
var Activatable_Accessors$OptolithClient = require("../Activatable/Activatable_Accessors.bs.js");

function getExceptionalSkillBonus(exceptionalSkill, id) {
  return Ley_Option$OptolithClient.option(0, (function (x) {
                return Ley_List$OptolithClient.countBy((function (a) {
                              return Curry._2(Ley_Option$OptolithClient.elem, {
                                          TAG: /* Preset */0,
                                          _0: id
                                        }, Ley_Option$OptolithClient.listToOption(a.options));
                            }), x.active);
              }), exceptionalSkill);
}

function getMaxSrByCheckAttrs(mp, check) {
  var param = SkillCheck$OptolithClient.getValues(mp, check);
  return Curry._1(Ley_List$OptolithClient.maximum, {
              hd: param[0],
              tl: {
                hd: param[1],
                tl: {
                  hd: param[2],
                  tl: /* [] */0
                }
              }
            }) + 2 | 0;
}

function getMaxSrFromEl(startEl, phase) {
  if (phase >= 2) {
    return ;
  } else {
    return startEl.maxSkillRating;
  }
}

function getMax(startEl, phase, heroAttrs, exceptionalSkill, staticEntry) {
  return getExceptionalSkillBonus(exceptionalSkill, {
              TAG: /* Skill */1,
              _0: staticEntry.id
            }) + Curry._1(Ley_List$OptolithClient.minimum, Ley_Option$OptolithClient.catOptions({
                  hd: getMaxSrByCheckAttrs(heroAttrs, staticEntry.check),
                  tl: {
                    hd: getMaxSrFromEl(startEl, phase),
                    tl: /* [] */0
                  }
                })) | 0;
}

function isIncreasable(startEl, phase, heroAttrs, exceptionalSkill, staticEntry, heroEntry) {
  return heroEntry.value < getMax(startEl, phase, heroAttrs, exceptionalSkill, staticEntry);
}

function getMinSrByCraftInstruments(craftInstruments, skills, staticEntry) {
  var match = Id$OptolithClient.Skill.fromInt(staticEntry.id);
  if (typeof match !== "number") {
    return ;
  }
  if (match !== 50 && match !== 54) {
    return ;
  }
  if (!Activatable_Accessors$OptolithClient.isActiveM(craftInstruments)) {
    return ;
  }
  var otherSkillId;
  if (typeof match === "number") {
    if (match !== 50) {
      if (match !== 54) {
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Skills.re",
                91,
                10
              ],
              Error: new Error()
            };
      }
      otherSkillId = /* Woodworking */50;
    } else {
      otherSkillId = /* Metalworking */54;
    }
  } else {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Skills.re",
            91,
            10
          ],
          Error: new Error()
        };
  }
  var otherSkillRating = Curry._1(Skill$OptolithClient.Dynamic.getValueDef, Curry._2(Ley_IntMap$OptolithClient.lookup, Id$OptolithClient.Skill.toInt(otherSkillId), skills));
  return 12 - otherSkillRating | 0;
}

function getMinSrByDeps(heroSkills, heroEntry) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Dependencies$OptolithClient.Flatten.flattenSkillDependencies((function (id) {
                        return Curry._1(Skill$OptolithClient.Dynamic.getValueDef, Curry._2(Ley_IntMap$OptolithClient.lookup, id, heroSkills));
                      }), heroEntry.id, heroEntry.dependencies)), Ley_List$OptolithClient.maximum);
}

function getMin(craftInstruments, heroSkills, staticEntry, heroEntry) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Ley_Option$OptolithClient.catOptions({
                      hd: getMinSrByDeps(heroSkills, heroEntry),
                      tl: {
                        hd: getMinSrByCraftInstruments(craftInstruments, heroSkills, staticEntry),
                        tl: /* [] */0
                      }
                    })), Ley_List$OptolithClient.maximum);
}

function isDecreasable(craftInstruments, heroSkills, staticEntry, heroEntry) {
  return heroEntry.value > Ley_Option$OptolithClient.fromOption(0, getMin(craftInstruments, heroSkills, staticEntry, heroEntry));
}

function getMissingPoints(param) {
  return Curry._1(Ley_List$OptolithClient.sum, Curry._2(Ley_List$OptolithClient.map, (function (a) {
                    return Ley_Int$OptolithClient.max(0, 13 - a | 0);
                  }), {
                  hd: param[0],
                  tl: {
                    hd: param[1],
                    tl: {
                      hd: param[2],
                      tl: /* [] */0
                    }
                  }
                }));
}

function getBaseMinCheckMod(sr) {
  return (-Js_math.floor_int((sr - 1.0) / 3.0) | 0) + 3 | 0;
}

function getMinCheckModForRoutine(check, sr) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Ley_Option$OptolithClient.ensure((function (param) {
                    return 0 > param;
                  }), sr), (function (sr) {
                var missingPoints = getMissingPoints(check);
                var checkModThreshold = getBaseMinCheckMod(sr);
                var dependentCheckMod = checkModThreshold + missingPoints | 0;
                if (dependentCheckMod < 4) {
                  return [
                          dependentCheckMod,
                          missingPoints > 0
                        ];
                }
                
              }));
}

var Routine = {
  getMinCheckModForRoutine: getMinCheckModForRoutine
};

exports.getExceptionalSkillBonus = getExceptionalSkillBonus;
exports.getMaxSrByCheckAttrs = getMaxSrByCheckAttrs;
exports.getMaxSrFromEl = getMaxSrFromEl;
exports.getMax = getMax;
exports.isIncreasable = isIncreasable;
exports.getMin = getMin;
exports.isDecreasable = isDecreasable;
exports.Routine = Routine;
/* Id-OptolithClient Not a pure module */
