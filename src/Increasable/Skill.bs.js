// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var IC$OptolithClient = require("./IC.bs.js");
var Decoder$OptolithClient = require("../Utilities/Decoder.bs.js");
var Erratum$OptolithClient = require("../Sources/Erratum.bs.js");
var Ley_List$OptolithClient = require("../Data/Ley_List.bs.js");
var JsonStrict$OptolithClient = require("../Misc/JsonStrict.bs.js");
var Ley_IntMap$OptolithClient = require("../Data/Ley_IntMap.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var SkillCheck$OptolithClient = require("./SkillCheck.bs.js");
var Increasable$OptolithClient = require("./Increasable.bs.js");
var Ley_Function$OptolithClient = require("../Data/Ley_Function.bs.js");
var Prerequisite$OptolithClient = require("../Prerequisites/Prerequisite.bs.js");
var PublicationRef$OptolithClient = require("../Sources/PublicationRef.bs.js");
var TranslationMap$OptolithClient = require("../Misc/TranslationMap.bs.js");

var Dynamic = Increasable$OptolithClient.Dynamic.Make({
      minValue: 0
    });

function t(json) {
  return {
          name: Json_decode.field("name", Json_decode.string, json)
        };
}

var Translation = {
  t: t
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function multilingual(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          prerequisite: JsonStrict$OptolithClient.optionalField("prerequisite", Prerequisite$OptolithClient.Activatable.Decode.t, json),
          translations: Json_decode.field("translations", TranslationMap.Decode.t, json)
        };
}

function resolveTranslations(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        prerequisite: x.prerequisite
                      };
              }));
}

function t$1(json) {
  return {
          name: Json_decode.field("name", Json_decode.string, json)
        };
}

var Translation$1 = {
  t: t$1
};

var TranslationMap$1 = TranslationMap$OptolithClient.Make(Translation$1);

function multilingual$1(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          prerequisite: Json_decode.field("prerequisite", Prerequisite$OptolithClient.Activatable.Decode.t, json),
          translations: Json_decode.field("translations", TranslationMap$1.Decode.t, json)
        };
}

function resolveTranslations$1(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$1.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        prerequisite: x.prerequisite
                      };
              }));
}

function t$2(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          applicationsInput: JsonStrict$OptolithClient.optionalField("applicationsInput", JsonStrict$OptolithClient.string, json),
          encDescription: JsonStrict$OptolithClient.optionalField("encDescription", JsonStrict$OptolithClient.string, json),
          tools: JsonStrict$OptolithClient.optionalField("tools", JsonStrict$OptolithClient.string, json),
          quality: JsonStrict$OptolithClient.field("quality", JsonStrict$OptolithClient.string, json),
          failed: JsonStrict$OptolithClient.field("failed", JsonStrict$OptolithClient.string, json),
          critical: JsonStrict$OptolithClient.field("critical", JsonStrict$OptolithClient.string, json),
          botch: JsonStrict$OptolithClient.field("botch", JsonStrict$OptolithClient.string, json),
          errata: JsonStrict$OptolithClient.optionalField("errata", Erratum$OptolithClient.Decode.list, json)
        };
}

var Translation$2 = {
  t: t$2
};

var TranslationMap$2 = TranslationMap$OptolithClient.Make(Translation$2);

function encumbranceUniv(param) {
  return Json_decode.map((function (str) {
                switch (str) {
                  case "false" :
                      return /* False */1;
                  case "maybe" :
                      return /* Maybe */2;
                  case "true" :
                      return /* True */0;
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown encumbrance: " + str,
                          Error: new Error()
                        };
                }
              }), Json_decode.string, param);
}

function multilingual$2(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          check: JsonStrict$OptolithClient.field("check", SkillCheck$OptolithClient.Decode.t, json),
          applications: JsonStrict$OptolithClient.optionalField("applications", (function (param) {
                  return JsonStrict$OptolithClient.list(multilingual, param);
                }), json),
          uses: JsonStrict$OptolithClient.optionalField("uses", (function (param) {
                  return JsonStrict$OptolithClient.list(multilingual$1, param);
                }), json),
          ic: JsonStrict$OptolithClient.field("ic", IC$OptolithClient.Decode.t, json),
          enc: JsonStrict$OptolithClient.field("enc", encumbranceUniv, json),
          gr: JsonStrict$OptolithClient.field("gr", JsonStrict$OptolithClient.$$int, json),
          src: JsonStrict$OptolithClient.field("src", PublicationRef$OptolithClient.Decode.multilingualList, json),
          translations: JsonStrict$OptolithClient.field("translations", TranslationMap$2.Decode.t, json)
        };
}

function t$3(langs, json) {
  var x = multilingual$2(json);
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$2.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                var match = x.enc;
                var tmp;
                switch (match) {
                  case /* True */0 :
                      tmp = /* True */0;
                      break;
                  case /* False */1 :
                      tmp = /* False */1;
                      break;
                  case /* Maybe */2 :
                      tmp = /* Maybe */{
                        _0: translation.encDescription
                      };
                      break;
                  
                }
                return {
                        id: x.id,
                        name: translation.name,
                        check: x.check,
                        encumbrance: tmp,
                        gr: x.gr,
                        ic: x.ic,
                        applications: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, (function (applications) {
                                return Curry._3(Ley_List$OptolithClient.foldr, (function (application) {
                                              return Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, Curry._1(Ley_IntMap$OptolithClient.insert, application.id), resolveTranslations(langs, application));
                                            }), Ley_IntMap$OptolithClient.empty, applications);
                              }), x.applications),
                        applicationsInput: translation.applicationsInput,
                        uses: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, (function (uses) {
                                return Curry._3(Ley_List$OptolithClient.foldr, (function (use) {
                                              return Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, Curry._1(Ley_IntMap$OptolithClient.insert, use.id), resolveTranslations$1(langs, use));
                                            }), Ley_IntMap$OptolithClient.empty, uses);
                              }), x.uses),
                        tools: translation.tools,
                        quality: translation.quality,
                        failed: translation.failed,
                        critical: translation.critical,
                        botch: translation.botch,
                        src: PublicationRef$OptolithClient.Decode.resolveTranslationsList(langs, x.src),
                        errata: Ley_Option$OptolithClient.fromOption(/* [] */0, translation.errata)
                      };
              }));
}

function toAssoc(x) {
  return [
          x.id,
          x
        ];
}

function assoc(param, param$1) {
  return Decoder$OptolithClient.decodeAssoc(t$3, toAssoc, param, param$1);
}

var Dynamic_empty = Dynamic.empty;

var Dynamic_isEmpty = Dynamic.isEmpty;

var Dynamic_getValueDef = Dynamic.getValueDef;

var Dynamic$1 = {
  empty: Dynamic_empty,
  isEmpty: Dynamic_isEmpty,
  getValueDef: Dynamic_getValueDef
};

var Static_Application = {};

var Static_Use = {};

var Static_Decode = {
  assoc: assoc
};

var Static = {
  Application: Static_Application,
  Use: Static_Use,
  Decode: Static_Decode
};

exports.Dynamic = Dynamic$1;
exports.Static = Static;
/* Dynamic Not a pure module */
