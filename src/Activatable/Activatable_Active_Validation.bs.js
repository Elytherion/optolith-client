// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Skill$OptolithClient from "../Increasable/Skill.bs.js";
import * as Ley_Int$OptolithClient from "../Data/Ley_Int.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Tradition$OptolithClient from "../Misc/Tradition.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_IntSet$OptolithClient from "../Data/Ley_IntSet.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as EntryGroups$OptolithClient from "../Misc/EntryGroups.bs.js";
import * as Dependencies$OptolithClient from "../Prerequisites/Dependencies.bs.js";
import * as Prerequisites$OptolithClient from "../Prerequisites/Prerequisites.bs.js";
import * as CombatTechnique$OptolithClient from "../Increasable/CombatTechnique.bs.js";
import * as ActivatableSkill$OptolithClient from "../Increasable/ActivatableSkill.bs.js";
import * as ActivatableSkills$OptolithClient from "../Increasable/ActivatableSkills.bs.js";
import * as Activatable_Convert$OptolithClient from "./Activatable_Convert.bs.js";
import * as Activatable_Accessors$OptolithClient from "./Activatable_Accessors.bs.js";
import * as Activatable_ExtendedStyle$OptolithClient from "./Activatable_ExtendedStyle.bs.js";
import * as Activatable_SelectOptions$OptolithClient from "./Activatable_SelectOptions.bs.js";

function getActivesById(mp, id) {
  return Ley_Option$OptolithClient.option(/* [] */0, (function (param) {
                return param.active;
              }), Curry._2(Ley_IntMap$OptolithClient.lookup, id, mp));
}

function isNotRequiredByDependencies(hero, staticEntry, heroEntry, singleEntry) {
  var tmp;
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
        var partial_arg = hero.advantages;
        tmp = (function (param) {
            return getActivesById(partial_arg, param);
          });
        break;
    case /* Disadvantage */1 :
        var partial_arg$1 = hero.disadvantages;
        tmp = (function (param) {
            return getActivesById(partial_arg$1, param);
          });
        break;
    case /* SpecialAbility */2 :
        var partial_arg$2 = hero.specialAbilities;
        tmp = (function (param) {
            return getActivesById(partial_arg$2, param);
          });
        break;
    
  }
  return Curry._2(Ley_List$OptolithClient.all, (function (dep) {
                if (Dependencies$OptolithClient.Activatable.isDependencyMatched(dep, Activatable_Convert$OptolithClient.singleWithIdToSingle(singleEntry))) {
                  return Curry._2(Ley_List$OptolithClient.any, (function (param) {
                                return Dependencies$OptolithClient.Activatable.isDependencyMatched(dep, param);
                              }), Ley_List$OptolithClient.Index.deleteAt(singleEntry.index, heroEntry.active));
                } else {
                  return true;
                }
              }), Dependencies$OptolithClient.Flatten.flattenActivatableDependencies(tmp, singleEntry.id, heroEntry.dependencies));
}

function isEntrySpecificRemovalValid(cache, staticData, hero, staticEntry, heroEntry, singleEntry) {
  if (Tradition$OptolithClient.Magical.isTraditionId(staticData, singleEntry.id)) {
    var activeTraditions = cache.magicalTraditions;
    var hasMultipleTraditions = Curry._1(Ley_List$OptolithClient.length, activeTraditions) > 1;
    if (hasMultipleTraditions) {
      return true;
    } else if (ActivatableSkills$OptolithClient.hasActiveSkillEntries(/* Spells */0, hero)) {
      return false;
    } else {
      return Curry._1(Ley_IntSet$OptolithClient.$$null, hero.cantrips);
    }
  }
  if (Tradition$OptolithClient.Blessed.isTraditionId(staticData, singleEntry.id)) {
    if (ActivatableSkills$OptolithClient.hasActiveSkillEntries(/* LiturgicalChants */1, hero)) {
      return false;
    } else {
      return Curry._1(Ley_IntSet$OptolithClient.$$null, hero.blessings);
    }
  }
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
        var match = Id$OptolithClient.Advantage.fromInt(staticEntry._0.id);
        if (typeof match !== "number") {
          return true;
        }
        if (match !== 4) {
          if (match !== 5) {
            return true;
          }
          var match$1 = singleEntry.options;
          if (!match$1) {
            return true;
          }
          var match$2 = match$1.hd;
          if (match$2.TAG) {
            return true;
          }
          var id = match$2._0;
          if (id.TAG !== /* CombatTechnique */2) {
            return true;
          }
          var value = Curry._1(CombatTechnique$OptolithClient.Dynamic.getValueDef, Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, hero.combatTechniques));
          return value >= (cache.startExperienceLevel.maxCombatTechniqueRating + 1 | 0);
        }
        var match$3 = singleEntry.options;
        if (!match$3) {
          return true;
        }
        var match$4 = match$3.hd;
        if (match$4.TAG) {
          return true;
        }
        var id$1 = match$4._0;
        if (id$1.TAG !== /* Skill */1) {
          return true;
        }
        var id$2 = id$1._0;
        var value$1 = Curry._1(Skill$OptolithClient.Dynamic.getValueDef, Curry._2(Ley_IntMap$OptolithClient.lookup, id$2, hero.skills));
        var countSameSkill = Ley_List$OptolithClient.countBy((function (active) {
                var match = active.options;
                if (!match) {
                  return false;
                }
                var match$1 = match.hd;
                if (match$1.TAG) {
                  return false;
                }
                var otherId = match$1._0;
                if (otherId.TAG === /* Skill */1) {
                  return otherId._0 === id$2;
                } else {
                  return false;
                }
              }), heroEntry.active);
        return value$1 >= (cache.startExperienceLevel.maxSkillRating + countSameSkill | 0);
    case /* Disadvantage */1 :
        return true;
    case /* SpecialAbility */2 :
        var match$5 = Id$OptolithClient.SpecialAbility.fromInt(staticEntry._0.id);
        if (typeof match$5 !== "number") {
          return true;
        }
        if (match$5 >= 42) {
          if (match$5 >= 45) {
            return true;
          }
          var match$6 = cache.blessedTradition;
          if (match$6 === undefined) {
            return true;
          }
          var blessedTradition = match$6[2];
          return !Curry._2(Ley_IntMap$OptolithClient.any, (function (param) {
                        return Curry._2(Ley_IntSet$OptolithClient.notElem, blessedTradition.numId, param.traditions);
                      }), Curry._2(Ley_IntMap$OptolithClient.mapMaybe, (function (param) {
                            if (param.value) {
                              return Curry._2(Ley_IntMap$OptolithClient.lookup, param.id, staticData.liturgicalChants);
                            }
                            
                          }), hero.liturgicalChants));
        }
        if (match$5 >= 21) {
          return true;
        }
        switch (match$5) {
          case /* Literacy */5 :
              var match$7 = cache.matchingLanguagesScripts.isEntryActiveRequiringMatch;
              var match$8 = cache.matchingLanguagesScripts.scriptsWithMatchingLanguages;
              var match$9 = singleEntry.options;
              if (!match$7) {
                return true;
              }
              if (!match$8) {
                return true;
              }
              if (match$8.tl) {
                return true;
              }
              if (!match$9) {
                return true;
              }
              var match$10 = match$9.hd;
              if (match$10.TAG) {
                return true;
              }
              var scriptId = match$10._0;
              if (scriptId.TAG) {
                return true;
              } else {
                return match$8.hd !== scriptId._0;
              }
          case /* Language */6 :
              var match$11 = cache.matchingLanguagesScripts.isEntryActiveRequiringMatch;
              var match$12 = cache.matchingLanguagesScripts.languagesWithMatchingScripts;
              var match$13 = singleEntry.options;
              if (!match$11) {
                return true;
              }
              if (!match$12) {
                return true;
              }
              if (match$12.tl) {
                return true;
              }
              if (!match$13) {
                return true;
              }
              var match$14 = match$13.hd;
              if (match$14.TAG) {
                return true;
              }
              var languageId = match$14._0;
              if (languageId.TAG) {
                return true;
              } else {
                return match$12.hd !== languageId._0;
              }
          case /* PropertyKnowledge */10 :
              var match$15 = singleEntry.options;
              if (!match$15) {
                return true;
              }
              var match$16 = match$15.hd;
              if (match$16.TAG) {
                return true;
              }
              var propertyId = match$16._0;
              if (propertyId.TAG) {
                return true;
              }
              var propertyId$1 = propertyId._0;
              return !Curry._2(Ley_IntMap$OptolithClient.any, (function (heroSpell) {
                            if (ActivatableSkill$OptolithClient.Dynamic.valueToInt(heroSpell.value) > 14) {
                              return Ley_Option$OptolithClient.option(true, (function (param) {
                                            return param.property === propertyId$1;
                                          }), Curry._2(Ley_IntMap$OptolithClient.lookup, heroSpell.id, staticData.spells));
                            } else {
                              return false;
                            }
                          }), hero.spells);
          case /* AspectKnowledge */12 :
              var activeAspects = Curry._1(Ley_IntSet$OptolithClient.fromList, Activatable_SelectOptions$OptolithClient.mapActiveOptions1((function (param) {
                          if (param.TAG) {
                            return ;
                          }
                          var aspectId = param._0;
                          if (aspectId.TAG) {
                            return ;
                          } else {
                            return aspectId._0;
                          }
                        }), heroEntry));
              var match$17 = singleEntry.options;
              if (!match$17) {
                return true;
              }
              var match$18 = match$17.hd;
              if (match$18.TAG) {
                return true;
              }
              var aspectId = match$18._0;
              if (aspectId.TAG) {
                return true;
              }
              var aspectId$1 = aspectId._0;
              var otherAspects = Curry._2(Ley_IntSet$OptolithClient.$$delete, aspectId$1, activeAspects);
              return !Curry._2(Ley_IntMap$OptolithClient.any, (function (heroLiturgicalChant) {
                            if (ActivatableSkill$OptolithClient.Dynamic.valueToInt(heroLiturgicalChant.value) > 14) {
                              return Ley_Option$OptolithClient.option(true, (function (param) {
                                            var aspects = param.aspects;
                                            if (Curry._2(Ley_IntSet$OptolithClient.member, aspectId$1, aspects)) {
                                              return Curry._2(Ley_IntSet$OptolithClient.disjoint, otherAspects, aspects);
                                            } else {
                                              return false;
                                            }
                                          }), Curry._2(Ley_IntMap$OptolithClient.lookup, heroLiturgicalChant.id, staticData.liturgicalChants));
                            } else {
                              return false;
                            }
                          }), hero.liturgicalChants);
          case /* CombatStyleCombination */15 :
              var activeArmedStyles = cache.armedCombatStylesCount;
              var activeUnarmedStyles = cache.unarmedCombatStylesCount;
              var totalActive = activeArmedStyles + activeUnarmedStyles | 0;
              if (totalActive < 3) {
                if (activeArmedStyles < 2) {
                  return true;
                } else {
                  return activeUnarmedStyles < 2;
                }
              } else {
                return false;
              }
          case /* SkillSpecialization */0 :
          case /* TerrainKnowledge */1 :
          case /* CraftInstruments */2 :
          case /* Hunter */3 :
          case /* AreaKnowledge */4 :
          case /* CombatReflexes */7 :
          case /* ImprovedDodge */8 :
          case /* TraditionGuildMages */9 :
          case /* PropertyFocus */11 :
          case /* TraditionChurchOfPraios */13 :
          case /* Feuerschlucker */14 :
          case /* AdaptionZauber */16 :
          case /* Exorzist */17 :
          case /* FavoriteSpellwork */18 :
          case /* TraditionWitches */19 :
              return true;
          case /* MagicStyleCombination */20 :
              return cache.magicalStylesCount < 2;
          
        }
    
  }
}

function isStyleSpecialAbilityRemovalValid(hero, staticEntry) {
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        return true;
    case /* SpecialAbility */2 :
        return Activatable_ExtendedStyle$OptolithClient.isStyleValidToRemove(hero, staticEntry._0);
    
  }
}

function getMinLevelForIncreaseEntry(defaultAmount, currentAmount) {
  if (currentAmount > defaultAmount) {
    return currentAmount - defaultAmount | 0;
  }
  
}

function getMaxLevelForDecreaseEntry(maxDecrease, current) {
  return Ley_Int$OptolithClient.max(0, maxDecrease - current | 0);
}

function getEntrySpecificMinLevel(cache, staticData, hero, staticEntry) {
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
        var match = Id$OptolithClient.Advantage.fromInt(staticEntry._0.id);
        if (typeof match !== "number") {
          return ;
        }
        if (match < 20) {
          return ;
        }
        switch (match - 20 | 0) {
          case /* Aptitude */0 :
              return getMinLevelForIncreaseEntry(3, ActivatableSkills$OptolithClient.countActiveSkillEntries(/* Spells */0, hero));
          case /* ExceptionalSkill */4 :
              return getMinLevelForIncreaseEntry(3, EntryGroups$OptolithClient.SpecialAbility.countActiveFromGroup(/* Predigten */23, cache.specialAbilityPairs));
          case /* ExceptionalCombatTechnique */5 :
              return getMinLevelForIncreaseEntry(3, EntryGroups$OptolithClient.SpecialAbility.countActiveFromGroup(/* Visionen */26, cache.specialAbilityPairs));
          case /* Nimble */1 :
          case /* Blessed */2 :
          case /* Luck */3 :
          case /* IncreasedAstralPower */6 :
          case /* IncreasedKarmaPoints */7 :
              return ;
          
        }
    case /* Disadvantage */1 :
        return ;
    case /* SpecialAbility */2 :
        var match$1 = Id$OptolithClient.SpecialAbility.fromInt(staticEntry._0.id);
        if (typeof match$1 === "number" && match$1 === 75) {
          return Ley_Option$OptolithClient.ensure((function (count) {
                        return count > 0;
                      }), Curry._2(Ley_IntMap$OptolithClient.countWith, (function (param) {
                            return Ley_Option$OptolithClient.option(false, (function (param) {
                                          return param.gr === Curry._1(Id$OptolithClient.Spell.Group.toInt, /* Spells */0);
                                        }), Curry._2(Ley_IntMap$OptolithClient.lookup, param.id, staticData.spells));
                          }), hero.spells));
        } else {
          return ;
        }
    
  }
}

function getEntrySpecificMaxLevel(cache, hero, staticEntry) {
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
        return ;
    case /* Disadvantage */1 :
        var match = Id$OptolithClient.Disadvantage.fromInt(staticEntry._0.id);
        if (typeof match !== "number") {
          return ;
        }
        if (match < 22) {
          return ;
        }
        switch (match - 22 | 0) {
          case /* AfraidOf */0 :
              return Curry._1(Ley_Option$OptolithClient.$$return, getMaxLevelForDecreaseEntry(3, ActivatableSkills$OptolithClient.countActiveSkillEntries(/* Spells */0, hero)));
          case /* Poor */1 :
              return Curry._1(Ley_Option$OptolithClient.$$return, getMaxLevelForDecreaseEntry(3, EntryGroups$OptolithClient.SpecialAbility.countActiveFromGroup(/* Predigten */23, cache.specialAbilityPairs)));
          case /* Slow */2 :
              return Curry._1(Ley_Option$OptolithClient.$$return, getMaxLevelForDecreaseEntry(3, EntryGroups$OptolithClient.SpecialAbility.countActiveFromGroup(/* Visionen */26, cache.specialAbilityPairs)));
          
        }
    case /* SpecialAbility */2 :
        var match$1 = Id$OptolithClient.SpecialAbility.fromInt(staticEntry._0.id);
        if (typeof match$1 === "number" && match$1 === 47) {
          return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, hero.pact, (function (pact) {
                        return pact.level;
                      }));
        } else {
          return ;
        }
    
  }
}

function getMinLevel(cache, staticData, hero, staticEntry, heroEntry, singleEntry) {
  var maybeMinLevel = getEntrySpecificMinLevel(cache, staticData, hero, staticEntry);
  return Curry._3(Ley_List$OptolithClient.foldr, (function (dependency, maybeMinLevel) {
                var definedLevel = dependency.level;
                if (definedLevel !== undefined && definedLevel > Curry._1(Ley_Option$OptolithClient.sum, maybeMinLevel) && Dependencies$OptolithClient.Activatable.areOptionDependenciesMatched(dependency, Activatable_Convert$OptolithClient.singleWithIdToSingle(singleEntry))) {
                  return definedLevel;
                } else {
                  return maybeMinLevel;
                }
              }), maybeMinLevel, heroEntry.dependencies);
}

function getMaxLevel(cache, staticData, hero, staticEntry) {
  var entrySpecificMaxLevel = getEntrySpecificMaxLevel(cache, hero, staticEntry);
  var maxPossibleWithPrerequisites = Prerequisites$OptolithClient.Validation.getMaxLevel(staticData, hero, Id$OptolithClient.Activatable.toAll(Activatable_Accessors$OptolithClient.id(staticEntry)), Prerequisites$OptolithClient.Activatable.getLevelPrerequisites(staticEntry));
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$pipe$great, Curry._2(Ley_Option$OptolithClient.Infix.$less$pipe$great, Curry._3(Ley_Option$OptolithClient.liftM2, Ley_Int$OptolithClient.min, entrySpecificMaxLevel, maxPossibleWithPrerequisites), entrySpecificMaxLevel), maxPossibleWithPrerequisites);
}

function isRemovalOrModificationValid(cache, staticData, hero, staticEntry, heroEntry, singleEntry) {
  var minLevel = getMinLevel(cache, staticData, hero, staticEntry, heroEntry, singleEntry);
  var maxLevel = getMaxLevel(cache, staticData, hero, staticEntry);
  return {
          minLevel: minLevel,
          maxLevel: maxLevel,
          disabled: Ley_Option$OptolithClient.isSome(minLevel) || !isNotRequiredByDependencies(hero, staticEntry, heroEntry, singleEntry) || !isStyleSpecialAbilityRemovalValid(hero, staticEntry) || !isEntrySpecificRemovalValid(cache, staticData, hero, staticEntry, heroEntry, singleEntry)
        };
}

export {
  getMinLevelForIncreaseEntry ,
  getMaxLevelForDecreaseEntry ,
  isRemovalOrModificationValid ,
  
}
/* Id-OptolithClient Not a pure module */
