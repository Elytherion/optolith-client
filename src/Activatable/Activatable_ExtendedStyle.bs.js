// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";

function getStyleDependenciesAcc(style) {
  var match = Curry._1(Id$OptolithClient.SpecialAbility.Group.fromInt, style.gr);
  if (typeof match === "number") {
    if (match >= 14) {
      if (match >= 26) {
        if (match === 33 || match === 32) {
          return [
                  (function (hero) {
                      return hero.skillStyleDependencies;
                    }),
                  (function (hero, dependencies) {
                      var newrecord = Caml_obj.caml_obj_dup(hero);
                      newrecord.skillStyleDependencies = dependencies;
                      return newrecord;
                    })
                ];
        } else {
          return ;
        }
      } else if (match >= 24) {
        return [
                (function (hero) {
                    return hero.blessedStyleDependencies;
                  }),
                (function (hero, dependencies) {
                    var newrecord = Caml_obj.caml_obj_dup(hero);
                    newrecord.blessedStyleDependencies = dependencies;
                    return newrecord;
                  })
              ];
      } else {
        return ;
      }
    } else if (match >= 11) {
      if (match >= 12) {
        return [
                (function (hero) {
                    return hero.magicalStyleDependencies;
                  }),
                (function (hero, dependencies) {
                    var newrecord = Caml_obj.caml_obj_dup(hero);
                    newrecord.magicalStyleDependencies = dependencies;
                    return newrecord;
                  })
              ];
      } else {
        return ;
      }
    } else if (match >= 8) {
      return [
              (function (hero) {
                  return hero.combatStyleDependencies;
                }),
              (function (hero, dependencies) {
                  var newrecord = Caml_obj.caml_obj_dup(hero);
                  newrecord.combatStyleDependencies = dependencies;
                  return newrecord;
                })
            ];
    } else {
      return ;
    }
  }
  
}

function moveActiveInListToNew(newxs, x) {
  var match = x.id;
  var match$1 = x.active;
  if (!match.TAG) {
    return [
            newxs,
            x
          ];
  }
  if (match$1 === undefined) {
    return [
            newxs,
            x
          ];
  }
  var index = Ley_List$OptolithClient.findIndex((function (newx) {
          var id = newx.id;
          if (id.TAG) {
            return false;
          } else {
            return id._0 === match$1;
          }
        }), newxs);
  if (index !== undefined) {
    return [
            Ley_List$OptolithClient.Index.modifyAt(index, (function (newx) {
                    return {
                            id: newx.id,
                            active: match$1,
                            origin: newx.origin
                          };
                  }), newxs),
            {
              id: x.id,
              active: undefined,
              origin: x.origin
            }
          ];
  } else {
    return [
            newxs,
            x
          ];
  }
}

function generateStyleDependencies(heroSpecialAbilities, styleSpecialAbility) {
  var match = styleSpecialAbility.groupSpecific;
  var ext1;
  var ext2;
  var ext3;
  switch (match.TAG | 0) {
    case /* CombatStyle */3 :
        var match$1 = match.extended;
        ext1 = match$1[0];
        ext2 = match$1[1];
        ext3 = match$1[2];
        break;
    case /* GeneralStyle */4 :
        var match$2 = match.extended;
        ext1 = match$2[0];
        ext2 = match$2[1];
        ext3 = match$2[2];
        break;
    default:
      return ;
  }
  var xs = Curry._2(Ley_List$OptolithClient.map, (function (param) {
          return {
                  id: {
                    TAG: /* One */0,
                    _0: param.id
                  },
                  active: undefined,
                  origin: styleSpecialAbility.id
                };
        }), {
        hd: ext1,
        tl: {
          hd: ext2,
          tl: {
            hd: ext3,
            tl: /* [] */0
          }
        }
      });
  var match$3 = Id$OptolithClient.SpecialAbility.fromInt(styleSpecialAbility.id);
  var tmp;
  if (typeof match$3 === "number" && match$3 === 91) {
    var param = Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_IntMap$OptolithClient.lookup, styleSpecialAbility.id, heroSpecialAbilities), (function (x) {
                return Ley_Option$OptolithClient.listToOption(x.active);
              })), (function (x) {
            return Ley_List$OptolithClient.Safe.atMay(x.options, 1);
          }));
    if (param !== undefined && !param.TAG) {
      var match$4 = param._0;
      tmp = match$4[0] !== 7 ? xs : ({
            hd: {
              id: {
                TAG: /* One */0,
                _0: match$4[1]
              },
              active: undefined,
              origin: styleSpecialAbility.id
            },
            tl: xs
          });
    } else {
      tmp = xs;
    }
  } else {
    tmp = xs;
  }
  return Curry._1(Ley_Option$OptolithClient.$$return, tmp);
}

function addStyleExtendedSpecialAbilityDependencies(styleSpecialAbility, hero) {
  return Ley_Option$OptolithClient.fromOption(hero, Curry._3(Ley_Option$OptolithClient.liftM2, (function (param, newxs) {
                    var param$1 = Ley_List$OptolithClient.mapAccumL(moveActiveInListToNew, newxs, Curry._1(param[0], hero));
                    return Curry._2(param[1], hero, Pervasives.$at(param$1[0], param$1[1]));
                  }), getStyleDependenciesAcc(styleSpecialAbility), generateStyleDependencies(hero.specialAbilities, styleSpecialAbility)));
}

function getIndexOfFreeDependency(extendedSpecialAbility, xs) {
  return Ley_Option$OptolithClient.fromOption(-1, Curry._2(Ley_Option$OptolithClient.Infix.$less$pipe$great, Ley_List$OptolithClient.findIndex((function (x) {
                        var id = x.id;
                        if (id.TAG) {
                          return false;
                        } else {
                          return id._0 === extendedSpecialAbility.id;
                        }
                      }), xs), Ley_List$OptolithClient.findIndex((function (x) {
                        var ids = x.id;
                        if (ids.TAG) {
                          return Curry._2(Ley_List$OptolithClient.elem, extendedSpecialAbility.id, ids._0);
                        } else {
                          return false;
                        }
                      }), xs)));
}

function addAllStyleRelatedDependencies(specialAbility, hero) {
  var hero$1 = addStyleExtendedSpecialAbilityDependencies(specialAbility, hero);
  return Ley_Option$OptolithClient.option(hero$1, (function (param) {
                var xs = Curry._1(param[0], hero$1);
                return Curry._2(param[1], hero$1, Ley_List$OptolithClient.Index.modifyAt(getIndexOfFreeDependency(specialAbility, xs), (function (d) {
                                  return {
                                          id: d.id,
                                          active: specialAbility.id,
                                          origin: d.origin
                                        };
                                }), xs));
              }), getStyleDependenciesAcc(specialAbility));
}

function getSplittedRemainingAndToRemove(id, xs) {
  return Ley_List$OptolithClient.partition((function (x) {
                return x.origin === id;
              }), xs);
}

function getAlternativeIndex(toBeRemoved, remainings) {
  var activeId = toBeRemoved.active;
  if (activeId !== undefined) {
    return Ley_Option$OptolithClient.fromOption(-1, Ley_List$OptolithClient.findIndex((function (remaining) {
                      var id = remaining.id;
                      var tmp;
                      tmp = id.TAG ? Curry._2(Ley_List$OptolithClient.elem, activeId, id._0) : id._0 === activeId;
                      if (tmp) {
                        return Ley_Option$OptolithClient.isNone(remaining.active);
                      } else {
                        return false;
                      }
                    }), remainings));
  } else {
    return -1;
  }
}

function removeStyleExtendedSpecialAbilityDependencies(styleSpecialAbility, hero) {
  return Ley_Option$OptolithClient.option(hero, (function (param) {
                var param$1 = getSplittedRemainingAndToRemove(styleSpecialAbility.id, Curry._1(param[0], hero));
                return Curry._2(param[1], hero, Curry._3(Ley_List$OptolithClient.foldr, (function (toRemove, remainings) {
                                  return Ley_List$OptolithClient.Index.modifyAt(getAlternativeIndex(toRemove, remainings), (function (remaining) {
                                                return {
                                                        id: remaining.id,
                                                        active: toRemove.active,
                                                        origin: remaining.origin
                                                      };
                                              }), remainings);
                                }), param$1[1], Ley_List$OptolithClient.filter((function (x) {
                                      return Ley_Option$OptolithClient.isSome(x.active);
                                    }), param$1[0])));
              }), getStyleDependenciesAcc(styleSpecialAbility));
}

function getIndexOfUsedDependency(extendedSpecialAbility, xs) {
  return Ley_Option$OptolithClient.fromOption(-1, Ley_List$OptolithClient.findIndex((function (x) {
                    var id = x.active;
                    if (id !== undefined) {
                      return id === extendedSpecialAbility.id;
                    } else {
                      return false;
                    }
                  }), xs));
}

function removeAllStyleRelatedDependencies(specialAbility, hero) {
  var hero$1 = removeStyleExtendedSpecialAbilityDependencies(specialAbility, hero);
  return Ley_Option$OptolithClient.option(hero$1, (function (param) {
                var xs = Curry._1(param[0], hero$1);
                return Curry._2(param[1], hero$1, Ley_List$OptolithClient.Index.modifyAt(getIndexOfUsedDependency(specialAbility, xs), (function (d) {
                                  return {
                                          id: d.id,
                                          active: undefined,
                                          origin: d.origin
                                        };
                                }), xs));
              }), getStyleDependenciesAcc(specialAbility));
}

function getAvailableExtendedSpecialAbilities(styleDependencies) {
  return Curry._2(Ley_List$OptolithClient.concatMap, (function (x) {
                var match = x.active;
                var match$1 = x.id;
                if (match !== undefined) {
                  return /* [] */0;
                } else if (match$1.TAG) {
                  return match$1._0;
                } else {
                  return {
                          hd: match$1._0,
                          tl: /* [] */0
                        };
                }
              }), styleDependencies);
}

var getAllAvailableExtendedSpecialAbilities = Curry._1(Ley_List$OptolithClient.concatMap, getAvailableExtendedSpecialAbilities);

function isStyleValidToRemove(hero, styleSpecialAbility) {
  return Ley_Option$OptolithClient.option(true, (function (param) {
                var param$1 = getSplittedRemainingAndToRemove(styleSpecialAbility.id, Curry._1(param[0], hero));
                var remainingDependencies = param$1[1];
                return Curry._2(Ley_List$OptolithClient.all, (function (x) {
                              return getAlternativeIndex(x, remainingDependencies) > -1;
                            }), Ley_List$OptolithClient.filter((function (x) {
                                  return Ley_Option$OptolithClient.isSome(x.active);
                                }), param$1[0]));
              }), getStyleDependenciesAcc(styleSpecialAbility));
}

export {
  addAllStyleRelatedDependencies ,
  removeAllStyleRelatedDependencies ,
  getAllAvailableExtendedSpecialAbilities ,
  isStyleValidToRemove ,
  
}
/* getAllAvailableExtendedSpecialAbilities Not a pure module */
