// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Id$OptolithClient = require("../Misc/Id.bs.js");
var Decoder$OptolithClient = require("../Utilities/Decoder.bs.js");
var Erratum$OptolithClient = require("../Sources/Erratum.bs.js");
var Ley_Int$OptolithClient = require("../Data/Ley_Int.bs.js");
var Advantage$OptolithClient = require("./Advantage.bs.js");
var OneOrMany$OptolithClient = require("../Utilities/OneOrMany.bs.js");
var JsonStrict$OptolithClient = require("../Misc/JsonStrict.bs.js");
var Ley_IntMap$OptolithClient = require("../Data/Ley_IntMap.bs.js");
var Ley_Option$OptolithClient = require("../Data/Ley_Option.bs.js");
var Prerequisite$OptolithClient = require("../Prerequisites/Prerequisite.bs.js");
var SelectOption$OptolithClient = require("./SelectOption.bs.js");
var PublicationRef$OptolithClient = require("../Sources/PublicationRef.bs.js");
var TranslationMap$OptolithClient = require("../Misc/TranslationMap.bs.js");

var ApplicableCombatTechniques = {};

var Extended = {};

var Property = {};

function generalRestriction(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "ExcludeTechniques" :
                      return function (param) {
                        return Json_decode.map((function (ctIds) {
                                      return {
                                              TAG: /* ExcludeTechniques */1,
                                              _0: ctIds
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", (function (param) {
                                                    return Json_decode.list(Json_decode.$$int, param);
                                                  }), param);
                                    }), param);
                      };
                  case "Improvised" :
                      return function (param) {
                        return /* Improvised */0;
                      };
                  case "Mount" :
                      return function (param) {
                        return /* Mount */2;
                      };
                  case "PointedBlade" :
                      return function (param) {
                        return /* PointedBlade */1;
                      };
                  case "Race" :
                      return function (param) {
                        return Json_decode.map((function (raceId) {
                                      return {
                                              TAG: /* Race */0,
                                              _0: raceId
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", Json_decode.$$int, param);
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown general combat technique restriction type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

function meleeRestriction(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "ExcludeTechniques" :
                      return function (param) {
                        return Json_decode.map((function (ctIds) {
                                      return {
                                              TAG: /* ExcludeTechniques */1,
                                              _0: ctIds
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", (function (param) {
                                                    return Json_decode.list(Json_decode.$$int, param);
                                                  }), param);
                                    }), param);
                      };
                  case "HasParry" :
                      return function (param) {
                        return /* HasParry */3;
                      };
                  case "Improvised" :
                      return function (param) {
                        return /* Improvised */0;
                      };
                  case "Mount" :
                      return function (param) {
                        return /* Mount */2;
                      };
                  case "OneHanded" :
                      return function (param) {
                        return /* OneHanded */4;
                      };
                  case "PointedBlade" :
                      return function (param) {
                        return /* PointedBlade */1;
                      };
                  case "Race" :
                      return function (param) {
                        return Json_decode.map((function (raceId) {
                                      return {
                                              TAG: /* Race */0,
                                              _0: raceId
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", Json_decode.$$int, param);
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown general combat technique restriction type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

function specificRestriction(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Improvised" :
                      return function (param) {
                        return /* Improvised */0;
                      };
                  case "Level" :
                      return function (param) {
                        return Json_decode.map((function (level) {
                                      return {
                                              TAG: /* Level */1,
                                              _0: level
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", Json_decode.$$int, param);
                                    }), param);
                      };
                  case "Mount" :
                      return function (param) {
                        return /* Mount */2;
                      };
                  case "PointedBlade" :
                      return function (param) {
                        return /* PointedBlade */1;
                      };
                  case "Race" :
                      return function (param) {
                        return Json_decode.map((function (raceId) {
                                      return {
                                              TAG: /* Race */0,
                                              _0: raceId
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", Json_decode.$$int, param);
                                    }), param);
                      };
                  case "Weapons" :
                      return function (param) {
                        return Json_decode.map((function (weaponIds) {
                                      return {
                                              TAG: /* Weapons */2,
                                              _0: weaponIds
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", (function (param) {
                                                    return Json_decode.list(Json_decode.$$int, param);
                                                  }), param);
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown general combat technique restriction type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

function specific(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          restrictions: Json_decode.field("restrictions", (function (param) {
                  return Json_decode.list(specificRestriction, param);
                }), json)
        };
}

function t(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "All" :
                      return function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: /* All */0,
                                              _0: x
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", (function (param) {
                                                    return Json_decode.list(generalRestriction, param);
                                                  }), param);
                                    }), param);
                      };
                  case "AllMelee" :
                      return function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: /* AllMelee */1,
                                              _0: x
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", (function (param) {
                                                    return Json_decode.list(meleeRestriction, param);
                                                  }), param);
                                    }), param);
                      };
                  case "AllRanged" :
                      return function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: /* AllRanged */2,
                                              _0: x
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", (function (param) {
                                                    return Json_decode.list(generalRestriction, param);
                                                  }), param);
                                    }), param);
                      };
                  case "DependingOnCombatStyle" :
                      return function (param) {
                        return /* DependingOnCombatStyle */0;
                      };
                  case "Specific" :
                      return function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: /* Specific */3,
                                              _0: x
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", (function (param) {
                                                    return Json_decode.list(specific, param);
                                                  }), param);
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown general combat technique restriction type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

function entry(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          option: JsonStrict$OptolithClient.optionalField("option", OneOrMany$OptolithClient.Decode.t(JsonStrict$OptolithClient.$$int), json)
        };
}

function t$1(param) {
  return Json_decode.tuple3(entry, entry, entry, param);
}

function t$2(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "DependingOnProperty" :
                      return function (param) {
                        return /* DependingOnProperty */0;
                      };
                  case "Single" :
                      return function (param) {
                        return Json_decode.map((function (propId) {
                                      return /* Single */{
                                              _0: propId
                                            };
                                    }), (function (param) {
                                      return Json_decode.field("value", Json_decode.$$int, param);
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown property type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

function t$3(json) {
  return {
          rules: Json_decode.field("rules", Json_decode.string, json)
        };
}

var Translation = {
  t: t$3
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function t$4(json) {
  return {
          rules: JsonStrict$OptolithClient.field("rules", JsonStrict$OptolithClient.string, json),
          penalty: JsonStrict$OptolithClient.optionalField("penalty", JsonStrict$OptolithClient.string, json)
        };
}

var Translation$1 = {
  t: t$4
};

var TranslationMap$1 = TranslationMap$OptolithClient.Make(Translation$1);

function t$5(json) {
  return {
          protectiveCircle: Json_decode.field("protectiveCircle", Json_decode.string, json),
          wardingCircle: Json_decode.field("wardingCircle", Json_decode.string, json)
        };
}

var Translation$2 = {
  t: t$5
};

var TranslationMap$2 = TranslationMap$OptolithClient.Make(Translation$2);

function t$6(json) {
  return {
          rules: JsonStrict$OptolithClient.field("rules", JsonStrict$OptolithClient.string, json),
          penalty: JsonStrict$OptolithClient.optionalField("penalty", JsonStrict$OptolithClient.string, json)
        };
}

var Translation$3 = {
  t: t$6
};

var TranslationMap$3 = TranslationMap$OptolithClient.Make(Translation$3);

function t$7(json) {
  return {
          rules: Json_decode.field("rules", Json_decode.string, json)
        };
}

var Translation$4 = {
  t: t$7
};

var TranslationMap$4 = TranslationMap$OptolithClient.Make(Translation$4);

function t$8(json) {
  return {
          effect: JsonStrict$OptolithClient.field("effect", JsonStrict$OptolithClient.string, json),
          aeCost: JsonStrict$OptolithClient.optionalField("aeCost", JsonStrict$OptolithClient.string, json),
          volume: JsonStrict$OptolithClient.field("volume", JsonStrict$OptolithClient.string, json),
          bindingCost: JsonStrict$OptolithClient.optionalField("bindingCost", JsonStrict$OptolithClient.string, json)
        };
}

var Translation$5 = {
  t: t$8
};

var TranslationMap$5 = TranslationMap$OptolithClient.Make(Translation$5);

function t$9(json) {
  return {
          effect: Json_decode.field("effect", Json_decode.string, json),
          aeCost: Json_decode.field("aeCost", Json_decode.string, json)
        };
}

var Translation$6 = {
  t: t$9
};

var TranslationMap$6 = TranslationMap$OptolithClient.Make(Translation$6);

function t$10(json) {
  return {
          rules: JsonStrict$OptolithClient.field("rules", JsonStrict$OptolithClient.string, json),
          aeCost: JsonStrict$OptolithClient.field("aeCost", JsonStrict$OptolithClient.string, json)
        };
}

var Translation$7 = {
  t: t$10
};

var TranslationMap$7 = TranslationMap$OptolithClient.Make(Translation$7);

function t$11(json) {
  return {
          effect: Json_decode.field("effect", Json_decode.string, json)
        };
}

var Translation$8 = {
  t: t$11
};

var TranslationMap$8 = TranslationMap$OptolithClient.Make(Translation$8);

function t$12(json) {
  return {
          effect: Json_decode.field("effect", Json_decode.string, json)
        };
}

var Translation$9 = {
  t: t$12
};

var TranslationMap$9 = TranslationMap$OptolithClient.Make(Translation$9);

function t$13(json) {
  return {
          effect: JsonStrict$OptolithClient.field("effect", JsonStrict$OptolithClient.string, json),
          aeCost: JsonStrict$OptolithClient.optionalField("aeCost", JsonStrict$OptolithClient.string, json),
          volume: JsonStrict$OptolithClient.optionalField("volume", JsonStrict$OptolithClient.string, json),
          bindingCost: JsonStrict$OptolithClient.optionalField("bindingCost", JsonStrict$OptolithClient.string, json)
        };
}

var Translation$10 = {
  t: t$13
};

var TranslationMap$10 = TranslationMap$OptolithClient.Make(Translation$10);

function t$14(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          nameInWiki: JsonStrict$OptolithClient.optionalField("nameInWiki", JsonStrict$OptolithClient.string, json),
          input: JsonStrict$OptolithClient.optionalField("input", JsonStrict$OptolithClient.string, json),
          prerequisites: JsonStrict$OptolithClient.optionalField("prerequisites", JsonStrict$OptolithClient.string, json),
          prerequisitesStart: JsonStrict$OptolithClient.optionalField("prerequisitesStart", JsonStrict$OptolithClient.string, json),
          prerequisitesEnd: JsonStrict$OptolithClient.optionalField("prerequisitesEnd", JsonStrict$OptolithClient.string, json),
          apValue: JsonStrict$OptolithClient.optionalField("apValue", JsonStrict$OptolithClient.string, json),
          apValueAppend: JsonStrict$OptolithClient.optionalField("apValueAppend", JsonStrict$OptolithClient.string, json),
          errata: JsonStrict$OptolithClient.optionalField("errata", Erratum$OptolithClient.Decode.list, json)
        };
}

var Translation$11 = {
  t: t$14
};

var TranslationMap$11 = TranslationMap$OptolithClient.Make(Translation$11);

function multilingual(param) {
  return Json_decode.andThen((function (group) {
                var exit = 0;
                switch (group) {
                  case 8 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* ProtectiveWardingCircle */2,
                                                aeCost: Json_decode.field("aeCost", Json_decode.$$int, json),
                                                translations: Curry._1(TranslationMap$2.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 9 :
                  case 10 :
                      exit = 4;
                      break;
                  case 20 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* Steckenzauber */6,
                                                property: Json_decode.field("property", t$2, json),
                                                translations: Curry._1(TranslationMap$6.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 3 :
                  case 11 :
                  case 12 :
                  case 21 :
                      exit = 2;
                      break;
                  case 22 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* AncestorGlyphs */7,
                                                translations: Curry._1(TranslationMap$7.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 23 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* CeremonialItem */8,
                                                aspect: Json_decode.field("aspect", Json_decode.$$int, json),
                                                translations: Curry._1(TranslationMap$8.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 30 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* Paktgeschenk */9,
                                                translations: Curry._1(TranslationMap$9.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 13 :
                  case 25 :
                  case 33 :
                      exit = 5;
                      break;
                  case 36 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* Kesselzauber */10,
                                                brew: Json_decode.field("brew", Json_decode.$$int, json),
                                                property: Json_decode.field("property", t$2, json),
                                                translations: Curry._1(TranslationMap$10.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 1 :
                  case 2 :
                  case 4 :
                  case 6 :
                  case 7 :
                  case 14 :
                  case 24 :
                  case 26 :
                  case 27 :
                  case 28 :
                  case 29 :
                  case 31 :
                  case 32 :
                  case 34 :
                  case 40 :
                  case 41 :
                      exit = 1;
                      break;
                  case 5 :
                  case 15 :
                  case 16 :
                  case 17 :
                  case 18 :
                  case 19 :
                  case 35 :
                  case 37 :
                  case 38 :
                  case 39 :
                  case 42 :
                  case 43 :
                  case 44 :
                  case 45 :
                      exit = 3;
                      break;
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown special ability group: " + Ley_Int$OptolithClient.show(group),
                          Error: new Error()
                        };
                }
                switch (exit) {
                  case 1 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* Default */0,
                                                translations: Curry._1(TranslationMap.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 2 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* Combat */1,
                                                type_: Json_decode.field("type", Json_decode.$$int, json),
                                                combatTechniques: Json_decode.field("combatTechniques", t, json),
                                                translations: Curry._1(TranslationMap$1.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 3 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* TraditionArtifact */5,
                                                property: Json_decode.field("property", t$2, json),
                                                translations: Curry._1(TranslationMap$5.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 4 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* CombatStyle */3,
                                                type_: Json_decode.field("type", Json_decode.$$int, json),
                                                combatTechniques: Json_decode.field("combatTechniques", t, json),
                                                extended: Json_decode.field("extended", t$1, json),
                                                translations: Curry._1(TranslationMap$3.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  case 5 :
                      return function (param) {
                        return Json_decode.field("value", (function (json) {
                                      return {
                                              group: group,
                                              groupSpecific: {
                                                TAG: /* GeneralStyle */4,
                                                extended: Json_decode.field("extended", t$1, json),
                                                translations: Curry._1(TranslationMap$4.Decode.t, json)
                                              },
                                              translations: Curry._1(TranslationMap$11.Decode.t, json)
                                            };
                                    }), param);
                      };
                  
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.$$int, param);
              }), param);
}

function resolveTranslations(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(TranslationMap$11.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                var match = x.groupSpecific;
                var tmp;
                switch (match.TAG | 0) {
                  case /* Default */0 :
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* Default */0,
                                      rules: groupTranslation.rules
                                    };
                            }));
                      break;
                  case /* Combat */1 :
                      var combatTechniques = match.combatTechniques;
                      var type_ = match.type_;
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$1.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* Combat */1,
                                      rules: groupTranslation.rules,
                                      type_: type_,
                                      combatTechniques: combatTechniques,
                                      penalty: groupTranslation.penalty
                                    };
                            }));
                      break;
                  case /* ProtectiveWardingCircle */2 :
                      var aeCost = match.aeCost;
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$2.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* ProtectiveWardingCircle */2,
                                      aeCost: aeCost,
                                      protectiveCircle: groupTranslation.protectiveCircle,
                                      wardingCircle: groupTranslation.wardingCircle
                                    };
                            }));
                      break;
                  case /* CombatStyle */3 :
                      var extended = match.extended;
                      var combatTechniques$1 = match.combatTechniques;
                      var type_$1 = match.type_;
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$3.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* CombatStyle */3,
                                      rules: groupTranslation.rules,
                                      type_: type_$1,
                                      combatTechniques: combatTechniques$1,
                                      penalty: groupTranslation.penalty,
                                      extended: extended
                                    };
                            }));
                      break;
                  case /* GeneralStyle */4 :
                      var extended$1 = match.extended;
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$4.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* GeneralStyle */4,
                                      rules: groupTranslation.rules,
                                      extended: extended$1
                                    };
                            }));
                      break;
                  case /* TraditionArtifact */5 :
                      var property = match.property;
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$5.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* TraditionArtifact */5,
                                      effect: groupTranslation.effect,
                                      aeCost: groupTranslation.aeCost,
                                      volume: groupTranslation.volume,
                                      bindingCost: groupTranslation.bindingCost,
                                      property: property
                                    };
                            }));
                      break;
                  case /* Steckenzauber */6 :
                      var property$1 = match.property;
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$6.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* Steckenzauber */6,
                                      effect: groupTranslation.effect,
                                      aeCost: groupTranslation.aeCost,
                                      property: property$1
                                    };
                            }));
                      break;
                  case /* AncestorGlyphs */7 :
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$7.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* AncestorGlyphs */7,
                                      rules: groupTranslation.rules,
                                      aeCost: groupTranslation.aeCost
                                    };
                            }));
                      break;
                  case /* CeremonialItem */8 :
                      var aspect = match.aspect;
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$8.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* CeremonialItem */8,
                                      effect: groupTranslation.effect,
                                      aspect: aspect
                                    };
                            }));
                      break;
                  case /* Paktgeschenk */9 :
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$9.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* Paktgeschenk */9,
                                      effect: groupTranslation.effect
                                    };
                            }));
                      break;
                  case /* Kesselzauber */10 :
                      var property$2 = match.property;
                      var brew = match.brew;
                      tmp = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$10.Decode.getFromLanguageOrder, langs, match.translations), (function (groupTranslation) {
                              return {
                                      TAG: /* Kesselzauber */10,
                                      effect: groupTranslation.effect,
                                      aeCost: groupTranslation.aeCost,
                                      volume: groupTranslation.volume,
                                      bindingCost: groupTranslation.bindingCost,
                                      brew: brew,
                                      property: property$2
                                    };
                            }));
                      break;
                  
                }
                return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, tmp, (function (groupSpecific) {
                              return [
                                      translation,
                                      x.group,
                                      groupSpecific
                                    ];
                            }));
              }));
}

function multilingual$1(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          levels: JsonStrict$OptolithClient.optionalField("levels", JsonStrict$OptolithClient.$$int, json),
          max: JsonStrict$OptolithClient.optionalField("max", JsonStrict$OptolithClient.$$int, json),
          selectOptionCategories: JsonStrict$OptolithClient.optionalField("selectOptionCategories", (function (param) {
                  return JsonStrict$OptolithClient.list(SelectOption$OptolithClient.Decode.Category.t, param);
                }), json),
          selectOptions: Ley_Option$OptolithClient.option(SelectOption$OptolithClient.$$Map.empty, SelectOption$OptolithClient.$$Map.fromList, JsonStrict$OptolithClient.optionalField("selectOptions", (function (param) {
                      return JsonStrict$OptolithClient.list(SelectOption$OptolithClient.Decode.multilingualAssoc, param);
                    }), json)),
          prerequisites: JsonStrict$OptolithClient.field("prerequisites", Prerequisite$OptolithClient.Collection.General.Decode.multilingual, json),
          apValue: JsonStrict$OptolithClient.optionalField("apValue", Advantage$OptolithClient.Static.Decode.apValue, json),
          groupSpecific: JsonStrict$OptolithClient.field("groupSpecific", multilingual, json),
          src: JsonStrict$OptolithClient.field("src", PublicationRef$OptolithClient.Decode.multilingualList, json)
        };
}

function toAssoc(x) {
  return [
          x.id,
          x
        ];
}

function assoc(blessings, cantrips, combatTechniques, liturgicalChants, skills, spells, tradeSecrets, languages, scripts, animalShapes, spellEnhancements, liturgicalChantEnhancements) {
  return function (param, param$1) {
    return Decoder$OptolithClient.decodeAssoc((function (param, param$1) {
                  var x = multilingual$1(param$1);
                  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, resolveTranslations(param, x.groupSpecific), (function (param$2) {
                                var translation = param$2[0];
                                var src = PublicationRef$OptolithClient.Decode.resolveTranslationsList(param, x.src);
                                var errata = translation.errata;
                                return {
                                        id: x.id,
                                        name: translation.name,
                                        nameInWiki: translation.nameInWiki,
                                        levels: x.levels,
                                        max: x.max,
                                        selectOptions: Curry._2(SelectOption$OptolithClient.Decode.ResolveCategories.mergeSelectOptions, Curry._2(SelectOption$OptolithClient.$$Map.mapMaybe, (function (param$3) {
                                                    return SelectOption$OptolithClient.Decode.resolveTranslations(param, param$3);
                                                  }), x.selectOptions), Curry.app(SelectOption$OptolithClient.Decode.ResolveCategories.resolveCategories, [
                                                  blessings,
                                                  cantrips,
                                                  combatTechniques,
                                                  liturgicalChants,
                                                  skills,
                                                  spells,
                                                  tradeSecrets,
                                                  languages,
                                                  scripts,
                                                  animalShapes,
                                                  spellEnhancements,
                                                  liturgicalChantEnhancements,
                                                  src,
                                                  Ley_Option$OptolithClient.fromOption(/* [] */0, errata),
                                                  x.selectOptionCategories
                                                ])),
                                        input: translation.input,
                                        gr: param$2[1],
                                        groupSpecific: param$2[2],
                                        prerequisites: Curry._2(Prerequisite$OptolithClient.Collection.General.Decode.resolveTranslations, param, x.prerequisites),
                                        prerequisitesText: translation.prerequisites,
                                        prerequisitesTextStart: translation.prerequisitesStart,
                                        prerequisitesTextEnd: translation.prerequisitesEnd,
                                        apValue: x.apValue,
                                        apValueText: translation.apValue,
                                        apValueTextAppend: translation.apValueAppend,
                                        src: PublicationRef$OptolithClient.Decode.resolveTranslationsList(param, x.src),
                                        errata: Ley_Option$OptolithClient.fromOption(/* [] */0, translation.errata)
                                      };
                              }));
                }), toAssoc, param, param$1);
  };
}

function modifyParsed(specialAbilities) {
  return Curry._3(Ley_IntMap$OptolithClient.adjust, (function (specialAbility) {
                return Ley_Option$OptolithClient.option(specialAbility, (function (language) {
                              return {
                                      id: specialAbility.id,
                                      name: specialAbility.name,
                                      nameInWiki: specialAbility.nameInWiki,
                                      levels: specialAbility.levels,
                                      max: specialAbility.max,
                                      selectOptions: language.selectOptions,
                                      input: specialAbility.input,
                                      gr: specialAbility.gr,
                                      groupSpecific: specialAbility.groupSpecific,
                                      prerequisites: specialAbility.prerequisites,
                                      prerequisitesText: specialAbility.prerequisitesText,
                                      prerequisitesTextStart: specialAbility.prerequisitesTextStart,
                                      prerequisitesTextEnd: specialAbility.prerequisitesTextEnd,
                                      apValue: specialAbility.apValue,
                                      apValueText: specialAbility.apValueText,
                                      apValueTextAppend: specialAbility.apValueTextAppend,
                                      src: specialAbility.src,
                                      errata: specialAbility.errata
                                    };
                            }), Curry._2(Ley_IntMap$OptolithClient.lookup, Id$OptolithClient.SpecialAbility.toInt(/* Language */6), specialAbilities));
              }), Id$OptolithClient.SpecialAbility.toInt(/* LanguageSpecializations */71), specialAbilities);
}

var Static_Decode = {
  assoc: assoc,
  modifyParsed: modifyParsed
};

var Static = {
  ApplicableCombatTechniques: ApplicableCombatTechniques,
  Extended: Extended,
  Property: Property,
  Decode: Static_Decode
};

exports.Static = Static;
/* TranslationMap Not a pure module */
