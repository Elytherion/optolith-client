// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Spells$OptolithClient from "../Increasable/Spells.bs.js";
import * as Ley_Bool$OptolithClient from "../Data/Ley_Bool.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_IntSet$OptolithClient from "../Data/Ley_IntSet.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Dependencies$OptolithClient from "../Prerequisites/Dependencies.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as Prerequisite$OptolithClient from "../Prerequisites/Prerequisite.bs.js";
import * as SelectOption$OptolithClient from "./SelectOption.bs.js";
import * as Prerequisites$OptolithClient from "../Prerequisites/Prerequisites.bs.js";
import * as Ley_Transducer$OptolithClient from "../Data/Ley_Transducer.bs.js";
import * as LiturgicalChants$OptolithClient from "../Increasable/LiturgicalChants.bs.js";
import * as EntryAvailability$OptolithClient from "../Sources/EntryAvailability.bs.js";
import * as Activatable_Accessors$OptolithClient from "./Activatable_Accessors.bs.js";
import * as Activatable_SelectOptions$OptolithClient from "./Activatable_SelectOptions.bs.js";

function isNotActive(maybeHeroEntry) {
  var partial_arg = Ley_Option$OptolithClient.option(/* [] */0, Activatable_SelectOptions$OptolithClient.getActiveSelectOptions1, maybeHeroEntry);
  return function (param) {
    return Curry._2(Ley_List$OptolithClient.notElem, param.id, partial_arg);
  };
}

function areNoSameActive(maybeHeroEntry) {
  var partial_arg = Ley_Option$OptolithClient.option(/* [] */0, Activatable_SelectOptions$OptolithClient.getActiveSelectOptions1, maybeHeroEntry);
  return function (param) {
    return Ley_List$OptolithClient.countMax(param.id)(1, partial_arg);
  };
}

function isNotRequired(otherActivatables, maybeHeroEntry) {
  var partial_arg = Ley_Option$OptolithClient.option(/* [] */0, (function (param) {
          return Dependencies$OptolithClient.Flatten.getRequiredSelectOptions1(otherActivatables, param);
        }), maybeHeroEntry);
  return function (param) {
    var id = param.id;
    return Curry._2(Ley_List$OptolithClient.all, (function (option) {
                  if (option.TAG) {
                    return Curry._2(Ley_List$OptolithClient.notElem, id, option._0);
                  } else {
                    return Curry._2(Id$OptolithClient.Activatable.SelectOption.$less$great, option._0, id);
                  }
                }), partial_arg);
  };
}

function isNotRequiredNotActive(otherActivatables, maybeHeroEntry) {
  var isNoActiveSelection = isNotActive(maybeHeroEntry);
  var isNoRequiredSelection = isNotRequired(otherActivatables, maybeHeroEntry);
  return function (so) {
    if (Curry._1(isNoActiveSelection, so)) {
      return Curry._1(isNoRequiredSelection, so);
    } else {
      return false;
    }
  };
}

function isValid(staticData, hero, entryId, fold) {
  var partial_arg = hero.rules;
  var partial_arg$1 = staticData.publications;
  return Ley_Transducer$OptolithClient.$great$great$tilde(Ley_Transducer$OptolithClient.$great$great$tilde(fold, (function (param) {
                    return EntryAvailability$OptolithClient.isAvailableNull((function (x) {
                                  return x.src;
                                }), partial_arg$1, partial_arg, param);
                  })), (function (x) {
                return Prerequisites$OptolithClient.Validation.arePrerequisitesMet(staticData, hero, entryId, Curry._2(Ley_List$OptolithClient.map, Prerequisite$OptolithClient.General.unify, Curry._1(Prerequisite$OptolithClient.Collection.ByLevel.getFirstLevel, x.prerequisites)));
              }));
}

function filterSpellSelectOptions(pred, fold) {
  return Ley_Transducer$OptolithClient.$great$great$tilde(fold, (function (x) {
                var match = x.staticEntry;
                var tmp;
                tmp = match !== undefined && match.TAG === /* Spell */5 ? match._0 : undefined;
                return Ley_Option$OptolithClient.option(false, pred, tmp);
              }));
}

function getAvailableSelectOptionsTransducer(staticData, hero, magicalTraditions, staticEntry, maybeHeroEntry) {
  var isValidShort = function (param, param$1) {
    return isValid(staticData, hero, param, param$1);
  };
  var isNoGenericRequiredOrActiveSelectionShort = function (param, param$1, param$2) {
    return Ley_Transducer$OptolithClient.$great$great$tilde(isValid(staticData, hero, param$1, param$2), isNotRequiredNotActive(param, maybeHeroEntry));
  };
  var isNoGenericRequiredSelectionShort = function (param, param$1, param$2) {
    return Ley_Transducer$OptolithClient.$great$great$tilde(isValid(staticData, hero, param$1, param$2), isNotRequired(param, maybeHeroEntry));
  };
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
        var staticAdvantage = staticEntry._0;
        var id = {
          TAG: /* Advantage */5,
          _0: staticAdvantage.id
        };
        var partial_arg = hero.advantages;
        var isNoRequiredOrActiveSelection = function (param) {
          return isNoGenericRequiredOrActiveSelectionShort(partial_arg, id, param);
        };
        var partial_arg$1 = hero.advantages;
        var isNoRequiredSelection = function (param) {
          return isNoGenericRequiredSelectionShort(partial_arg$1, id, param);
        };
        var match = Id$OptolithClient.Advantage.fromInt(staticAdvantage.id);
        if (typeof match === "number" && match === 4) {
          return (function (fold) {
                    return Ley_Transducer$OptolithClient.$great$great$tilde(Curry._1(isNoRequiredSelection, fold), areNoSameActive(maybeHeroEntry));
                  });
        } else {
          return isNoRequiredOrActiveSelection;
        }
    case /* Disadvantage */1 :
        var staticDisadvantage = staticEntry._0;
        var id$1 = {
          TAG: /* Disadvantage */6,
          _0: staticDisadvantage.id
        };
        var partial_arg$2 = hero.disadvantages;
        var isNoRequiredOrActiveSelection$1 = function (param) {
          return isNoGenericRequiredOrActiveSelectionShort(partial_arg$2, id$1, param);
        };
        var match$1 = Id$OptolithClient.Disadvantage.fromInt(staticDisadvantage.id);
        if (typeof match$1 !== "number") {
          return isNoRequiredOrActiveSelection$1;
        }
        if (match$1 !== 12) {
          if (match$1 !== 18) {
            return isNoRequiredOrActiveSelection$1;
          }
          var isAdvActive = function (id) {
            return Activatable_Accessors$OptolithClient.isActiveM(Curry._2(Ley_IntMap$OptolithClient.lookup, Id$OptolithClient.Advantage.toInt(id), hero.advantages));
          };
          return (function (fold) {
                    return Ley_Transducer$OptolithClient.$great$great$tilde(Curry._1(isNoRequiredOrActiveSelection$1, fold), (function (x) {
                                  if (isAdvActive(/* SociallyAdaptable */15) || isAdvActive(/* InspireConfidence */16)) {
                                    var id = x.id;
                                    if (id.TAG === /* Skill */1) {
                                      return !Curry._2(Ley_Option$OptolithClient.any, (function (skill) {
                                                    return skill.gr === Curry._1(Id$OptolithClient.Skill.Group.toInt, /* Social */1);
                                                  }), Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, staticData.skills));
                                    } else {
                                      return true;
                                    }
                                  } else {
                                    return true;
                                  }
                                }));
                  });
        }
        var uniqueSelections = Ley_Option$OptolithClient.option(/* [] */0, (function (heroEntry) {
                return Activatable_SelectOptions$OptolithClient.mapActiveOptions1((function (param) {
                              if (param.TAG) {
                                return ;
                              }
                              var id = param._0;
                              if (id.TAG) {
                                return ;
                              } else {
                                return id._0;
                              }
                            }), heroEntry);
              }), maybeHeroEntry);
        var isInfiniteActive = function (id, selectOption) {
          if (Caml_obj.caml_equal(selectOption.id, {
                  TAG: /* Generic */0,
                  _0: id
                })) {
            return Curry._2(Ley_List$OptolithClient.elem, id, uniqueSelections);
          } else {
            return false;
          }
        };
        return (function (fold) {
                  return Ley_Transducer$OptolithClient.$great$great$tilde(isValidShort({
                                  TAG: /* Disadvantage */6,
                                  _0: staticDisadvantage.id
                                }, fold), (function (x) {
                                if (isInfiniteActive(7, x) || isInfiniteActive(8, x)) {
                                  return true;
                                } else if (isNotRequiredNotActive(hero.disadvantages, maybeHeroEntry)(x)) {
                                  return Ley_List$OptolithClient.lengthMax(1, uniqueSelections);
                                } else {
                                  return false;
                                }
                              }));
                });
    case /* SpecialAbility */2 :
        var staticSpecialAbility = staticEntry._0;
        var id$2 = {
          TAG: /* SpecialAbility */22,
          _0: staticSpecialAbility.id
        };
        var partial_arg$3 = hero.specialAbilities;
        var isNoRequiredOrActiveSelection$2 = function (param) {
          return isNoGenericRequiredOrActiveSelectionShort(partial_arg$3, id$2, param);
        };
        var partial_arg$4 = hero.specialAbilities;
        var isNoRequiredSelection$1 = function (param) {
          return isNoGenericRequiredSelectionShort(partial_arg$4, id$2, param);
        };
        var match$2 = Id$OptolithClient.SpecialAbility.fromInt(staticSpecialAbility.id);
        if (typeof match$2 !== "number") {
          return isNoRequiredOrActiveSelection$2;
        }
        var exit = 0;
        if (match$2 < 72) {
          var switcher = match$2 - 26 | 0;
          if (switcher > 44 || switcher < 0) {
            if (switcher >= 45) {
              var availableLanguages = Ley_Option$OptolithClient.option(/* [] */0, (function (heroLanguage) {
                      return Ley_Option$OptolithClient.mapOption((function (active) {
                                    return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, active.level, (function (level) {
                                                  var match = Ley_Option$OptolithClient.listToOption(active.options);
                                                  if (!(level === 4 || level === 3)) {
                                                    return ;
                                                  }
                                                  if (match === undefined) {
                                                    return ;
                                                  }
                                                  if (match.TAG) {
                                                    return ;
                                                  }
                                                  var sid = match._0;
                                                  if (sid.TAG) {
                                                    return ;
                                                  } else {
                                                    return [
                                                            sid._0,
                                                            level
                                                          ];
                                                  }
                                                }));
                                  }), heroLanguage.active);
                    }), Curry._2(Ley_IntMap$OptolithClient.lookup, Id$OptolithClient.SpecialAbility.toInt(/* Language */6), hero.specialAbilities));
              return (function (fold) {
                        var partial_arg = Curry._1(isNoRequiredOrActiveSelection$2, fold);
                        return function (param, param$1) {
                          return Ley_Transducer$OptolithClient.mapOptionT((function (selectOption) {
                                        var sid = selectOption.id;
                                        if (sid.TAG) {
                                          return ;
                                        }
                                        var match = Ley_List$OptolithClient.lookup(sid._0, availableLanguages);
                                        if (match !== undefined) {
                                          if (match !== 3) {
                                            if (match !== 4) {
                                              return ;
                                            } else {
                                              return {
                                                      id: selectOption.id,
                                                      name: selectOption.name,
                                                      apValue: 0,
                                                      prerequisites: selectOption.prerequisites,
                                                      description: selectOption.description,
                                                      isSecret: selectOption.isSecret,
                                                      languages: selectOption.languages,
                                                      continent: selectOption.continent,
                                                      isExtinct: selectOption.isExtinct,
                                                      specializations: selectOption.specializations,
                                                      specializationInput: selectOption.specializationInput,
                                                      animalGr: selectOption.animalGr,
                                                      animalLevel: selectOption.animalLevel,
                                                      enhancementTarget: selectOption.enhancementTarget,
                                                      enhancementLevel: selectOption.enhancementLevel,
                                                      staticEntry: selectOption.staticEntry,
                                                      applications: selectOption.applications,
                                                      src: selectOption.src,
                                                      errata: selectOption.errata
                                                    };
                                            }
                                          } else {
                                            return selectOption;
                                          }
                                        }
                                        
                                      }), partial_arg, param, param$1);
                        };
                      });
            }
            switch (switcher + 26 | 0) {
              case /* SkillSpecialization */0 :
                  var isFirstSpecializationValid = function (id) {
                    return Ley_Option$OptolithClient.option(false, (function (skill) {
                                  return skill.value >= 6;
                                }), Curry._2(Ley_IntMap$OptolithClient.lookup, id, hero.skills));
                  };
                  var counter = Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, maybeHeroEntry, Activatable_SelectOptions$OptolithClient.getActiveOptions2Map);
                  return (function (fold) {
                            var tmp;
                            if (counter !== undefined) {
                              var counter$1 = Caml_option.valFromOption(counter);
                              tmp = (function (selectOption) {
                                  var id = selectOption.id;
                                  if (id.TAG !== /* Skill */1) {
                                    return true;
                                  }
                                  var id$1 = id._0;
                                  if (Curry._2(SelectOption$OptolithClient.$$Map.member, selectOption.id, counter$1)) {
                                    return Curry._1(Ley_Option$OptolithClient.dis, Curry._3(Ley_Option$OptolithClient.liftM2, (function (skill, activeApps) {
                                                      if (Ley_List$OptolithClient.lengthMax(2, activeApps)) {
                                                        return skill.value >= Math.imul(Curry._1(Ley_List$OptolithClient.length, activeApps) + 1 | 0, 6);
                                                      } else {
                                                        return false;
                                                      }
                                                    }), Curry._2(Ley_IntMap$OptolithClient.lookup, id$1, hero.skills), Curry._2(SelectOption$OptolithClient.$$Map.lookup, selectOption.id, counter$1)));
                                  } else {
                                    return isFirstSpecializationValid(id$1);
                                  }
                                });
                            } else {
                              tmp = (function (selectOption) {
                                  var id = selectOption.id;
                                  if (id.TAG === /* Skill */1) {
                                    return isFirstSpecializationValid(id._0);
                                  } else {
                                    return true;
                                  }
                                });
                            }
                            return Ley_Transducer$OptolithClient.$less$amp$tilde(Ley_Transducer$OptolithClient.$great$great$tilde(Curry._1(isNoRequiredSelection$1, fold), tmp), (function (selectOption) {
                                          var maybeCurrentCount = Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, counter, Curry._1(SelectOption$OptolithClient.$$Map.lookup, selectOption.id));
                                          return Ley_Option$OptolithClient.liftDef((function (selectOption) {
                                                        var match = selectOption.staticEntry;
                                                        var tmp;
                                                        tmp = match !== undefined && match.TAG === /* Skill */4 ? match._0 : undefined;
                                                        return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, tmp, (function (skill) {
                                                                      var applications = Ley_List$OptolithClient.filter((function (application) {
                                                                              var isInactive = Curry._2(Ley_Option$OptolithClient.all, Curry._1(Ley_List$OptolithClient.notElem, {
                                                                                        TAG: /* Preset */0,
                                                                                        _0: {
                                                                                          TAG: /* Generic */0,
                                                                                          _0: application.id
                                                                                        }
                                                                                      }), maybeCurrentCount);
                                                                              var prerequisite = application.prerequisite;
                                                                              var hasValidPrerequisites = Prerequisites$OptolithClient.Validation.arePrerequisitesMet(staticData, hero, id$2, prerequisite !== undefined ? ({
                                                                                        hd: {
                                                                                          value: {
                                                                                            TAG: /* Activatable */6,
                                                                                            _0: prerequisite
                                                                                          },
                                                                                          displayOption: /* Generate */0
                                                                                        },
                                                                                        tl: /* [] */0
                                                                                      }) : /* [] */0);
                                                                              if (isInactive) {
                                                                                return hasValidPrerequisites;
                                                                              } else {
                                                                                return false;
                                                                              }
                                                                            }), Curry._1(Ley_IntMap$OptolithClient.elems, skill.applications));
                                                                      return {
                                                                              id: selectOption.id,
                                                                              name: selectOption.name,
                                                                              apValue: selectOption.apValue,
                                                                              prerequisites: selectOption.prerequisites,
                                                                              description: selectOption.description,
                                                                              isSecret: selectOption.isSecret,
                                                                              languages: selectOption.languages,
                                                                              continent: selectOption.continent,
                                                                              isExtinct: selectOption.isExtinct,
                                                                              specializations: selectOption.specializations,
                                                                              specializationInput: selectOption.specializationInput,
                                                                              animalGr: selectOption.animalGr,
                                                                              animalLevel: selectOption.animalLevel,
                                                                              enhancementTarget: selectOption.enhancementTarget,
                                                                              enhancementLevel: selectOption.enhancementLevel,
                                                                              staticEntry: selectOption.staticEntry,
                                                                              applications: applications,
                                                                              src: selectOption.src,
                                                                              errata: selectOption.errata
                                                                            };
                                                                    }));
                                                      }), Ley_Option$OptolithClient.liftDef((function (selectOption) {
                                                            return Curry._3(Ley_Option$OptolithClient.liftM2, (function (currentCount, selectOptionCost) {
                                                                          return {
                                                                                  id: selectOption.id,
                                                                                  name: selectOption.name,
                                                                                  apValue: Math.imul(selectOptionCost, Curry._1(Ley_List$OptolithClient.length, currentCount) + 1 | 0),
                                                                                  prerequisites: selectOption.prerequisites,
                                                                                  description: selectOption.description,
                                                                                  isSecret: selectOption.isSecret,
                                                                                  languages: selectOption.languages,
                                                                                  continent: selectOption.continent,
                                                                                  isExtinct: selectOption.isExtinct,
                                                                                  specializations: selectOption.specializations,
                                                                                  specializationInput: selectOption.specializationInput,
                                                                                  animalGr: selectOption.animalGr,
                                                                                  animalLevel: selectOption.animalLevel,
                                                                                  enhancementTarget: selectOption.enhancementTarget,
                                                                                  enhancementLevel: selectOption.enhancementLevel,
                                                                                  staticEntry: selectOption.staticEntry,
                                                                                  applications: selectOption.applications,
                                                                                  src: selectOption.src,
                                                                                  errata: selectOption.errata
                                                                                };
                                                                        }), maybeCurrentCount, selectOption.apValue);
                                                          }), selectOption));
                                        }));
                          });
              case /* TraditionGuildMages */9 :
                  return (function (param) {
                            return filterSpellSelectOptions((function (spell) {
                                          return Curry._2(Ley_IntSet$OptolithClient.disjoint, spell.traditions, Curry._1(Ley_IntSet$OptolithClient.fromList, {
                                                          hd: Id$OptolithClient.MagicalTradition.toInt(/* General */0),
                                                          tl: {
                                                            hd: Id$OptolithClient.MagicalTradition.toInt(/* GuildMages */1),
                                                            tl: /* [] */0
                                                          }
                                                        }));
                                        }), param);
                          });
              case /* PropertyFocus */11 :
                  var activePropertyKnowledges = Ley_Option$OptolithClient.option(/* [] */0, Activatable_SelectOptions$OptolithClient.getActiveSelectOptions1, maybeHeroEntry);
                  var hasActivePropertyKnowledge = function (selectOption) {
                    var id = selectOption.id;
                    if (id.TAG) {
                      return false;
                    } else {
                      return Curry._2(Ley_List$OptolithClient.elem, id, activePropertyKnowledges);
                    }
                  };
                  return (function (fold) {
                            return Ley_Transducer$OptolithClient.$great$great$tilde(Curry._1(isNoRequiredOrActiveSelection$2, fold), hasActivePropertyKnowledge);
                          });
              case /* PropertyKnowledge */10 :
              case /* AspectKnowledge */12 :
                  exit = 1;
                  break;
              case /* AdaptionZauber */16 :
                  var hasSpellMinimumSr = function (selectOption) {
                    var id = selectOption.id;
                    if (id.TAG === /* Spell */3) {
                      return Ley_Option$OptolithClient.option(false, (function (spell) {
                                    var value = spell.value;
                                    if (value) {
                                      return value._0 >= 10;
                                    } else {
                                      return false;
                                    }
                                  }), Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, hero.spells));
                    } else {
                      return false;
                    }
                  };
                  var isUnfamiliarSpell = function (selectOption) {
                    var id = selectOption.id;
                    if (id.TAG === /* Spell */3) {
                      return Ley_Option$OptolithClient.option(false, Dependencies$OptolithClient.TransferredUnfamiliar.isUnfamiliarSpell(hero.transferredUnfamiliarSpells, magicalTraditions), Curry._2(Ley_IntMap$OptolithClient.lookup, id._0, staticData.spells));
                    } else {
                      return false;
                    }
                  };
                  return (function (fold) {
                            return Ley_Transducer$OptolithClient.$great$great$tilde(Ley_Transducer$OptolithClient.$great$great$tilde(Curry._1(isNoRequiredOrActiveSelection$2, fold), hasSpellMinimumSr), isUnfamiliarSpell);
                          });
              case /* TerrainKnowledge */1 :
              case /* CraftInstruments */2 :
              case /* Hunter */3 :
              case /* AreaKnowledge */4 :
              case /* Literacy */5 :
              case /* Language */6 :
              case /* CombatReflexes */7 :
              case /* ImprovedDodge */8 :
              case /* TraditionChurchOfPraios */13 :
              case /* Feuerschlucker */14 :
              case /* CombatStyleCombination */15 :
              case /* Exorzist */17 :
              case /* FavoriteSpellwork */18 :
              case /* TraditionWitches */19 :
              case /* MagicStyleCombination */20 :
              case /* Harmoniezauberei */21 :
              case /* Matrixzauberei */22 :
              case /* TraditionElves */23 :
              case /* TraditionDruids */24 :
                  return isNoRequiredOrActiveSelection$2;
              case /* SpellEnhancement */25 :
                  exit = 2;
                  break;
              
            }
          } else {
            if (switcher !== 20) {
              return isNoRequiredOrActiveSelection$2;
            }
            exit = 2;
          }
        } else {
          if (match$2 === 79) {
            return (function (param) {
                      return filterSpellSelectOptions((function (spell) {
                                    return Curry._2(Ley_IntSet$OptolithClient.disjoint, spell.traditions, Curry._1(Ley_IntSet$OptolithClient.fromList, {
                                                    hd: Id$OptolithClient.MagicalTradition.toInt(/* General */0),
                                                    tl: {
                                                      hd: Id$OptolithClient.MagicalTradition.toInt(/* Witches */2),
                                                      tl: /* [] */0
                                                    }
                                                  }));
                                  }), param);
                    });
          }
          if (match$2 !== 91) {
            return isNoRequiredOrActiveSelection$2;
          }
          var allowedTraditions = Curry._1(Ley_IntSet$OptolithClient.fromList, Curry._2(Ley_List$OptolithClient.map, Id$OptolithClient.MagicalTradition.toInt, {
                    hd: /* Druids */4,
                    tl: {
                      hd: /* Elves */3,
                      tl: {
                        hd: /* Witches */2,
                        tl: /* [] */0
                      }
                    }
                  }));
          var maybeTransferredSpellFromTradition = Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Curry._2(Ley_IntMap$OptolithClient.lookup, Id$OptolithClient.SpecialAbility.toInt(/* TraditionGuildMages */9), hero.specialAbilities), (function (specialAbility) {
                  return Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, Ley_Option$OptolithClient.listToOption(specialAbility.active), (function (active) {
                                var match = Ley_Option$OptolithClient.listToOption(active.options);
                                var tmp;
                                if (match !== undefined && !match.TAG) {
                                  var id = match._0;
                                  tmp = id.TAG === /* Spell */3 ? id._0 : undefined;
                                } else {
                                  tmp = undefined;
                                }
                                var partial_arg = staticData.spells;
                                return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, tmp, (function (param) {
                                                  return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg, param);
                                                })), (function (spell) {
                                              return spell.traditions;
                                            }));
                              }));
                }));
          return Curry._1(Ley_Option$OptolithClient.$$return, Ley_Option$OptolithClient.option(Ley_Transducer$OptolithClient.idT, (function (transferredSpellFromTradition) {
                            var traditionDiff = Curry._2(Ley_IntSet$OptolithClient.IntSet.Infix.$unknown$slash, allowedTraditions, transferredSpellFromTradition);
                            var hasTransferredSpellAllAllowedTraditions = Curry._1(Ley_IntSet$OptolithClient.$$null, traditionDiff);
                            return function (param) {
                              return filterSpellSelectOptions((function (spell) {
                                            if (!Curry._2(Ley_IntSet$OptolithClient.notElem, Id$OptolithClient.MagicalTradition.toInt(/* General */0), spell.traditions)) {
                                              return false;
                                            }
                                            var partial_arg = hasTransferredSpellAllAllowedTraditions ? allowedTraditions : traditionDiff;
                                            return Curry._2(Ley_IntSet$OptolithClient.any, (function (param) {
                                                          return Ley_Function$OptolithClient.flip(Ley_IntSet$OptolithClient.elem, partial_arg, param);
                                                        }), spell.traditions);
                                          }), param);
                            };
                          }), maybeTransferredSpellFromTradition));
        }
        switch (exit) {
          case 1 :
              var availableIds;
              if (typeof match$2 === "number") {
                switch (match$2) {
                  case /* PropertyKnowledge */10 :
                      availableIds = Spells$OptolithClient.PropertyKnowledge.getAvailableProperties(staticData.spells, hero.spells);
                      break;
                  case /* PropertyFocus */11 :
                      availableIds = /* [] */0;
                      break;
                  case /* AspectKnowledge */12 :
                      availableIds = LiturgicalChants$OptolithClient.AspectKnowledge.getAvailableAspects(staticData.liturgicalChants, hero.liturgicalChants);
                      break;
                  default:
                    availableIds = /* [] */0;
                }
              } else {
                availableIds = /* [] */0;
              }
              var isValidId = function (selectOption) {
                var id = selectOption.id;
                if (id.TAG) {
                  return false;
                } else {
                  return Curry._2(Ley_List$OptolithClient.elem, id._0, availableIds);
                }
              };
              return (function (fold) {
                        return Ley_Transducer$OptolithClient.$great$great$tilde(Curry._1(isNoRequiredOrActiveSelection$2, fold), isValidId);
                      });
          case 2 :
              var getTargetHeroEntry;
              var exit$1 = 0;
              if (typeof match$2 === "number") {
                if (match$2 !== 25) {
                  if (match$2 !== 46) {
                    exit$1 = 3;
                  } else {
                    getTargetHeroEntry = (function (id) {
                        return Curry._2(Ley_IntMap$OptolithClient.lookup, id, hero.liturgicalChants);
                      });
                  }
                } else {
                  getTargetHeroEntry = (function (id) {
                      return Curry._2(Ley_IntMap$OptolithClient.lookup, id, hero.spells);
                    });
                }
              } else {
                exit$1 = 3;
              }
              if (exit$1 === 3) {
                getTargetHeroEntry = (function (param) {
                    
                  });
              }
              var partial_arg$5 = Dependencies$OptolithClient.TransferredUnfamiliar.isUnfamiliarSpell(hero.transferredUnfamiliarSpells, magicalTraditions);
              var isNotUnfamiliar = function (param) {
                return Ley_Bool$OptolithClient.notP(partial_arg$5, param);
              };
              var isValueValid = function (maybeLevel, heroEntry) {
                var match = heroEntry.value;
                if (maybeLevel !== undefined && match) {
                  return match._0 >= ((maybeLevel << 2) + 4 | 0);
                } else {
                  return false;
                }
              };
              return (function (fold) {
                        return Ley_Transducer$OptolithClient.$great$great$tilde(Curry._1(isNoRequiredOrActiveSelection$2, fold), (function (selectOption) {
                                      var match = selectOption.staticEntry;
                                      var match$1 = Curry._2(Ley_Option$OptolithClient.Infix.$great$great$eq, selectOption.enhancementTarget, getTargetHeroEntry);
                                      if (match === undefined) {
                                        return false;
                                      }
                                      switch (match.TAG | 0) {
                                        case /* LiturgicalChant */3 :
                                            if (match$1 !== undefined) {
                                              return isValueValid(selectOption.enhancementLevel, match$1);
                                            } else {
                                              return false;
                                            }
                                        case /* Spell */5 :
                                            if (match$1 !== undefined && Curry._1(isNotUnfamiliar, match._0)) {
                                              return isValueValid(selectOption.enhancementLevel, match$1);
                                            } else {
                                              return false;
                                            }
                                        default:
                                          return false;
                                      }
                                    }));
                      });
          
        }
        break;
    
  }
}

function getAvailableSelectOptions(staticData, hero, magicalTraditions, staticEntry, maybeHeroEntry) {
  var allSelectOptions = Curry._1(SelectOption$OptolithClient.$$Map.elems, Activatable_Accessors$OptolithClient.selectOptions(staticEntry));
  var transducer = getAvailableSelectOptionsTransducer(staticData, hero, magicalTraditions, staticEntry, maybeHeroEntry);
  if (transducer === undefined) {
    return allSelectOptions;
  }
  var xs = Ley_Transducer$OptolithClient.transduceList(transducer, allSelectOptions);
  if (xs) {
    return xs;
  } else if (Curry._1(Ley_List$OptolithClient.$$null, allSelectOptions)) {
    return /* [] */0;
  } else {
    return ;
  }
}

export {
  getAvailableSelectOptions ,
  
}
/* Id-OptolithClient Not a pure module */
