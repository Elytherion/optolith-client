type single_with_id = {
  id : int;
  index : int;
  options : Id.Activatable.Option.t list;
  level : int option;
  customCost : int option;
}
(** A single active Activatable. *)

let single_to_single_with_id (x : 'a Activatable_Dynamic.t) index
    (s : Activatable_Dynamic.single) =
  {
    id = x.id;
    index;
    options = s.options;
    level = s.level;
    customCost = s.customCost;
  }

let hero_entry_to_singles (x : 'a Activatable_Dynamic.t) =
  x.active |> Ley_List.Index.imap (single_to_single_with_id x)

let single_with_id_to_single s =
  {
    Activatable_Dynamic.options = s.options;
    level = s.level;
    customCost = s.customCost;
  }

(* (** Converts the object generated by the list item to an object that can be
    inserted into an array of ActiveObjects.

    @param obj The entry for which you want to convert the object.
    @param activate The object generated by the list item. *)
 let convertUIStateToActiveObject =
   (activate: Record<ActivatableActivationOptions>): Record<ActiveObject> => {
     const id = AAOA.id (activate)
     const selectOptionId1 = AAOA.selectOptionId1 (activate)
     const selectOptionId2 = AAOA.selectOptionId2 (activate)
     const selectOptionId3 = AAOA.selectOptionId3 (activate)
     const input = AAOA.input (activate)
     const level = AAOA.level (activate)
     const customCost = AAOA.customCost (activate)

     return id === AdvantageId.HatredOf
       ? ActiveObject ({
           sid: selectOptionId1,
           sid2: input,
           cost: customCost,
         })
       : id === DisadvantageId.PersonalityFlaw
       ? ActiveObject ({
           sid: selectOptionId1,
           sid2: or (fmap (elemF (List<number | string> (7, 8)))
                         (selectOptionId1))
             ? input
             : None,
           cost: customCost,
         })
       : id === SpecialAbilityId.SkillSpecialization
       ? ActiveObject ({
           sid: selectOptionId1,
           sid2: alt<number | string> (input)
                                     (selectOptionId2),
           cost: customCost,
         })
       : isSome (input) && isSome (selectOptionId1)
       ? ActiveObject ({
           sid: selectOptionId1,
           sid2: input,
           sid3: selectOptionId2,
           tier: level,
           cost: customCost,
         })
       : ActiveObject ({
           sid: alt<number | string> (input)
                                     (selectOptionId1),
           sid2: then (guard (isSome (input) || isSome (selectOptionId1)))
                     (selectOptionId2),
           sid3: selectOptionId3,
           tier: level,
           cost: customCost,
         })
   } *)

(* /**
 * Generates a list of ActiveObjects based on the given instance.
 */
 export const convertActivatableToArray =
   (x: Record<ActivatableDependent>) =>
     pipe_ (
             x,
             ADA.active,
             imap (index => toActiveObjectWithId (index) (ADA.id (x)))
           ) *)
(* /**
 * Get all active items in an array.
 * @param state A state slice.
 */
 export const getActiveFromState =
   foldr (pipe (convertActivatableToArray, append)) (empty)

 export interface ActiveObjectAny extends ActiveObject {
   [key: string]: any
 } *)

let activatable_option_to_select_option_id = function
  | Id.Activatable.Option.Preset id -> Some id
  | CustomInput _ -> None
