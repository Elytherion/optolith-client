// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Decoder$OptolithClient from "../Utilities/Decoder.bs.js";
import * as Erratum$OptolithClient from "../Sources/Erratum.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as JsonStrict$OptolithClient from "../Misc/JsonStrict.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Prerequisite$OptolithClient from "../Prerequisites/Prerequisite.bs.js";
import * as PublicationRef$OptolithClient from "../Sources/PublicationRef.bs.js";
import * as TranslationMap$OptolithClient from "../Misc/TranslationMap.bs.js";

var Dynamic = {};

function decodeVariantOverride(decoder, json) {
  return JsonStrict$OptolithClient.either((function (json) {
                  JsonStrict$OptolithClient.$$const(false, json);
                  return /* Remove */0;
                }), (function (json) {
                  return /* Override */{
                          _0: Curry._1(decoder, json)
                        };
                }))(json);
}

function decodeSkillSpecializationOption(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Group" :
                      return function (json) {
                        return {
                                TAG: /* Group */1,
                                _0: Json_decode.field("value", Prerequisite$OptolithClient.oneOrManyInt, json)
                              };
                      };
                  case "Single" :
                      return function (json) {
                        return {
                                TAG: /* Single */0,
                                _0: Json_decode.field("value", Prerequisite$OptolithClient.oneOrManyInt, json)
                              };
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown skill specialization type: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), param);
}

function decodeVariantSkillSpecializationOption(param) {
  return decodeVariantOverride(decodeSkillSpecializationOption, param);
}

function decodeVariantLanguageAndScriptOption(param) {
  return decodeVariantOverride(JsonStrict$OptolithClient.$$int, param);
}

function decodeCombatTechniqueSecondOption(json) {
  return {
          amount: JsonStrict$OptolithClient.field("amount", JsonStrict$OptolithClient.$$int, json),
          value: JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
        };
}

function decodeCombatTechniqueOption(json) {
  return {
          amount: JsonStrict$OptolithClient.field("amount", JsonStrict$OptolithClient.$$int, json),
          value: JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json),
          second: JsonStrict$OptolithClient.optionalField("second", decodeCombatTechniqueSecondOption, json),
          sid: JsonStrict$OptolithClient.field("sid", (function (param) {
                  return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                }), json)
        };
}

function decodeCombatTechniqueOverrideOption(json) {
  return {
          amount: JsonStrict$OptolithClient.field("amount", JsonStrict$OptolithClient.$$int, json),
          value: JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json),
          second: JsonStrict$OptolithClient.optionalField("second", (function (param) {
                  return decodeVariantOverride(decodeCombatTechniqueSecondOption, param);
                }), json),
          sid: JsonStrict$OptolithClient.field("sid", (function (param) {
                  return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                }), json)
        };
}

function decodeVariantCombatTechniqueOption(param) {
  return decodeVariantOverride(decodeCombatTechniqueOverrideOption, param);
}

function decodeCantripOption(json) {
  return {
          amount: JsonStrict$OptolithClient.field("amount", JsonStrict$OptolithClient.$$int, json),
          sid: JsonStrict$OptolithClient.field("sid", (function (param) {
                  return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                }), json)
        };
}

function decodeTerrainKnowledgeOption(param) {
  return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
}

function decodeSkillOption(json) {
  return {
          gr: JsonStrict$OptolithClient.optionalField("gr", JsonStrict$OptolithClient.$$int, json),
          value: JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
        };
}

function decodeActivatableSkillOption(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", (function (param) {
                  return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                }), json),
          value: JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
        };
}

var defaultVariant = {
  skillSpecialization: undefined,
  languageScript: undefined,
  combatTechnique: undefined,
  cantrip: undefined,
  curse: undefined,
  terrainKnowledge: undefined,
  skill: undefined,
  spells: undefined,
  liturgicalChants: undefined,
  guildMageUnfamiliarSpell: false
};

function decodeVariant(json) {
  return {
          skillSpecialization: JsonStrict$OptolithClient.optionalField("skillSpecialization", decodeVariantSkillSpecializationOption, json),
          languageScript: JsonStrict$OptolithClient.optionalField("languageScript", decodeVariantLanguageAndScriptOption, json),
          combatTechnique: JsonStrict$OptolithClient.optionalField("combatTechnique", decodeVariantCombatTechniqueOption, json),
          cantrip: JsonStrict$OptolithClient.optionalField("cantrip", decodeCantripOption, json),
          curse: JsonStrict$OptolithClient.optionalField("curse", JsonStrict$OptolithClient.$$int, json),
          terrainKnowledge: JsonStrict$OptolithClient.optionalField("terrainKnowledge", decodeTerrainKnowledgeOption, json),
          skill: JsonStrict$OptolithClient.optionalField("skill", decodeSkillOption, json),
          spells: JsonStrict$OptolithClient.optionalField("spells", (function (param) {
                  return JsonStrict$OptolithClient.list(decodeActivatableSkillOption, param);
                }), json),
          liturgicalChants: JsonStrict$OptolithClient.optionalField("liturgicalChants", (function (param) {
                  return JsonStrict$OptolithClient.list(decodeActivatableSkillOption, param);
                }), json),
          guildMageUnfamiliarSpell: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("guildMageUnfamiliarSpell", JsonStrict$OptolithClient.bool, json))
        };
}

var $$default = {
  skillSpecialization: undefined,
  languageScript: undefined,
  combatTechnique: undefined,
  cantrip: undefined,
  curse: undefined,
  terrainKnowledge: undefined,
  skill: undefined,
  spells: undefined,
  liturgicalChants: undefined,
  guildMageUnfamiliarSpell: false
};

function decode(json) {
  return {
          skillSpecialization: JsonStrict$OptolithClient.optionalField("skillSpecialization", decodeSkillSpecializationOption, json),
          languageScript: JsonStrict$OptolithClient.optionalField("languageScript", JsonStrict$OptolithClient.$$int, json),
          combatTechnique: JsonStrict$OptolithClient.optionalField("combatTechnique", decodeCombatTechniqueOption, json),
          cantrip: JsonStrict$OptolithClient.optionalField("cantrip", decodeCantripOption, json),
          curse: JsonStrict$OptolithClient.optionalField("curse", JsonStrict$OptolithClient.$$int, json),
          terrainKnowledge: JsonStrict$OptolithClient.optionalField("terrainKnowledge", decodeTerrainKnowledgeOption, json),
          skill: JsonStrict$OptolithClient.optionalField("skill", decodeSkillOption, json),
          spells: JsonStrict$OptolithClient.optionalField("spells", (function (param) {
                  return JsonStrict$OptolithClient.list(decodeActivatableSkillOption, param);
                }), json),
          liturgicalChants: JsonStrict$OptolithClient.optionalField("liturgicalChants", (function (param) {
                  return JsonStrict$OptolithClient.list(decodeActivatableSkillOption, param);
                }), json),
          guildMageUnfamiliarSpell: false
        };
}

function getGuildMageUnfamiliarSpell(prerequisites) {
  return Curry._2(Ley_List$OptolithClient.any, (function (x) {
                var match = x.value;
                if (match.TAG !== /* Activatable */3) {
                  return false;
                }
                var match$1 = match._0;
                if (match$1.active) {
                  return Id$OptolithClient.Activatable.$eq(match$1.id, {
                              TAG: /* SpecialAbility */2,
                              _0: Id$OptolithClient.SpecialAbility.toInt(/* TraditionGuildMages */9)
                            });
                } else {
                  return false;
                }
              }), prerequisites);
}

var Options = {
  decodeVariantOverride: decodeVariantOverride,
  decodeSkillSpecializationOption: decodeSkillSpecializationOption,
  decodeVariantSkillSpecializationOption: decodeVariantSkillSpecializationOption,
  decodeLanguageAndScriptOption: JsonStrict$OptolithClient.$$int,
  decodeVariantLanguageAndScriptOption: decodeVariantLanguageAndScriptOption,
  decodeCombatTechniqueSecondOption: decodeCombatTechniqueSecondOption,
  decodeCombatTechniqueOption: decodeCombatTechniqueOption,
  decodeCombatTechniqueOverrideOption: decodeCombatTechniqueOverrideOption,
  decodeVariantCombatTechniqueOption: decodeVariantCombatTechniqueOption,
  decodeCantripOption: decodeCantripOption,
  decodeCurseOption: JsonStrict$OptolithClient.$$int,
  decodeTerrainKnowledgeOption: decodeTerrainKnowledgeOption,
  decodeSkillOption: decodeSkillOption,
  decodeActivatableSkillOption: decodeActivatableSkillOption,
  defaultVariant: defaultVariant,
  decodeVariant: decodeVariant,
  $$default: $$default,
  decode: decode,
  getGuildMageUnfamiliarSpell: getGuildMageUnfamiliarSpell
};

function partial_arg_0(json) {
  return {
          TAG: /* Const */0,
          _0: JsonStrict$OptolithClient.string(json)
        };
}

var partial_arg_1 = {
  hd: (function (json) {
      return {
              TAG: /* BySex */1,
              m: JsonStrict$OptolithClient.field("m", JsonStrict$OptolithClient.string, json),
              f: JsonStrict$OptolithClient.field("f", JsonStrict$OptolithClient.string, json)
            };
    }),
  tl: /* [] */0
};

var partial_arg = {
  hd: partial_arg_0,
  tl: partial_arg_1
};

function name(param) {
  return JsonStrict$OptolithClient.oneOf(partial_arg, param);
}

function t(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", name, json),
          precedingText: JsonStrict$OptolithClient.optionalField("precedingText", JsonStrict$OptolithClient.string, json),
          fullText: JsonStrict$OptolithClient.optionalField("fullText", JsonStrict$OptolithClient.string, json),
          concludingText: JsonStrict$OptolithClient.optionalField("concludingText", JsonStrict$OptolithClient.string, json)
        };
}

var Translation = {
  t: t
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function multilingual(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          apValue: JsonStrict$OptolithClient.field("apValue", JsonStrict$OptolithClient.$$int, json),
          prerequisites: JsonStrict$OptolithClient.optionalField("prerequisites", Prerequisite$OptolithClient.Collection.Profession.Decode.multilingual, json),
          options: JsonStrict$OptolithClient.optionalField("options", decodeVariant, json),
          specialAbilities: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("specialAbilities", (function (param) {
                      return JsonStrict$OptolithClient.list(Prerequisite$OptolithClient.Activatable.Decode.t, param);
                    }), json)),
          combatTechniques: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, Ley_IntMap$OptolithClient.fromList, JsonStrict$OptolithClient.optionalField("combatTechniques", (function (param) {
                      return JsonStrict$OptolithClient.list((function (json) {
                                    return [
                                            JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
                                            JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
                                          ];
                                  }), param);
                    }), json)),
          skills: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, Ley_IntMap$OptolithClient.fromList, JsonStrict$OptolithClient.optionalField("skills", (function (param) {
                      return JsonStrict$OptolithClient.list((function (json) {
                                    return [
                                            JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
                                            JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
                                          ];
                                  }), param);
                    }), json)),
          spells: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, Ley_IntMap$OptolithClient.fromList, JsonStrict$OptolithClient.optionalField("spells", (function (param) {
                      return JsonStrict$OptolithClient.list((function (json) {
                                    return [
                                            JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
                                            JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
                                          ];
                                  }), param);
                    }), json)),
          liturgicalChants: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, Ley_IntMap$OptolithClient.fromList, JsonStrict$OptolithClient.optionalField("liturgicalChants", (function (param) {
                      return JsonStrict$OptolithClient.list((function (json) {
                                    return [
                                            JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
                                            JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
                                          ];
                                  }), param);
                    }), json)),
          blessings: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("blessings", (function (param) {
                      return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                    }), json)),
          translations: JsonStrict$OptolithClient.field("translations", TranslationMap.Decode.t, json)
        };
}

function multilingualAssoc(json) {
  var variant = multilingual(json);
  return [
          variant.id,
          variant
        ];
}

function resolveTranslations(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                var prerequisites = Ley_Option$OptolithClient.option(/* [] */0, Curry._1(Prerequisite$OptolithClient.Collection.Profession.Decode.resolveTranslations, langs), x.prerequisites);
                var init = Ley_Option$OptolithClient.fromOption(defaultVariant, x.options);
                return {
                        id: x.id,
                        name: translation.name,
                        apValue: x.apValue,
                        prerequisites: prerequisites,
                        options: {
                          skillSpecialization: init.skillSpecialization,
                          languageScript: init.languageScript,
                          combatTechnique: init.combatTechnique,
                          cantrip: init.cantrip,
                          curse: init.curse,
                          terrainKnowledge: init.terrainKnowledge,
                          skill: init.skill,
                          spells: init.spells,
                          liturgicalChants: init.liturgicalChants,
                          guildMageUnfamiliarSpell: getGuildMageUnfamiliarSpell(prerequisites)
                        },
                        specialAbilities: x.specialAbilities,
                        combatTechniques: x.combatTechniques,
                        skills: x.skills,
                        spells: x.spells,
                        liturgicalChants: x.liturgicalChants,
                        blessings: x.blessings,
                        precedingText: translation.precedingText,
                        fullText: translation.fullText,
                        concludingText: translation.concludingText
                      };
              }));
}

var Decode = {
  Translation: Translation,
  TranslationMap: TranslationMap,
  multilingual: multilingual,
  multilingualAssoc: multilingualAssoc,
  resolveTranslations: resolveTranslations
};

var Variant = {
  Decode: Decode
};

function t$1(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", name, json),
          subname: JsonStrict$OptolithClient.optionalField("subname", name, json),
          prerequisitesStart: JsonStrict$OptolithClient.optionalField("prerequisitesStart", JsonStrict$OptolithClient.string, json),
          suggestedAdvantages: JsonStrict$OptolithClient.optionalField("suggestedAdvantages", JsonStrict$OptolithClient.string, json),
          suggestedDisadvantages: JsonStrict$OptolithClient.optionalField("suggestedDisadvantages", JsonStrict$OptolithClient.string, json),
          unsuitableAdvantages: JsonStrict$OptolithClient.optionalField("unsuitableAdvantages", JsonStrict$OptolithClient.string, json),
          unsuitableDisadvantages: JsonStrict$OptolithClient.optionalField("unsuitableDisadvantages", JsonStrict$OptolithClient.string, json),
          errata: JsonStrict$OptolithClient.optionalField("errata", Erratum$OptolithClient.Decode.list, json)
        };
}

var Translation$1 = {
  t: t$1
};

var TranslationMap$1 = TranslationMap$OptolithClient.Make(Translation$1);

function multilingual$1(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          apValue: JsonStrict$OptolithClient.field("apValue", JsonStrict$OptolithClient.$$int, json),
          prerequisites: JsonStrict$OptolithClient.optionalField("prerequisites", Prerequisite$OptolithClient.Collection.Profession.Decode.multilingual, json),
          options: JsonStrict$OptolithClient.optionalField("options", decode, json),
          specialAbilities: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("specialAbilities", (function (param) {
                      return JsonStrict$OptolithClient.list(Prerequisite$OptolithClient.Activatable.Decode.t, param);
                    }), json)),
          combatTechniques: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, Ley_IntMap$OptolithClient.fromList, JsonStrict$OptolithClient.optionalField("combatTechniques", (function (param) {
                      return JsonStrict$OptolithClient.list((function (json) {
                                    return [
                                            JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
                                            JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
                                          ];
                                  }), param);
                    }), json)),
          skills: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, Ley_IntMap$OptolithClient.fromList, JsonStrict$OptolithClient.optionalField("skills", (function (param) {
                      return JsonStrict$OptolithClient.list((function (json) {
                                    return [
                                            JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
                                            JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
                                          ];
                                  }), param);
                    }), json)),
          spells: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, Ley_IntMap$OptolithClient.fromList, JsonStrict$OptolithClient.optionalField("spells", (function (param) {
                      return JsonStrict$OptolithClient.list((function (json) {
                                    return [
                                            JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
                                            JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
                                          ];
                                  }), param);
                    }), json)),
          liturgicalChants: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, Ley_IntMap$OptolithClient.fromList, JsonStrict$OptolithClient.optionalField("liturgicalChants", (function (param) {
                      return JsonStrict$OptolithClient.list((function (json) {
                                    return [
                                            JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
                                            JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.$$int, json)
                                          ];
                                  }), param);
                    }), json)),
          blessings: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("blessings", (function (param) {
                      return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                    }), json)),
          suggestedAdvantages: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("suggestedAdvantages", (function (param) {
                      return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                    }), json)),
          suggestedDisadvantages: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("suggestedDisadvantages", (function (param) {
                      return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                    }), json)),
          unsuitableAdvantages: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("unsuitableAdvantages", (function (param) {
                      return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                    }), json)),
          unsuitableDisadvantages: Ley_Option$OptolithClient.fromOption(/* [] */0, JsonStrict$OptolithClient.optionalField("unsuitableDisadvantages", (function (param) {
                      return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                    }), json)),
          variants: Ley_Option$OptolithClient.option(Ley_IntMap$OptolithClient.empty, Ley_IntMap$OptolithClient.fromList, JsonStrict$OptolithClient.optionalField("variants", (function (param) {
                      return JsonStrict$OptolithClient.list(multilingualAssoc, param);
                    }), json)),
          isVariantRequired: Ley_Option$OptolithClient.fromOption(false, JsonStrict$OptolithClient.optionalField("isVariantRequired", JsonStrict$OptolithClient.bool, json)),
          curriculum: JsonStrict$OptolithClient.optionalField("curriculum", JsonStrict$OptolithClient.$$int, json),
          gr: JsonStrict$OptolithClient.field("gr", JsonStrict$OptolithClient.$$int, json),
          sgr: JsonStrict$OptolithClient.field("sgr", JsonStrict$OptolithClient.$$int, json),
          src: JsonStrict$OptolithClient.field("src", PublicationRef$OptolithClient.Decode.multilingualList, json),
          translations: JsonStrict$OptolithClient.field("translations", TranslationMap$1.Decode.t, json)
        };
}

function resolveTranslations$1(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap$1.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                var prerequisites = Ley_Option$OptolithClient.option(/* [] */0, Curry._1(Prerequisite$OptolithClient.Collection.Profession.Decode.resolveTranslations, langs), x.prerequisites);
                var init = Ley_Option$OptolithClient.fromOption($$default, x.options);
                return {
                        id: x.id,
                        name: translation.name,
                        subname: translation.subname,
                        apValue: x.apValue,
                        prerequisites: prerequisites,
                        prerequisitesStart: translation.prerequisitesStart,
                        options: {
                          skillSpecialization: init.skillSpecialization,
                          languageScript: init.languageScript,
                          combatTechnique: init.combatTechnique,
                          cantrip: init.cantrip,
                          curse: init.curse,
                          terrainKnowledge: init.terrainKnowledge,
                          skill: init.skill,
                          spells: init.spells,
                          liturgicalChants: init.liturgicalChants,
                          guildMageUnfamiliarSpell: getGuildMageUnfamiliarSpell(prerequisites)
                        },
                        specialAbilities: x.specialAbilities,
                        combatTechniques: x.combatTechniques,
                        skills: x.skills,
                        spells: x.spells,
                        liturgicalChants: x.liturgicalChants,
                        blessings: x.blessings,
                        suggestedAdvantages: x.suggestedAdvantages,
                        suggestedAdvantagesText: translation.suggestedAdvantages,
                        suggestedDisadvantages: x.suggestedDisadvantages,
                        suggestedDisadvantagesText: translation.suggestedDisadvantages,
                        unsuitableAdvantages: x.unsuitableAdvantages,
                        unsuitableAdvantagesText: translation.unsuitableAdvantages,
                        unsuitableDisadvantages: x.unsuitableDisadvantages,
                        unsuitableDisadvantagesText: translation.unsuitableDisadvantages,
                        variants: Curry._2(Ley_IntMap$OptolithClient.mapMaybe, (function (param) {
                                return resolveTranslations(langs, param);
                              }), x.variants),
                        isVariantRequired: x.isVariantRequired,
                        curriculum: x.curriculum,
                        gr: x.gr,
                        sgr: x.sgr,
                        src: PublicationRef$OptolithClient.Decode.resolveTranslationsList(langs, x.src),
                        errata: Ley_Option$OptolithClient.fromOption(/* [] */0, translation.errata)
                      };
              }));
}

function t$2(langs, json) {
  return resolveTranslations$1(langs, multilingual$1(json));
}

function toAssoc(x) {
  return [
          x.id,
          x
        ];
}

function assoc(param, param$1) {
  return Decoder$OptolithClient.decodeAssoc(t$2, toAssoc, param, param$1);
}

var Decode$1 = {
  Translation: Translation$1,
  TranslationMap: TranslationMap$1,
  multilingual: multilingual$1,
  resolveTranslations: resolveTranslations$1,
  t: t$2,
  toAssoc: toAssoc,
  assoc: assoc
};

var Static = {
  Options: Options,
  name: name,
  Variant: Variant,
  Decode: Decode$1
};

export {
  Dynamic ,
  Static ,
  
}
/* TranslationMap Not a pure module */
